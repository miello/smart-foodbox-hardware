
cut_loss_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08007014  08007014  00017014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007190  08007190  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007190  08007190  00017190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007198  08007198  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007198  08007198  00017198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080071a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a94  20000084  08007224  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b18  08007224  00024b18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019293  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f9f  00000000  00000000  00039347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  0003c2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003d508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000031da  00000000  00000000  0003e648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cd0  00000000  00000000  00041822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db62  00000000  00000000  000564f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4054  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000518c  00000000  00000000  000f40a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ffc 	.word	0x08006ffc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08006ffc 	.word	0x08006ffc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96e 	b.w	80009fc <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468c      	mov	ip, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8083 	bne.w	800084e <__udivmoddi4+0x116>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d947      	bls.n	80007de <__udivmoddi4+0xa6>
 800074e:	fab2 f282 	clz	r2, r2
 8000752:	b142      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000754:	f1c2 0020 	rsb	r0, r2, #32
 8000758:	fa24 f000 	lsr.w	r0, r4, r0
 800075c:	4091      	lsls	r1, r2
 800075e:	4097      	lsls	r7, r2
 8000760:	ea40 0c01 	orr.w	ip, r0, r1
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbbc f6f8 	udiv	r6, ip, r8
 8000770:	fa1f fe87 	uxth.w	lr, r7
 8000774:	fb08 c116 	mls	r1, r8, r6, ip
 8000778:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077c:	fb06 f10e 	mul.w	r1, r6, lr
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	f106 30ff 	add.w	r0, r6, #4294967295
 800078a:	f080 8119 	bcs.w	80009c0 <__udivmoddi4+0x288>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8116 	bls.w	80009c0 <__udivmoddi4+0x288>
 8000794:	3e02      	subs	r6, #2
 8000796:	443b      	add	r3, r7
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a0:	fb08 3310 	mls	r3, r8, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	193c      	adds	r4, r7, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8105 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 80007ba:	45a6      	cmp	lr, r4
 80007bc:	f240 8102 	bls.w	80009c4 <__udivmoddi4+0x28c>
 80007c0:	3802      	subs	r0, #2
 80007c2:	443c      	add	r4, r7
 80007c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	2600      	movs	r6, #0
 80007ce:	b11d      	cbz	r5, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c5 4300 	strd	r4, r3, [r5]
 80007d8:	4631      	mov	r1, r6
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	b902      	cbnz	r2, 80007e2 <__udivmoddi4+0xaa>
 80007e0:	deff      	udf	#255	; 0xff
 80007e2:	fab2 f282 	clz	r2, r2
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d150      	bne.n	800088c <__udivmoddi4+0x154>
 80007ea:	1bcb      	subs	r3, r1, r7
 80007ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	2601      	movs	r6, #1
 80007f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007fa:	0c21      	lsrs	r1, r4, #16
 80007fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb08 f30c 	mul.w	r3, r8, ip
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0xe4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0xe2>
 8000814:	428b      	cmp	r3, r1
 8000816:	f200 80e9 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 800081a:	4684      	mov	ip, r0
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1110 	mls	r1, lr, r0, r1
 8000828:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x10c>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x10a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80d9 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e7bf      	b.n	80007ce <__udivmoddi4+0x96>
 800084e:	428b      	cmp	r3, r1
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x12e>
 8000852:	2d00      	cmp	r5, #0
 8000854:	f000 80b1 	beq.w	80009ba <__udivmoddi4+0x282>
 8000858:	2600      	movs	r6, #0
 800085a:	e9c5 0100 	strd	r0, r1, [r5]
 800085e:	4630      	mov	r0, r6
 8000860:	4631      	mov	r1, r6
 8000862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000866:	fab3 f683 	clz	r6, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d14a      	bne.n	8000904 <__udivmoddi4+0x1cc>
 800086e:	428b      	cmp	r3, r1
 8000870:	d302      	bcc.n	8000878 <__udivmoddi4+0x140>
 8000872:	4282      	cmp	r2, r0
 8000874:	f200 80b8 	bhi.w	80009e8 <__udivmoddi4+0x2b0>
 8000878:	1a84      	subs	r4, r0, r2
 800087a:	eb61 0103 	sbc.w	r1, r1, r3
 800087e:	2001      	movs	r0, #1
 8000880:	468c      	mov	ip, r1
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0a8      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000886:	e9c5 4c00 	strd	r4, ip, [r5]
 800088a:	e7a5      	b.n	80007d8 <__udivmoddi4+0xa0>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f603 	lsr.w	r6, r0, r3
 8000894:	4097      	lsls	r7, r2
 8000896:	fa01 f002 	lsl.w	r0, r1, r2
 800089a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089e:	40d9      	lsrs	r1, r3
 80008a0:	4330      	orrs	r0, r6
 80008a2:	0c03      	lsrs	r3, r0, #16
 80008a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008a8:	fa1f f887 	uxth.w	r8, r7
 80008ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80008b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b4:	fb06 f108 	mul.w	r1, r6, r8
 80008b8:	4299      	cmp	r1, r3
 80008ba:	fa04 f402 	lsl.w	r4, r4, r2
 80008be:	d909      	bls.n	80008d4 <__udivmoddi4+0x19c>
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008c6:	f080 808d 	bcs.w	80009e4 <__udivmoddi4+0x2ac>
 80008ca:	4299      	cmp	r1, r3
 80008cc:	f240 808a 	bls.w	80009e4 <__udivmoddi4+0x2ac>
 80008d0:	3e02      	subs	r6, #2
 80008d2:	443b      	add	r3, r7
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b281      	uxth	r1, r0
 80008d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e4:	fb00 f308 	mul.w	r3, r0, r8
 80008e8:	428b      	cmp	r3, r1
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x1c4>
 80008ec:	1879      	adds	r1, r7, r1
 80008ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f2:	d273      	bcs.n	80009dc <__udivmoddi4+0x2a4>
 80008f4:	428b      	cmp	r3, r1
 80008f6:	d971      	bls.n	80009dc <__udivmoddi4+0x2a4>
 80008f8:	3802      	subs	r0, #2
 80008fa:	4439      	add	r1, r7
 80008fc:	1acb      	subs	r3, r1, r3
 80008fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000902:	e778      	b.n	80007f6 <__udivmoddi4+0xbe>
 8000904:	f1c6 0c20 	rsb	ip, r6, #32
 8000908:	fa03 f406 	lsl.w	r4, r3, r6
 800090c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000910:	431c      	orrs	r4, r3
 8000912:	fa20 f70c 	lsr.w	r7, r0, ip
 8000916:	fa01 f306 	lsl.w	r3, r1, r6
 800091a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800091e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000922:	431f      	orrs	r7, r3
 8000924:	0c3b      	lsrs	r3, r7, #16
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fa1f f884 	uxth.w	r8, r4
 800092e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000932:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000936:	fb09 fa08 	mul.w	sl, r9, r8
 800093a:	458a      	cmp	sl, r1
 800093c:	fa02 f206 	lsl.w	r2, r2, r6
 8000940:	fa00 f306 	lsl.w	r3, r0, r6
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x220>
 8000946:	1861      	adds	r1, r4, r1
 8000948:	f109 30ff 	add.w	r0, r9, #4294967295
 800094c:	d248      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 800094e:	458a      	cmp	sl, r1
 8000950:	d946      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 8000952:	f1a9 0902 	sub.w	r9, r9, #2
 8000956:	4421      	add	r1, r4
 8000958:	eba1 010a 	sub.w	r1, r1, sl
 800095c:	b2bf      	uxth	r7, r7
 800095e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000962:	fb0e 1110 	mls	r1, lr, r0, r1
 8000966:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800096a:	fb00 f808 	mul.w	r8, r0, r8
 800096e:	45b8      	cmp	r8, r7
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x24a>
 8000972:	19e7      	adds	r7, r4, r7
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d22e      	bcs.n	80009d8 <__udivmoddi4+0x2a0>
 800097a:	45b8      	cmp	r8, r7
 800097c:	d92c      	bls.n	80009d8 <__udivmoddi4+0x2a0>
 800097e:	3802      	subs	r0, #2
 8000980:	4427      	add	r7, r4
 8000982:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000986:	eba7 0708 	sub.w	r7, r7, r8
 800098a:	fba0 8902 	umull	r8, r9, r0, r2
 800098e:	454f      	cmp	r7, r9
 8000990:	46c6      	mov	lr, r8
 8000992:	4649      	mov	r1, r9
 8000994:	d31a      	bcc.n	80009cc <__udivmoddi4+0x294>
 8000996:	d017      	beq.n	80009c8 <__udivmoddi4+0x290>
 8000998:	b15d      	cbz	r5, 80009b2 <__udivmoddi4+0x27a>
 800099a:	ebb3 020e 	subs.w	r2, r3, lr
 800099e:	eb67 0701 	sbc.w	r7, r7, r1
 80009a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009a6:	40f2      	lsrs	r2, r6
 80009a8:	ea4c 0202 	orr.w	r2, ip, r2
 80009ac:	40f7      	lsrs	r7, r6
 80009ae:	e9c5 2700 	strd	r2, r7, [r5]
 80009b2:	2600      	movs	r6, #0
 80009b4:	4631      	mov	r1, r6
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e70b      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0x60>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6fd      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009c8:	4543      	cmp	r3, r8
 80009ca:	d2e5      	bcs.n	8000998 <__udivmoddi4+0x260>
 80009cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009d0:	eb69 0104 	sbc.w	r1, r9, r4
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7df      	b.n	8000998 <__udivmoddi4+0x260>
 80009d8:	4608      	mov	r0, r1
 80009da:	e7d2      	b.n	8000982 <__udivmoddi4+0x24a>
 80009dc:	4660      	mov	r0, ip
 80009de:	e78d      	b.n	80008fc <__udivmoddi4+0x1c4>
 80009e0:	4681      	mov	r9, r0
 80009e2:	e7b9      	b.n	8000958 <__udivmoddi4+0x220>
 80009e4:	4666      	mov	r6, ip
 80009e6:	e775      	b.n	80008d4 <__udivmoddi4+0x19c>
 80009e8:	4630      	mov	r0, r6
 80009ea:	e74a      	b.n	8000882 <__udivmoddi4+0x14a>
 80009ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f0:	4439      	add	r1, r7
 80009f2:	e713      	b.n	800081c <__udivmoddi4+0xe4>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	e724      	b.n	8000844 <__udivmoddi4+0x10c>
 80009fa:	bf00      	nop

080009fc <__aeabi_idiv0>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <hx711_delay_us>:
/**
 * Use for delay in microsecond (Reference to clock speed) by called assembly instruction NOP
 * Credit to https://github.com/nimaltd/HX711/blob/a5a317e818fee1aa02c729257cff0308e5ac61c0/hx711.c#L10
 */

void hx711_delay_us(uint32_t delay) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	while (delay > 0) {
 8000a08:	e003      	b.n	8000a12 <hx711_delay_us+0x12>
		delay--;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
		asm("NOP");
 8000a10:	bf00      	nop
	while (delay > 0) {
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f8      	bne.n	8000a0a <hx711_delay_us+0xa>
	}
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <read_weight>:
/**
 *  All credit to
 *	- https://cdn.sparkfun.com/datasheets/Sensors/ForceFlex/hx711_english.pdf
 *	- https://github.com/nimaltd/HX711/blob/master/hx711.c
 */
uint32_t read_weight(uint8_t tuning) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	uint32_t count = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
	uint32_t startTime = HAL_GetTick();
 8000a36:	f000 febb 	bl	80017b0 <HAL_GetTick>
 8000a3a:	60b8      	str	r0, [r7, #8]
	uint8_t found = 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	74fb      	strb	r3, [r7, #19]
	while (HAL_GPIO_ReadPin(Weight_SDA_GPIO_Port, Weight_SDA_Pin)) {
 8000a40:	e00c      	b.n	8000a5c <read_weight+0x34>
		osDelay(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f003 f8fa 	bl	8003c3c <osDelay>

		// Timeout
		if (HAL_GetTick() - startTime > 150) {
 8000a48:	f000 feb2 	bl	80017b0 <HAL_GetTick>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	2b96      	cmp	r3, #150	; 0x96
 8000a54:	d902      	bls.n	8000a5c <read_weight+0x34>
			found = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	74fb      	strb	r3, [r7, #19]
			break;
 8000a5a:	e007      	b.n	8000a6c <read_weight+0x44>
	while (HAL_GPIO_ReadPin(Weight_SDA_GPIO_Port, Weight_SDA_Pin)) {
 8000a5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a60:	482e      	ldr	r0, [pc, #184]	; (8000b1c <read_weight+0xf4>)
 8000a62:	f001 fcfd 	bl	8002460 <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1ea      	bne.n	8000a42 <read_weight+0x1a>
		}
	}

	if (!found) {
 8000a6c:	7cfb      	ldrb	r3, [r7, #19]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <read_weight+0x4e>
		return 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e04e      	b.n	8000b14 <read_weight+0xec>
	}

	for (int i = 0; i < 24; ++i) {
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	e022      	b.n	8000ac2 <read_weight+0x9a>
		HAL_GPIO_WritePin(Weight_SCK_GPIO_Port, Weight_SCK_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a82:	4826      	ldr	r0, [pc, #152]	; (8000b1c <read_weight+0xf4>)
 8000a84:	f001 fd04 	bl	8002490 <HAL_GPIO_WritePin>
		hx711_delay_us(20);
 8000a88:	2014      	movs	r0, #20
 8000a8a:	f7ff ffb9 	bl	8000a00 <hx711_delay_us>

		count <<= 1;
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	617b      	str	r3, [r7, #20]

		HAL_GPIO_WritePin(Weight_SCK_GPIO_Port, Weight_SCK_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9a:	4820      	ldr	r0, [pc, #128]	; (8000b1c <read_weight+0xf4>)
 8000a9c:	f001 fcf8 	bl	8002490 <HAL_GPIO_WritePin>
		hx711_delay_us(20);
 8000aa0:	2014      	movs	r0, #20
 8000aa2:	f7ff ffad 	bl	8000a00 <hx711_delay_us>
		if (HAL_GPIO_ReadPin(Weight_SDA_GPIO_Port, Weight_SDA_Pin)
 8000aa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aaa:	481c      	ldr	r0, [pc, #112]	; (8000b1c <read_weight+0xf4>)
 8000aac:	f001 fcd8 	bl	8002460 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d102      	bne.n	8000abc <read_weight+0x94>
				== GPIO_PIN_SET)
			++count;
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 24; ++i) {
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2b17      	cmp	r3, #23
 8000ac6:	ddd9      	ble.n	8000a7c <read_weight+0x54>
	}

	count ^= 0x800000;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8000ace:	617b      	str	r3, [r7, #20]
	HAL_GPIO_WritePin(Weight_SDA_GPIO_Port, Weight_SDA_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad6:	4811      	ldr	r0, [pc, #68]	; (8000b1c <read_weight+0xf4>)
 8000ad8:	f001 fcda 	bl	8002490 <HAL_GPIO_WritePin>
	hx711_delay_us(20);
 8000adc:	2014      	movs	r0, #20
 8000ade:	f7ff ff8f 	bl	8000a00 <hx711_delay_us>
	HAL_GPIO_WritePin(Weight_SDA_GPIO_Port, Weight_SDA_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <read_weight+0xf4>)
 8000aea:	f001 fcd1 	bl	8002490 <HAL_GPIO_WritePin>
	hx711_delay_us(20);
 8000aee:	2014      	movs	r0, #20
 8000af0:	f7ff ff86 	bl	8000a00 <hx711_delay_us>

	if (tuning == 1)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d101      	bne.n	8000afe <read_weight+0xd6>
		return count;
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	e00a      	b.n	8000b14 <read_weight+0xec>
	if (count < base_weight)
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <read_weight+0xf8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d201      	bcs.n	8000b0c <read_weight+0xe4>
		return 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e003      	b.n	8000b14 <read_weight+0xec>
	return (count - base_weight);
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <read_weight+0xf8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	1ad3      	subs	r3, r2, r3
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	200000a0 	.word	0x200000a0

08000b24 <read_weight_average>:

uint32_t read_weight_average() {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
	uint32_t now = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AVERAGE_ROUND; ++i) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	e012      	b.n	8000b5a <read_weight_average+0x36>
		uint32_t nxt = read_weight(0) / divider;
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff ff77 	bl	8000a28 <read_weight>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <read_weight_average+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b44:	607b      	str	r3, [r7, #4]

		now += nxt;
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
		osDelay(1);
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f003 f874 	bl	8003c3c <osDelay>
	for (int i = 0; i < AVERAGE_ROUND; ++i) {
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	3301      	adds	r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	2219      	movs	r2, #25
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d3e8      	bcc.n	8000b34 <read_weight_average+0x10>
	}

	if (now <= result_offset)
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <read_weight_average+0x68>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d801      	bhi.n	8000b70 <read_weight_average+0x4c>
		return 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e006      	b.n	8000b7e <read_weight_average+0x5a>
	return ((now - result_offset) / AVERAGE_ROUND);
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <read_weight_average+0x68>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	2219      	movs	r2, #25
 8000b7a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000004 	.word	0x20000004
 8000b8c:	20000000 	.word	0x20000000

08000b90 <set_zero_weight>:

void set_zero_weight() {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
	uint32_t now = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AVERAGE_ROUND; ++i) {
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	e014      	b.n	8000bca <set_zero_weight+0x3a>
		uint32_t nxt = read_weight(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f7ff ff41 	bl	8000a28 <read_weight>
 8000ba6:	6078      	str	r0, [r7, #4]
		now += nxt;
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]
		osDelay(1);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f003 f843 	bl	8003c3c <osDelay>
		if (nxt == 0) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d103      	bne.n	8000bc4 <set_zero_weight+0x34>
			--i;
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	60bb      	str	r3, [r7, #8]
			continue;
 8000bc2:	bf00      	nop
	for (int i = 0; i < AVERAGE_ROUND; ++i) {
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	2219      	movs	r2, #25
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d3e6      	bcc.n	8000ba0 <set_zero_weight+0x10>
		}
	}

	now /= AVERAGE_ROUND;
 8000bd2:	2219      	movs	r2, #25
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
	base_weight = now;
 8000bdc:	4a03      	ldr	r2, [pc, #12]	; (8000bec <set_zero_weight+0x5c>)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6013      	str	r3, [r2, #0]
}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000a0 	.word	0x200000a0

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f000 fd75 	bl	80016e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 f891 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f000 f9a1 	bl	8000f44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c02:	f000 f975 	bl	8000ef0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c06:	f000 f945 	bl	8000e94 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000c0a:	f000 f8f1 	bl	8000df0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	// Set zero weight
	for (int i = 0; i < 10; ++i) {
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	e004      	b.n	8000c1e <main+0x2e>
		set_zero_weight();
 8000c14:	f7ff ffbc 	bl	8000b90 <set_zero_weight>
	for (int i = 0; i < 10; ++i) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b09      	cmp	r3, #9
 8000c22:	ddf7      	ble.n	8000c14 <main+0x24>
	}

	// ESP Connection Testing
	HAL_StatusTypeDef esp_check;
	while (1) {
		esp_check = HAL_I2C_Slave_Transmit(&hi2c1, "04", 2, 1000);
 8000c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c28:	2202      	movs	r2, #2
 8000c2a:	4929      	ldr	r1, [pc, #164]	; (8000cd0 <main+0xe0>)
 8000c2c:	4829      	ldr	r0, [pc, #164]	; (8000cd4 <main+0xe4>)
 8000c2e:	f001 fd8d 	bl	800274c <HAL_I2C_Slave_Transmit>
 8000c32:	4603      	mov	r3, r0
 8000c34:	70fb      	strb	r3, [r7, #3]
		esp_check |= HAL_I2C_Slave_Transmit(&hi2c1, "Test", 4, 1000);
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	4926      	ldr	r1, [pc, #152]	; (8000cd8 <main+0xe8>)
 8000c3e:	4825      	ldr	r0, [pc, #148]	; (8000cd4 <main+0xe4>)
 8000c40:	f001 fd84 	bl	800274c <HAL_I2C_Slave_Transmit>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	70fb      	strb	r3, [r7, #3]

		if (esp_check == HAL_OK)
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d00b      	beq.n	8000c6c <main+0x7c>
			break;
		HAL_UART_Transmit(&huart2, "Failed to reach esp8266. Retrying\r\n", 35,
 8000c54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c58:	2223      	movs	r2, #35	; 0x23
 8000c5a:	4920      	ldr	r1, [pc, #128]	; (8000cdc <main+0xec>)
 8000c5c:	4820      	ldr	r0, [pc, #128]	; (8000ce0 <main+0xf0>)
 8000c5e:	f002 fc14 	bl	800348a <HAL_UART_Transmit>
				1000);
		HAL_Delay(1000);
 8000c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c66:	f000 fdaf 	bl	80017c8 <HAL_Delay>
		esp_check = HAL_I2C_Slave_Transmit(&hi2c1, "04", 2, 1000);
 8000c6a:	e7db      	b.n	8000c24 <main+0x34>
			break;
 8000c6c:	bf00      	nop
	}

	// Set LED on board to tell that Program is ready
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2120      	movs	r1, #32
 8000c72:	481c      	ldr	r0, [pc, #112]	; (8000ce4 <main+0xf4>)
 8000c74:	f001 fc0c 	bl	8002490 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c78:	f002 ff04 	bl	8003a84 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of WeightMutex */
  WeightMutexHandle = osMutexNew(&WeightMutex_attributes);
 8000c7c:	481a      	ldr	r0, [pc, #104]	; (8000ce8 <main+0xf8>)
 8000c7e:	f002 fff8 	bl	8003c72 <osMutexNew>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a19      	ldr	r2, [pc, #100]	; (8000cec <main+0xfc>)
 8000c86:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c88:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <main+0x100>)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4819      	ldr	r0, [pc, #100]	; (8000cf4 <main+0x104>)
 8000c8e:	f002 ff43 	bl	8003b18 <osThreadNew>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <main+0x108>)
 8000c96:	6013      	str	r3, [r2, #0]

  /* creation of weightSensing */
  weightSensingHandle = osThreadNew(StartWeightSense, NULL, &weightSensing_attributes);
 8000c98:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <main+0x10c>)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4818      	ldr	r0, [pc, #96]	; (8000d00 <main+0x110>)
 8000c9e:	f002 ff3b 	bl	8003b18 <osThreadNew>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <main+0x114>)
 8000ca6:	6013      	str	r3, [r2, #0]

  /* creation of resetWeight */
  resetWeightHandle = osThreadNew(ResetWeightHandle, NULL, &resetWeight_attributes);
 8000ca8:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <main+0x118>)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4817      	ldr	r0, [pc, #92]	; (8000d0c <main+0x11c>)
 8000cae:	f002 ff33 	bl	8003b18 <osThreadNew>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <main+0x120>)
 8000cb6:	6013      	str	r3, [r2, #0]

  /* creation of ledDisplay */
  ledDisplayHandle = osThreadNew(StartWatchLDR, NULL, &ledDisplay_attributes);
 8000cb8:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <main+0x124>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4816      	ldr	r0, [pc, #88]	; (8000d18 <main+0x128>)
 8000cbe:	f002 ff2b 	bl	8003b18 <osThreadNew>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4a15      	ldr	r2, [pc, #84]	; (8000d1c <main+0x12c>)
 8000cc6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cc8:	f002 ff00 	bl	8003acc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000ccc:	e7fe      	b.n	8000ccc <main+0xdc>
 8000cce:	bf00      	nop
 8000cd0:	08007054 	.word	0x08007054
 8000cd4:	200049d4 	.word	0x200049d4
 8000cd8:	08007058 	.word	0x08007058
 8000cdc:	08007060 	.word	0x08007060
 8000ce0:	20004a80 	.word	0x20004a80
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	08007134 	.word	0x08007134
 8000cec:	20004a7c 	.word	0x20004a7c
 8000cf0:	080070a4 	.word	0x080070a4
 8000cf4:	08001069 	.word	0x08001069
 8000cf8:	200049d0 	.word	0x200049d0
 8000cfc:	080070c8 	.word	0x080070c8
 8000d00:	08001079 	.word	0x08001079
 8000d04:	20004a78 	.word	0x20004a78
 8000d08:	080070ec 	.word	0x080070ec
 8000d0c:	0800121d 	.word	0x0800121d
 8000d10:	20004a2c 	.word	0x20004a2c
 8000d14:	08007110 	.word	0x08007110
 8000d18:	080012b1 	.word	0x080012b1
 8000d1c:	20004a28 	.word	0x20004a28

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b094      	sub	sp, #80	; 0x50
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	2230      	movs	r2, #48	; 0x30
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 fd3c 	bl	80067ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <SystemClock_Config+0xc8>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	4a26      	ldr	r2, [pc, #152]	; (8000de8 <SystemClock_Config+0xc8>)
 8000d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d52:	6413      	str	r3, [r2, #64]	; 0x40
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <SystemClock_Config+0xc8>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	4b21      	ldr	r3, [pc, #132]	; (8000dec <SystemClock_Config+0xcc>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a20      	ldr	r2, [pc, #128]	; (8000dec <SystemClock_Config+0xcc>)
 8000d6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <SystemClock_Config+0xcc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d80:	2301      	movs	r3, #1
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d84:	2310      	movs	r3, #16
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d90:	2308      	movs	r3, #8
 8000d92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000d94:	2332      	movs	r3, #50	; 0x32
 8000d96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da0:	f107 0320 	add.w	r3, r7, #32
 8000da4:	4618      	mov	r0, r3
 8000da6:	f001 feaf 	bl	8002b08 <HAL_RCC_OscConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000db0:	f000 fafc 	bl	80013ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db4:	230f      	movs	r3, #15
 8000db6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db8:	2302      	movs	r3, #2
 8000dba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 f911 	bl	8002ff8 <HAL_RCC_ClockConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ddc:	f000 fae6 	bl	80013ac <Error_Handler>
  }
}
 8000de0:	bf00      	nop
 8000de2:	3750      	adds	r7, #80	; 0x50
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40007000 	.word	0x40007000

08000df0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000df6:	463b      	mov	r3, r7
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e04:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <MX_ADC1_Init+0x9c>)
 8000e06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e14:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e30:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <MX_ADC1_Init+0xa0>)
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e4e:	480e      	ldr	r0, [pc, #56]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e50:	f000 fcde 	bl	8001810 <HAL_ADC_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e5a:	f000 faa7 	bl	80013ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e70:	f000 fe5e 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e7a:	f000 fa97 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20004a30 	.word	0x20004a30
 8000e8c:	40012000 	.word	0x40012000
 8000e90:	0f000001 	.word	0x0f000001

08000e94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_I2C1_Init+0x50>)
 8000e9a:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <MX_I2C1_Init+0x54>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_I2C1_Init+0x50>)
 8000ea0:	4a12      	ldr	r2, [pc, #72]	; (8000eec <MX_I2C1_Init+0x58>)
 8000ea2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_I2C1_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 2;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_I2C1_Init+0x50>)
 8000eac:	2202      	movs	r2, #2
 8000eae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_I2C1_Init+0x50>)
 8000eb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eb6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_I2C1_Init+0x50>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_I2C1_Init+0x50>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <MX_I2C1_Init+0x50>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_I2C1_Init+0x50>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_I2C1_Init+0x50>)
 8000ed2:	f001 faf7 	bl	80024c4 <HAL_I2C_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000edc:	f000 fa66 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200049d4 	.word	0x200049d4
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	000186a0 	.word	0x000186a0

08000ef0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <MX_USART2_UART_Init+0x50>)
 8000ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f28:	f002 fa62 	bl	80033f0 <HAL_UART_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f32:	f000 fa3b 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20004a80 	.word	0x20004a80
 8000f40:	40004400 	.word	0x40004400

08000f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b3f      	ldr	r3, [pc, #252]	; (800105c <MX_GPIO_Init+0x118>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a3e      	ldr	r2, [pc, #248]	; (800105c <MX_GPIO_Init+0x118>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b3c      	ldr	r3, [pc, #240]	; (800105c <MX_GPIO_Init+0x118>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b38      	ldr	r3, [pc, #224]	; (800105c <MX_GPIO_Init+0x118>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a37      	ldr	r2, [pc, #220]	; (800105c <MX_GPIO_Init+0x118>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b35      	ldr	r3, [pc, #212]	; (800105c <MX_GPIO_Init+0x118>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	4b31      	ldr	r3, [pc, #196]	; (800105c <MX_GPIO_Init+0x118>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a30      	ldr	r2, [pc, #192]	; (800105c <MX_GPIO_Init+0x118>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b2e      	ldr	r3, [pc, #184]	; (800105c <MX_GPIO_Init+0x118>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <MX_GPIO_Init+0x118>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a29      	ldr	r2, [pc, #164]	; (800105c <MX_GPIO_Init+0x118>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <MX_GPIO_Init+0x118>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Weight_SCK_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8000fd0:	4823      	ldr	r0, [pc, #140]	; (8001060 <MX_GPIO_Init+0x11c>)
 8000fd2:	f001 fa5d 	bl	8002490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fdc:	4821      	ldr	r0, [pc, #132]	; (8001064 <MX_GPIO_Init+0x120>)
 8000fde:	f001 fa57 	bl	8002490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481a      	ldr	r0, [pc, #104]	; (8001064 <MX_GPIO_Init+0x120>)
 8000ffa:	f001 f8ad 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Weight_SCK_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Weight_SCK_Pin;
 8000ffe:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4812      	ldr	r0, [pc, #72]	; (8001060 <MX_GPIO_Init+0x11c>)
 8001018:	f001 f89e 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800101c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <MX_GPIO_Init+0x120>)
 8001036:	f001 f88f 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pin : Weight_SDA_Pin */
  GPIO_InitStruct.Pin = Weight_SDA_Pin;
 800103a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Weight_SDA_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <MX_GPIO_Init+0x11c>)
 8001050:	f001 f882 	bl	8002158 <HAL_GPIO_Init>

}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000
 8001064:	40020800 	.word	0x40020800

08001068 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f002 fde3 	bl	8003c3c <osDelay>
 8001076:	e7fb      	b.n	8001070 <StartDefaultTask+0x8>

08001078 <StartWeightSense>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWeightSense */
void StartWeightSense(void *argument)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	; 0x38
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;) {
		/**
		 * Weight sensing part
		 */
		if(is_reset) {
 8001080:	4b60      	ldr	r3, [pc, #384]	; (8001204 <StartWeightSense+0x18c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <StartWeightSense+0x18>
			osDelay(20);
 8001088:	2014      	movs	r0, #20
 800108a:	f002 fdd7 	bl	8003c3c <osDelay>
			continue;
 800108e:	e0b7      	b.n	8001200 <StartWeightSense+0x188>
		}
		now_weight = read_weight_average();
 8001090:	f7ff fd48 	bl	8000b24 <read_weight_average>
 8001094:	4603      	mov	r3, r0
 8001096:	4a5c      	ldr	r2, [pc, #368]	; (8001208 <StartWeightSense+0x190>)
 8001098:	6013      	str	r3, [r2, #0]
		uint8_t is_transmit_data = 0, is_set_data = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (now_weight > captured_weight
 80010a6:	4b58      	ldr	r3, [pc, #352]	; (8001208 <StartWeightSense+0x190>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b58      	ldr	r3, [pc, #352]	; (800120c <StartWeightSense+0x194>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d924      	bls.n	80010fc <StartWeightSense+0x84>
				&& now_weight - captured_weight >= POSITIVE_THRESHOLD) {
 80010b2:	4b55      	ldr	r3, [pc, #340]	; (8001208 <StartWeightSense+0x190>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4b55      	ldr	r3, [pc, #340]	; (800120c <StartWeightSense+0x194>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2296      	movs	r2, #150	; 0x96
 80010be:	4293      	cmp	r3, r2
 80010c0:	d31c      	bcc.n	80010fc <StartWeightSense+0x84>
			osDelay(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f002 fdba 	bl	8003c3c <osDelay>
			now_weight = read_weight_average();
 80010c8:	f7ff fd2c 	bl	8000b24 <read_weight_average>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a4e      	ldr	r2, [pc, #312]	; (8001208 <StartWeightSense+0x190>)
 80010d0:	6013      	str	r3, [r2, #0]
			if (now_weight > captured_weight
 80010d2:	4b4d      	ldr	r3, [pc, #308]	; (8001208 <StartWeightSense+0x190>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4b4d      	ldr	r3, [pc, #308]	; (800120c <StartWeightSense+0x194>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d936      	bls.n	800114c <StartWeightSense+0xd4>
					&& now_weight - captured_weight >= POSITIVE_THRESHOLD) {
 80010de:	4b4a      	ldr	r3, [pc, #296]	; (8001208 <StartWeightSense+0x190>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b4a      	ldr	r3, [pc, #296]	; (800120c <StartWeightSense+0x194>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2296      	movs	r2, #150	; 0x96
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d32e      	bcc.n	800114c <StartWeightSense+0xd4>
				is_transmit_data = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				is_set_data = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			if (now_weight > captured_weight
 80010fa:	e027      	b.n	800114c <StartWeightSense+0xd4>
			}
		} else if (now_weight < captured_weight
 80010fc:	4b42      	ldr	r3, [pc, #264]	; (8001208 <StartWeightSense+0x190>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b42      	ldr	r3, [pc, #264]	; (800120c <StartWeightSense+0x194>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d222      	bcs.n	800114e <StartWeightSense+0xd6>
				&& captured_weight - now_weight >= NEGATIVE_THRESHOLD) {
 8001108:	4b40      	ldr	r3, [pc, #256]	; (800120c <StartWeightSense+0x194>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <StartWeightSense+0x190>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2296      	movs	r2, #150	; 0x96
 8001114:	4293      	cmp	r3, r2
 8001116:	d31a      	bcc.n	800114e <StartWeightSense+0xd6>
			// There may have some of measurement delay when place object
			osDelay(1);
 8001118:	2001      	movs	r0, #1
 800111a:	f002 fd8f 	bl	8003c3c <osDelay>
			now_weight = read_weight_average();
 800111e:	f7ff fd01 	bl	8000b24 <read_weight_average>
 8001122:	4603      	mov	r3, r0
 8001124:	4a38      	ldr	r2, [pc, #224]	; (8001208 <StartWeightSense+0x190>)
 8001126:	6013      	str	r3, [r2, #0]
			if (now_weight < captured_weight
 8001128:	4b37      	ldr	r3, [pc, #220]	; (8001208 <StartWeightSense+0x190>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b37      	ldr	r3, [pc, #220]	; (800120c <StartWeightSense+0x194>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d20c      	bcs.n	800114e <StartWeightSense+0xd6>
					&& captured_weight - now_weight >= NEGATIVE_THRESHOLD) {
 8001134:	4b35      	ldr	r3, [pc, #212]	; (800120c <StartWeightSense+0x194>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b33      	ldr	r3, [pc, #204]	; (8001208 <StartWeightSense+0x190>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2296      	movs	r2, #150	; 0x96
 8001140:	4293      	cmp	r3, r2
 8001142:	d304      	bcc.n	800114e <StartWeightSense+0xd6>
				is_set_data = 1;
 8001144:	2301      	movs	r3, #1
 8001146:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800114a:	e000      	b.n	800114e <StartWeightSense+0xd6>
			if (now_weight > captured_weight
 800114c:	bf00      	nop
		/**
		 * Transmit data to esp, the transfer data process has 2 steps
		 * 1) Send data length
		 * 2) Send data content
		 */
		if(is_set_data && !is_reset) {
 800114e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001152:	2b00      	cmp	r3, #0
 8001154:	d051      	beq.n	80011fa <StartWeightSense+0x182>
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <StartWeightSense+0x18c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d14d      	bne.n	80011fa <StartWeightSense+0x182>
			uint32_t tmp = captured_weight;
 800115e:	4b2b      	ldr	r3, [pc, #172]	; (800120c <StartWeightSense+0x194>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
			captured_weight = now_weight;
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <StartWeightSense+0x190>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a28      	ldr	r2, [pc, #160]	; (800120c <StartWeightSense+0x194>)
 800116a:	6013      	str	r3, [r2, #0]
			if (is_transmit_data) {
 800116c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001170:	2b00      	cmp	r3, #0
 8001172:	d042      	beq.n	80011fa <StartWeightSense+0x182>
				uint8_t ch[30] = "";
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]
 800118a:	831a      	strh	r2, [r3, #24]
				uint8_t szch[2] = "";
 800118c:	2300      	movs	r3, #0
 800118e:	813b      	strh	r3, [r7, #8]

				int sz = sprintf(ch, "%d", captured_weight - tmp);
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <StartWeightSense+0x194>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001196:	1ad2      	subs	r2, r2, r3
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	491c      	ldr	r1, [pc, #112]	; (8001210 <StartWeightSense+0x198>)
 800119e:	4618      	mov	r0, r3
 80011a0:	f005 fb0c 	bl	80067bc <siprintf>
 80011a4:	62f8      	str	r0, [r7, #44]	; 0x2c

				if (sz < 10) {
 80011a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a8:	2b09      	cmp	r3, #9
 80011aa:	dc07      	bgt.n	80011bc <StartWeightSense+0x144>
					sprintf(szch, "0%d", sz);
 80011ac:	f107 0308 	add.w	r3, r7, #8
 80011b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011b2:	4918      	ldr	r1, [pc, #96]	; (8001214 <StartWeightSense+0x19c>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	f005 fb01 	bl	80067bc <siprintf>
 80011ba:	e006      	b.n	80011ca <StartWeightSense+0x152>
				} else {
					sprintf(szch, "%d", sz);
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011c2:	4913      	ldr	r1, [pc, #76]	; (8001210 <StartWeightSense+0x198>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f005 faf9 	bl	80067bc <siprintf>
				}

				HAL_StatusTypeDef result_sz = HAL_I2C_Slave_Transmit(&hi2c1, szch,
 80011ca:	f107 0108 	add.w	r1, r7, #8
 80011ce:	f242 7310 	movw	r3, #10000	; 0x2710
 80011d2:	2202      	movs	r2, #2
 80011d4:	4810      	ldr	r0, [pc, #64]	; (8001218 <StartWeightSense+0x1a0>)
 80011d6:	f001 fab9 	bl	800274c <HAL_I2C_Slave_Transmit>
 80011da:	4603      	mov	r3, r0
 80011dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						2, 10000);
				if (result_sz == HAL_OK) {
 80011e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d108      	bne.n	80011fa <StartWeightSense+0x182>
					HAL_I2C_Slave_Transmit(&hi2c1, ch, sz, 10000);
 80011e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f107 010c 	add.w	r1, r7, #12
 80011f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80011f4:	4808      	ldr	r0, [pc, #32]	; (8001218 <StartWeightSense+0x1a0>)
 80011f6:	f001 faa9 	bl	800274c <HAL_I2C_Slave_Transmit>
				}
			}
		}
		osDelay(20);
 80011fa:	2014      	movs	r0, #20
 80011fc:	f002 fd1e 	bl	8003c3c <osDelay>
	for (;;) {
 8001200:	e73e      	b.n	8001080 <StartWeightSense+0x8>
 8001202:	bf00      	nop
 8001204:	200000a4 	.word	0x200000a4
 8001208:	200049c8 	.word	0x200049c8
 800120c:	200000a8 	.word	0x200000a8
 8001210:	08007084 	.word	0x08007084
 8001214:	08007088 	.word	0x08007088
 8001218:	200049d4 	.word	0x200049d4

0800121c <ResetWeightHandle>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ResetWeightHandle */
void ResetWeightHandle(void *argument)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	/**
	 * Reset button (on board)
	 */
	for (;;) {
		GPIO_PinState btn = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001224:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001228:	481c      	ldr	r0, [pc, #112]	; (800129c <ResetWeightHandle+0x80>)
 800122a:	f001 f919 	bl	8002460 <HAL_GPIO_ReadPin>
 800122e:	4603      	mov	r3, r0
 8001230:	72fb      	strb	r3, [r7, #11]
		if (btn == GPIO_PIN_RESET) {
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d12c      	bne.n	8001292 <ResetWeightHandle+0x76>
			is_reset = 1;
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <ResetWeightHandle+0x84>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2120      	movs	r1, #32
 8001242:	4818      	ldr	r0, [pc, #96]	; (80012a4 <ResetWeightHandle+0x88>)
 8001244:	f001 f924 	bl	8002490 <HAL_GPIO_WritePin>
			for (int i = 0; i < 10; ++i) {
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	e007      	b.n	800125e <ResetWeightHandle+0x42>
				set_zero_weight();
 800124e:	f7ff fc9f 	bl	8000b90 <set_zero_weight>
				osDelay(1);
 8001252:	2001      	movs	r0, #1
 8001254:	f002 fcf2 	bl	8003c3c <osDelay>
			for (int i = 0; i < 10; ++i) {
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3301      	adds	r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2b09      	cmp	r3, #9
 8001262:	ddf4      	ble.n	800124e <ResetWeightHandle+0x32>
			}
			captured_weight = 0;
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <ResetWeightHandle+0x8c>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
			while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 800126a:	e002      	b.n	8001272 <ResetWeightHandle+0x56>
				osDelay(50);
 800126c:	2032      	movs	r0, #50	; 0x32
 800126e:	f002 fce5 	bl	8003c3c <osDelay>
			while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8001272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001276:	4809      	ldr	r0, [pc, #36]	; (800129c <ResetWeightHandle+0x80>)
 8001278:	f001 f8f2 	bl	8002460 <HAL_GPIO_ReadPin>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f4      	beq.n	800126c <ResetWeightHandle+0x50>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001282:	2201      	movs	r2, #1
 8001284:	2120      	movs	r1, #32
 8001286:	4807      	ldr	r0, [pc, #28]	; (80012a4 <ResetWeightHandle+0x88>)
 8001288:	f001 f902 	bl	8002490 <HAL_GPIO_WritePin>
			is_reset = 0;
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <ResetWeightHandle+0x84>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
		}
		osDelay(10);
 8001292:	200a      	movs	r0, #10
 8001294:	f002 fcd2 	bl	8003c3c <osDelay>
	for (;;) {
 8001298:	e7c4      	b.n	8001224 <ResetWeightHandle+0x8>
 800129a:	bf00      	nop
 800129c:	40020800 	.word	0x40020800
 80012a0:	200000a4 	.word	0x200000a4
 80012a4:	40020000 	.word	0x40020000
 80012a8:	200000a8 	.word	0x200000a8
 80012ac:	00000000 	.word	0x00000000

080012b0 <StartWatchLDR>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWatchLDR */
void StartWatchLDR(void *argument)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	/**
	 * ADC Part (For turn on light at night)
	 */
	for (;;) {
		HAL_ADC_Start(&hadc1);
 80012b8:	4837      	ldr	r0, [pc, #220]	; (8001398 <StartWatchLDR+0xe8>)
 80012ba:	f000 faed 	bl	8001898 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1);
 80012be:	2101      	movs	r1, #1
 80012c0:	4835      	ldr	r0, [pc, #212]	; (8001398 <StartWatchLDR+0xe8>)
 80012c2:	f000 fb9d 	bl	8001a00 <HAL_ADC_PollForConversion>
		AD_RES = HAL_ADC_GetValue(&hadc1);
 80012c6:	4834      	ldr	r0, [pc, #208]	; (8001398 <StartWatchLDR+0xe8>)
 80012c8:	f000 fc25 	bl	8001b16 <HAL_ADC_GetValue>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a33      	ldr	r2, [pc, #204]	; (800139c <StartWatchLDR+0xec>)
 80012d0:	6013      	str	r3, [r2, #0]

		float tmp = AD_RES;
 80012d2:	4b32      	ldr	r3, [pc, #200]	; (800139c <StartWatchLDR+0xec>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012de:	edc7 7a03 	vstr	s15, [r7, #12]
		float calC = (1.0 - (LDR_MX - tmp) / (LDR_MX - LDR_MN));
 80012e2:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <StartWatchLDR+0xf0>)
 80012e4:	ed93 7a00 	vldr	s14, [r3]
 80012e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <StartWatchLDR+0xf0>)
 80012f2:	ed93 7a00 	vldr	s14, [r3]
 80012f6:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <StartWatchLDR+0xf4>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130c:	edc7 7a02 	vstr	s15, [r7, #8]

		LDR_MX = tmp > LDR_MX ? tmp : LDR_MX;
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <StartWatchLDR+0xf0>)
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	ed97 7a03 	vldr	s14, [r7, #12]
 800131a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001322:	dd01      	ble.n	8001328 <StartWatchLDR+0x78>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	e001      	b.n	800132c <StartWatchLDR+0x7c>
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <StartWatchLDR+0xf0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <StartWatchLDR+0xf0>)
 800132e:	6013      	str	r3, [r2, #0]
		LDR_MN = tmp < LDR_MN ? tmp : LDR_MN;
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <StartWatchLDR+0xf4>)
 8001332:	edd3 7a00 	vldr	s15, [r3]
 8001336:	ed97 7a03 	vldr	s14, [r7, #12]
 800133a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	d501      	bpl.n	8001348 <StartWatchLDR+0x98>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	e001      	b.n	800134c <StartWatchLDR+0x9c>
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <StartWatchLDR+0xf4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <StartWatchLDR+0xf4>)
 800134e:	6013      	str	r3, [r2, #0]

		if (calC < 0.35) {
 8001350:	68b8      	ldr	r0, [r7, #8]
 8001352:	f7ff f8f9 	bl	8000548 <__aeabi_f2d>
 8001356:	a30e      	add	r3, pc, #56	; (adr r3, 8001390 <StartWatchLDR+0xe0>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff f9ac 	bl	80006b8 <__aeabi_dcmplt>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <StartWatchLDR+0xc4>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136c:	480e      	ldr	r0, [pc, #56]	; (80013a8 <StartWatchLDR+0xf8>)
 800136e:	f001 f88f 	bl	8002490 <HAL_GPIO_WritePin>
 8001372:	e005      	b.n	8001380 <StartWatchLDR+0xd0>
		} else {
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137a:	480b      	ldr	r0, [pc, #44]	; (80013a8 <StartWatchLDR+0xf8>)
 800137c:	f001 f888 	bl	8002490 <HAL_GPIO_WritePin>
		}

		osDelay(3000);
 8001380:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001384:	f002 fc5a 	bl	8003c3c <osDelay>
	for (;;) {
 8001388:	e796      	b.n	80012b8 <StartWatchLDR+0x8>
 800138a:	bf00      	nop
 800138c:	f3af 8000 	nop.w
 8001390:	66666666 	.word	0x66666666
 8001394:	3fd66666 	.word	0x3fd66666
 8001398:	20004a30 	.word	0x20004a30
 800139c:	200049cc 	.word	0x200049cc
 80013a0:	20000008 	.word	0x20000008
 80013a4:	2000000c 	.word	0x2000000c
 80013a8:	40020800 	.word	0x40020800

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013b4:	e7fe      	b.n	80013b4 <Error_Handler+0x8>
	...

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_MspInit+0x54>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_MspInit+0x54>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_MspInit+0x54>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_MspInit+0x54>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_MspInit+0x54>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_MspInit+0x54>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	210f      	movs	r1, #15
 80013fa:	f06f 0001 	mvn.w	r0, #1
 80013fe:	f000 fe82 	bl	8002106 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a17      	ldr	r2, [pc, #92]	; (800148c <HAL_ADC_MspInit+0x7c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d127      	bne.n	8001482 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <HAL_ADC_MspInit+0x80>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a15      	ldr	r2, [pc, #84]	; (8001490 <HAL_ADC_MspInit+0x80>)
 800143c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <HAL_ADC_MspInit+0x80>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_ADC_MspInit+0x80>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_ADC_MspInit+0x80>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_ADC_MspInit+0x80>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800146a:	2310      	movs	r3, #16
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146e:	2303      	movs	r3, #3
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_ADC_MspInit+0x84>)
 800147e:	f000 fe6b 	bl	8002158 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40012000 	.word	0x40012000
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000

08001498 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a19      	ldr	r2, [pc, #100]	; (800151c <HAL_I2C_MspInit+0x84>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d12b      	bne.n	8001512 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a17      	ldr	r2, [pc, #92]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014d6:	23c0      	movs	r3, #192	; 0xc0
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014da:	2312      	movs	r3, #18
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e6:	2304      	movs	r3, #4
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <HAL_I2C_MspInit+0x8c>)
 80014f2:	f000 fe31 	bl	8002158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_I2C_MspInit+0x88>)
 8001500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_I2C_MspInit+0x88>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40005400 	.word	0x40005400
 8001520:	40023800 	.word	0x40023800
 8001524:	40020400 	.word	0x40020400

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a19      	ldr	r2, [pc, #100]	; (80015ac <HAL_UART_MspInit+0x84>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d12b      	bne.n	80015a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_UART_MspInit+0x88>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_UART_MspInit+0x88>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001582:	230c      	movs	r3, #12
 8001584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001592:	2307      	movs	r3, #7
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <HAL_UART_MspInit+0x8c>)
 800159e:	f000 fddb 	bl	8002158 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	; 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40004400 	.word	0x40004400
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020000 	.word	0x40020000

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e8:	f000 f8ce 	bl	8001788 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015ec:	f004 f840 	bl	8005670 <xTaskGetSchedulerState>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d001      	beq.n	80015fa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015f6:	f004 fe27 	bl	8006248 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <_sbrk+0x5c>)
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <_sbrk+0x60>)
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <_sbrk+0x64>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <_sbrk+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d207      	bcs.n	8001640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001630:	f005 f884 	bl	800673c <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e009      	b.n	8001654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20020000 	.word	0x20020000
 8001660:	00000400 	.word	0x00000400
 8001664:	200000ac 	.word	0x200000ac
 8001668:	20004b18 	.word	0x20004b18

0800166c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <SystemInit+0x20>)
 8001672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <SystemInit+0x20>)
 8001678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800167c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001696:	490e      	ldr	r1, [pc, #56]	; (80016d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016ac:	4c0b      	ldr	r4, [pc, #44]	; (80016dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ba:	f7ff ffd7 	bl	800166c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016be:	f005 f843 	bl	8006748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff fa95 	bl	8000bf0 <main>
  bx  lr    
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80016d4:	080071a0 	.word	0x080071a0
  ldr r2, =_sbss
 80016d8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80016dc:	20004b18 	.word	0x20004b18

080016e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <HAL_Init+0x40>)
 80016ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_Init+0x40>)
 80016fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_Init+0x40>)
 8001706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 fcef 	bl	80020f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001712:	200f      	movs	r0, #15
 8001714:	f000 f808 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001718:	f7ff fe4e 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023c00 	.word	0x40023c00

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x54>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fcf9 	bl	800213e <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 fccf 	bl	8002106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_InitTick+0x5c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000010 	.word	0x20000010
 8001780:	20000018 	.word	0x20000018
 8001784:	20000014 	.word	0x20000014

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000018 	.word	0x20000018
 80017ac:	20004ac4 	.word	0x20004ac4

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20004ac4 	.word	0x20004ac4

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_Delay+0x44>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000018 	.word	0x20000018

08001810 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e033      	b.n	800188e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fdee 	bl	8001410 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b00      	cmp	r3, #0
 800184c:	d118      	bne.n	8001880 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001856:	f023 0302 	bic.w	r3, r3, #2
 800185a:	f043 0202 	orr.w	r2, r3, #2
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fa96 	bl	8001d94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f023 0303 	bic.w	r3, r3, #3
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
 800187e:	e001      	b.n	8001884 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_Start+0x1a>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e097      	b.n	80019e2 <HAL_ADC_Start+0x14a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d018      	beq.n	80018fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018d8:	4b45      	ldr	r3, [pc, #276]	; (80019f0 <HAL_ADC_Start+0x158>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a45      	ldr	r2, [pc, #276]	; (80019f4 <HAL_ADC_Start+0x15c>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	0c9a      	lsrs	r2, r3, #18
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018ec:	e002      	b.n	80018f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f9      	bne.n	80018ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d15f      	bne.n	80019c8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001932:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001946:	d106      	bne.n	8001956 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	f023 0206 	bic.w	r2, r3, #6
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	645a      	str	r2, [r3, #68]	; 0x44
 8001954:	e002      	b.n	800195c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <HAL_ADC_Start+0x160>)
 8001966:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001970:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10f      	bne.n	800199e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d129      	bne.n	80019e0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	e020      	b.n	80019e0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a16      	ldr	r2, [pc, #88]	; (80019fc <HAL_ADC_Start+0x164>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d11b      	bne.n	80019e0 <HAL_ADC_Start+0x148>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d114      	bne.n	80019e0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	e00b      	b.n	80019e0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f043 0210 	orr.w	r2, r3, #16
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000010 	.word	0x20000010
 80019f4:	431bde83 	.word	0x431bde83
 80019f8:	40012300 	.word	0x40012300
 80019fc:	40012000 	.word	0x40012000

08001a00 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1c:	d113      	bne.n	8001a46 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a2c:	d10b      	bne.n	8001a46 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f043 0220 	orr.w	r2, r3, #32
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e063      	b.n	8001b0e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a46:	f7ff feb3 	bl	80017b0 <HAL_GetTick>
 8001a4a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a4c:	e021      	b.n	8001a92 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d01d      	beq.n	8001a92 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_ADC_PollForConversion+0x6c>
 8001a5c:	f7ff fea8 	bl	80017b0 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d212      	bcs.n	8001a92 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d00b      	beq.n	8001a92 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f043 0204 	orr.w	r2, r3, #4
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e03d      	b.n	8001b0e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d1d6      	bne.n	8001a4e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0212 	mvn.w	r2, #18
 8001aa8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d123      	bne.n	8001b0c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d11f      	bne.n	8001b0c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d111      	bne.n	8001b0c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x1c>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e113      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x244>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	d925      	bls.n	8001ba8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68d9      	ldr	r1, [r3, #12]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b1e      	subs	r3, #30
 8001b72:	2207      	movs	r2, #7
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	400a      	ands	r2, r1
 8001b80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68d9      	ldr	r1, [r3, #12]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	4603      	mov	r3, r0
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4403      	add	r3, r0
 8001b9a:	3b1e      	subs	r3, #30
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	e022      	b.n	8001bee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6919      	ldr	r1, [r3, #16]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	400a      	ands	r2, r1
 8001bca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6919      	ldr	r1, [r3, #16]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4403      	add	r3, r0
 8001be4:	409a      	lsls	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d824      	bhi.n	8001c40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	3b05      	subs	r3, #5
 8001c08:	221f      	movs	r2, #31
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	400a      	ands	r2, r1
 8001c16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	3b05      	subs	r3, #5
 8001c32:	fa00 f203 	lsl.w	r2, r0, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c3e:	e04c      	b.n	8001cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d824      	bhi.n	8001c92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	3b23      	subs	r3, #35	; 0x23
 8001c5a:	221f      	movs	r2, #31
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43da      	mvns	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	400a      	ands	r2, r1
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	3b23      	subs	r3, #35	; 0x23
 8001c84:	fa00 f203 	lsl.w	r2, r0, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c90:	e023      	b.n	8001cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b41      	subs	r3, #65	; 0x41
 8001ca4:	221f      	movs	r2, #31
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	3b41      	subs	r3, #65	; 0x41
 8001cce:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cda:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <HAL_ADC_ConfigChannel+0x250>)
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a28      	ldr	r2, [pc, #160]	; (8001d84 <HAL_ADC_ConfigChannel+0x254>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d10f      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x1d8>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b12      	cmp	r3, #18
 8001cee:	d10b      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1d      	ldr	r2, [pc, #116]	; (8001d84 <HAL_ADC_ConfigChannel+0x254>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d12b      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x23a>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_ADC_ConfigChannel+0x258>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d003      	beq.n	8001d24 <HAL_ADC_ConfigChannel+0x1f4>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b11      	cmp	r3, #17
 8001d22:	d122      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a11      	ldr	r2, [pc, #68]	; (8001d88 <HAL_ADC_ConfigChannel+0x258>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d111      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_ADC_ConfigChannel+0x25c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a11      	ldr	r2, [pc, #68]	; (8001d90 <HAL_ADC_ConfigChannel+0x260>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	0c9a      	lsrs	r2, r3, #18
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d5c:	e002      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f9      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40012300 	.word	0x40012300
 8001d84:	40012000 	.word	0x40012000
 8001d88:	10000012 	.word	0x10000012
 8001d8c:	20000010 	.word	0x20000010
 8001d90:	431bde83 	.word	0x431bde83

08001d94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d9c:	4b79      	ldr	r3, [pc, #484]	; (8001f84 <ADC_Init+0x1f0>)
 8001d9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	021a      	lsls	r2, r3, #8
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6899      	ldr	r1, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <ADC_Init+0x1f4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d022      	beq.n	8001e72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6899      	ldr	r1, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6899      	ldr	r1, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	e00f      	b.n	8001e92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0202 	bic.w	r2, r2, #2
 8001ea0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6899      	ldr	r1, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	7e1b      	ldrb	r3, [r3, #24]
 8001eac:	005a      	lsls	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01b      	beq.n	8001ef8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ece:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ede:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	3b01      	subs	r3, #1
 8001eec:	035a      	lsls	r2, r3, #13
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	e007      	b.n	8001f08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	051a      	lsls	r2, r3, #20
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6899      	ldr	r1, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f4a:	025a      	lsls	r2, r3, #9
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6899      	ldr	r1, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	029a      	lsls	r2, r3, #10
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	609a      	str	r2, [r3, #8]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40012300 	.word	0x40012300
 8001f88:	0f000001 	.word	0x0f000001

08001f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <__NVIC_GetPriorityGrouping+0x18>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0307 	and.w	r3, r3, #7
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db0a      	blt.n	800201a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	490c      	ldr	r1, [pc, #48]	; (800203c <__NVIC_SetPriority+0x4c>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	440b      	add	r3, r1
 8002014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002018:	e00a      	b.n	8002030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	; (8002040 <__NVIC_SetPriority+0x50>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	440b      	add	r3, r1
 800202e:	761a      	strb	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f1c3 0307 	rsb	r3, r3, #7
 800205e:	2b04      	cmp	r3, #4
 8002060:	bf28      	it	cs
 8002062:	2304      	movcs	r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3304      	adds	r3, #4
 800206a:	2b06      	cmp	r3, #6
 800206c:	d902      	bls.n	8002074 <NVIC_EncodePriority+0x30>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3b03      	subs	r3, #3
 8002072:	e000      	b.n	8002076 <NVIC_EncodePriority+0x32>
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	401a      	ands	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	; 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020bc:	d301      	bcc.n	80020c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020be:	2301      	movs	r3, #1
 80020c0:	e00f      	b.n	80020e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <SysTick_Config+0x40>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ca:	210f      	movs	r1, #15
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f7ff ff8e 	bl	8001ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <SysTick_Config+0x40>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020da:	4b04      	ldr	r3, [pc, #16]	; (80020ec <SysTick_Config+0x40>)
 80020dc:	2207      	movs	r2, #7
 80020de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	e000e010 	.word	0xe000e010

080020f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff47 	bl	8001f8c <__NVIC_SetPriorityGrouping>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002118:	f7ff ff5c 	bl	8001fd4 <__NVIC_GetPriorityGrouping>
 800211c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	6978      	ldr	r0, [r7, #20]
 8002124:	f7ff ff8e 	bl	8002044 <NVIC_EncodePriority>
 8002128:	4602      	mov	r2, r0
 800212a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff5d 	bl	8001ff0 <__NVIC_SetPriority>
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffb0 	bl	80020ac <SysTick_Config>
 800214c:	4603      	mov	r3, r0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	e159      	b.n	8002428 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002174:	2201      	movs	r2, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	429a      	cmp	r2, r3
 800218e:	f040 8148 	bne.w	8002422 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d005      	beq.n	80021aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d130      	bne.n	800220c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e0:	2201      	movs	r2, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 0201 	and.w	r2, r3, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b03      	cmp	r3, #3
 8002216:	d017      	beq.n	8002248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d123      	bne.n	800229c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	08da      	lsrs	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3208      	adds	r2, #8
 800225c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	08da      	lsrs	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3208      	adds	r2, #8
 8002296:	69b9      	ldr	r1, [r7, #24]
 8002298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0203 	and.w	r2, r3, #3
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80a2 	beq.w	8002422 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b57      	ldr	r3, [pc, #348]	; (8002440 <HAL_GPIO_Init+0x2e8>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a56      	ldr	r2, [pc, #344]	; (8002440 <HAL_GPIO_Init+0x2e8>)
 80022e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b54      	ldr	r3, [pc, #336]	; (8002440 <HAL_GPIO_Init+0x2e8>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fa:	4a52      	ldr	r2, [pc, #328]	; (8002444 <HAL_GPIO_Init+0x2ec>)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	3302      	adds	r3, #2
 8002302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a49      	ldr	r2, [pc, #292]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d019      	beq.n	800235a <HAL_GPIO_Init+0x202>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a48      	ldr	r2, [pc, #288]	; (800244c <HAL_GPIO_Init+0x2f4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <HAL_GPIO_Init+0x1fe>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a47      	ldr	r2, [pc, #284]	; (8002450 <HAL_GPIO_Init+0x2f8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00d      	beq.n	8002352 <HAL_GPIO_Init+0x1fa>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a46      	ldr	r2, [pc, #280]	; (8002454 <HAL_GPIO_Init+0x2fc>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d007      	beq.n	800234e <HAL_GPIO_Init+0x1f6>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a45      	ldr	r2, [pc, #276]	; (8002458 <HAL_GPIO_Init+0x300>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <HAL_GPIO_Init+0x1f2>
 8002346:	2304      	movs	r3, #4
 8002348:	e008      	b.n	800235c <HAL_GPIO_Init+0x204>
 800234a:	2307      	movs	r3, #7
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x204>
 800234e:	2303      	movs	r3, #3
 8002350:	e004      	b.n	800235c <HAL_GPIO_Init+0x204>
 8002352:	2302      	movs	r3, #2
 8002354:	e002      	b.n	800235c <HAL_GPIO_Init+0x204>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_GPIO_Init+0x204>
 800235a:	2300      	movs	r3, #0
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	f002 0203 	and.w	r2, r2, #3
 8002362:	0092      	lsls	r2, r2, #2
 8002364:	4093      	lsls	r3, r2
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800236c:	4935      	ldr	r1, [pc, #212]	; (8002444 <HAL_GPIO_Init+0x2ec>)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	3302      	adds	r3, #2
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800237a:	4b38      	ldr	r3, [pc, #224]	; (800245c <HAL_GPIO_Init+0x304>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800239e:	4a2f      	ldr	r2, [pc, #188]	; (800245c <HAL_GPIO_Init+0x304>)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023a4:	4b2d      	ldr	r3, [pc, #180]	; (800245c <HAL_GPIO_Init+0x304>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c8:	4a24      	ldr	r2, [pc, #144]	; (800245c <HAL_GPIO_Init+0x304>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <HAL_GPIO_Init+0x304>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023f2:	4a1a      	ldr	r2, [pc, #104]	; (800245c <HAL_GPIO_Init+0x304>)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f8:	4b18      	ldr	r3, [pc, #96]	; (800245c <HAL_GPIO_Init+0x304>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800241c:	4a0f      	ldr	r2, [pc, #60]	; (800245c <HAL_GPIO_Init+0x304>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3301      	adds	r3, #1
 8002426:	61fb      	str	r3, [r7, #28]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b0f      	cmp	r3, #15
 800242c:	f67f aea2 	bls.w	8002174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3724      	adds	r7, #36	; 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	40013800 	.word	0x40013800
 8002448:	40020000 	.word	0x40020000
 800244c:	40020400 	.word	0x40020400
 8002450:	40020800 	.word	0x40020800
 8002454:	40020c00 	.word	0x40020c00
 8002458:	40021000 	.word	0x40021000
 800245c:	40013c00 	.word	0x40013c00

08002460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e001      	b.n	8002482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002482:	7bfb      	ldrb	r3, [r7, #15]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]
 800249c:	4613      	mov	r3, r2
 800249e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a0:	787b      	ldrb	r3, [r7, #1]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024a6:	887a      	ldrh	r2, [r7, #2]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024ac:	e003      	b.n	80024b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ae:	887b      	ldrh	r3, [r7, #2]
 80024b0:	041a      	lsls	r2, r3, #16
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	619a      	str	r2, [r3, #24]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e12b      	b.n	800272e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe ffd4 	bl	8001498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2224      	movs	r2, #36	; 0x24
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002516:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002526:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002528:	f000 ff3a 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 800252c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4a81      	ldr	r2, [pc, #516]	; (8002738 <HAL_I2C_Init+0x274>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d807      	bhi.n	8002548 <HAL_I2C_Init+0x84>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4a80      	ldr	r2, [pc, #512]	; (800273c <HAL_I2C_Init+0x278>)
 800253c:	4293      	cmp	r3, r2
 800253e:	bf94      	ite	ls
 8002540:	2301      	movls	r3, #1
 8002542:	2300      	movhi	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	e006      	b.n	8002556 <HAL_I2C_Init+0x92>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4a7d      	ldr	r2, [pc, #500]	; (8002740 <HAL_I2C_Init+0x27c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	bf94      	ite	ls
 8002550:	2301      	movls	r3, #1
 8002552:	2300      	movhi	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0e7      	b.n	800272e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4a78      	ldr	r2, [pc, #480]	; (8002744 <HAL_I2C_Init+0x280>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0c9b      	lsrs	r3, r3, #18
 8002568:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a6a      	ldr	r2, [pc, #424]	; (8002738 <HAL_I2C_Init+0x274>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d802      	bhi.n	8002598 <HAL_I2C_Init+0xd4>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	3301      	adds	r3, #1
 8002596:	e009      	b.n	80025ac <HAL_I2C_Init+0xe8>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800259e:	fb02 f303 	mul.w	r3, r2, r3
 80025a2:	4a69      	ldr	r2, [pc, #420]	; (8002748 <HAL_I2C_Init+0x284>)
 80025a4:	fba2 2303 	umull	r2, r3, r2, r3
 80025a8:	099b      	lsrs	r3, r3, #6
 80025aa:	3301      	adds	r3, #1
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	495c      	ldr	r1, [pc, #368]	; (8002738 <HAL_I2C_Init+0x274>)
 80025c8:	428b      	cmp	r3, r1
 80025ca:	d819      	bhi.n	8002600 <HAL_I2C_Init+0x13c>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1e59      	subs	r1, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025da:	1c59      	adds	r1, r3, #1
 80025dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025e0:	400b      	ands	r3, r1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_I2C_Init+0x138>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1e59      	subs	r1, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fa:	e051      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 80025fc:	2304      	movs	r3, #4
 80025fe:	e04f      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d111      	bne.n	800262c <HAL_I2C_Init+0x168>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	440b      	add	r3, r1
 8002616:	fbb0 f3f3 	udiv	r3, r0, r3
 800261a:	3301      	adds	r3, #1
 800261c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	e012      	b.n	8002652 <HAL_I2C_Init+0x18e>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1e58      	subs	r0, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	0099      	lsls	r1, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002642:	3301      	adds	r3, #1
 8002644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_Init+0x196>
 8002656:	2301      	movs	r3, #1
 8002658:	e022      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10e      	bne.n	8002680 <HAL_I2C_Init+0x1bc>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1e58      	subs	r0, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	440b      	add	r3, r1
 8002670:	fbb0 f3f3 	udiv	r3, r0, r3
 8002674:	3301      	adds	r3, #1
 8002676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800267e:	e00f      	b.n	80026a0 <HAL_I2C_Init+0x1dc>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e58      	subs	r0, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	0099      	lsls	r1, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	fbb0 f3f3 	udiv	r3, r0, r3
 8002696:	3301      	adds	r3, #1
 8002698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	6809      	ldr	r1, [r1, #0]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6911      	ldr	r1, [r2, #16]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68d2      	ldr	r2, [r2, #12]
 80026da:	4311      	orrs	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	000186a0 	.word	0x000186a0
 800273c:	001e847f 	.word	0x001e847f
 8002740:	003d08ff 	.word	0x003d08ff
 8002744:	431bde83 	.word	0x431bde83
 8002748:	10624dd3 	.word	0x10624dd3

0800274c <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	4613      	mov	r3, r2
 800275a:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800275c:	f7ff f828 	bl	80017b0 <HAL_GetTick>
 8002760:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b20      	cmp	r3, #32
 800276c:	f040 80fb 	bne.w	8002966 <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_I2C_Slave_Transmit+0x30>
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0f3      	b.n	8002968 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_I2C_Slave_Transmit+0x42>
 800278a:	2302      	movs	r3, #2
 800278c:	e0ec      	b.n	8002968 <HAL_I2C_Slave_Transmit+0x21c>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d007      	beq.n	80027b4 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c2:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2221      	movs	r2, #33	; 0x21
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	88fa      	ldrh	r2, [r7, #6]
 80027e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4a5f      	ldr	r2, [pc, #380]	; (8002970 <HAL_I2C_Slave_Transmit+0x224>)
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002804:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2200      	movs	r2, #0
 800280e:	4959      	ldr	r1, [pc, #356]	; (8002974 <HAL_I2C_Slave_Transmit+0x228>)
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f8b1 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0a3      	b.n	8002968 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002820:	2300      	movs	r3, #0
 8002822:	61bb      	str	r3, [r7, #24]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800283e:	d165      	bne.n	800290c <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2200      	movs	r2, #0
 8002848:	494a      	ldr	r1, [pc, #296]	; (8002974 <HAL_I2C_Slave_Transmit+0x228>)
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f894 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e086      	b.n	8002968 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002870:	e04c      	b.n	800290c <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f8d5 	bl	8002a26 <I2C_WaitOnTXEFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002890:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e068      	b.n	8002968 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	781a      	ldrb	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d11b      	bne.n	800290c <HAL_I2C_Slave_Transmit+0x1c0>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d017      	beq.n	800290c <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1ae      	bne.n	8002872 <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2200      	movs	r2, #0
 800291c:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f829 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e01b      	b.n	8002968 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002938:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002948:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	e000      	b.n	8002968 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002966:	2302      	movs	r3, #2
  }
}
 8002968:	4618      	mov	r0, r3
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	ffff0000 	.word	0xffff0000
 8002974:	00010002 	.word	0x00010002

08002978 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	4613      	mov	r3, r2
 8002986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002988:	e025      	b.n	80029d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d021      	beq.n	80029d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002992:	f7fe ff0d 	bl	80017b0 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d302      	bcc.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d116      	bne.n	80029d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f043 0220 	orr.w	r2, r3, #32
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e023      	b.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d10d      	bne.n	80029fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	43da      	mvns	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4013      	ands	r3, r2
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf0c      	ite	eq
 80029f2:	2301      	moveq	r3, #1
 80029f4:	2300      	movne	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	e00c      	b.n	8002a16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	43da      	mvns	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4013      	ands	r3, r2
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d0b6      	beq.n	800298a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a32:	e02d      	b.n	8002a90 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f837 	bl	8002aa8 <I2C_IsAcknowledgeFailed>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e02d      	b.n	8002aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4a:	d021      	beq.n	8002a90 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4c:	f7fe feb0 	bl	80017b0 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d302      	bcc.n	8002a62 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d116      	bne.n	8002a90 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	f043 0220 	orr.w	r2, r3, #32
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e007      	b.n	8002aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9a:	2b80      	cmp	r3, #128	; 0x80
 8002a9c:	d1ca      	bne.n	8002a34 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002abe:	d11b      	bne.n	8002af8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ac8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f043 0204 	orr.w	r2, r3, #4
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e264      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d075      	beq.n	8002c12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b26:	4ba3      	ldr	r3, [pc, #652]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d00c      	beq.n	8002b4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b32:	4ba0      	ldr	r3, [pc, #640]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d112      	bne.n	8002b64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b3e:	4b9d      	ldr	r3, [pc, #628]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b4a:	d10b      	bne.n	8002b64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4c:	4b99      	ldr	r3, [pc, #612]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d05b      	beq.n	8002c10 <HAL_RCC_OscConfig+0x108>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d157      	bne.n	8002c10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e23f      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6c:	d106      	bne.n	8002b7c <HAL_RCC_OscConfig+0x74>
 8002b6e:	4b91      	ldr	r3, [pc, #580]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a90      	ldr	r2, [pc, #576]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e01d      	b.n	8002bb8 <HAL_RCC_OscConfig+0xb0>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x98>
 8002b86:	4b8b      	ldr	r3, [pc, #556]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a8a      	ldr	r2, [pc, #552]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	4b88      	ldr	r3, [pc, #544]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a87      	ldr	r2, [pc, #540]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	e00b      	b.n	8002bb8 <HAL_RCC_OscConfig+0xb0>
 8002ba0:	4b84      	ldr	r3, [pc, #528]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a83      	ldr	r2, [pc, #524]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a80      	ldr	r2, [pc, #512]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d013      	beq.n	8002be8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fdf6 	bl	80017b0 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7fe fdf2 	bl	80017b0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	; 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e204      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bda:	4b76      	ldr	r3, [pc, #472]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0xc0>
 8002be6:	e014      	b.n	8002c12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fe fde2 	bl	80017b0 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf0:	f7fe fdde 	bl	80017b0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	; 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e1f0      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c02:	4b6c      	ldr	r3, [pc, #432]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0xe8>
 8002c0e:	e000      	b.n	8002c12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d063      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c1e:	4b65      	ldr	r3, [pc, #404]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00b      	beq.n	8002c42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c2a:	4b62      	ldr	r3, [pc, #392]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d11c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c36:	4b5f      	ldr	r3, [pc, #380]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d116      	bne.n	8002c70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c42:	4b5c      	ldr	r3, [pc, #368]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_RCC_OscConfig+0x152>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d001      	beq.n	8002c5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e1c4      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5a:	4b56      	ldr	r3, [pc, #344]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4952      	ldr	r1, [pc, #328]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6e:	e03a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d020      	beq.n	8002cba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c78:	4b4f      	ldr	r3, [pc, #316]	; (8002db8 <HAL_RCC_OscConfig+0x2b0>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7e:	f7fe fd97 	bl	80017b0 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c86:	f7fe fd93 	bl	80017b0 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e1a5      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c98:	4b46      	ldr	r3, [pc, #280]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca4:	4b43      	ldr	r3, [pc, #268]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4940      	ldr	r1, [pc, #256]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	600b      	str	r3, [r1, #0]
 8002cb8:	e015      	b.n	8002ce6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cba:	4b3f      	ldr	r3, [pc, #252]	; (8002db8 <HAL_RCC_OscConfig+0x2b0>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fd76 	bl	80017b0 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc8:	f7fe fd72 	bl	80017b0 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e184      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cda:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d030      	beq.n	8002d54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d016      	beq.n	8002d28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfa:	4b30      	ldr	r3, [pc, #192]	; (8002dbc <HAL_RCC_OscConfig+0x2b4>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d00:	f7fe fd56 	bl	80017b0 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d08:	f7fe fd52 	bl	80017b0 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e164      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1a:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x200>
 8002d26:	e015      	b.n	8002d54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d28:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <HAL_RCC_OscConfig+0x2b4>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2e:	f7fe fd3f 	bl	80017b0 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d36:	f7fe fd3b 	bl	80017b0 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e14d      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d48:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80a0 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d66:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10f      	bne.n	8002d92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d80:	6413      	str	r3, [r2, #64]	; 0x40
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCC_OscConfig+0x2b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d121      	bne.n	8002de2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <HAL_RCC_OscConfig+0x2b8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <HAL_RCC_OscConfig+0x2b8>)
 8002da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002daa:	f7fe fd01 	bl	80017b0 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	e011      	b.n	8002dd6 <HAL_RCC_OscConfig+0x2ce>
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	42470000 	.word	0x42470000
 8002dbc:	42470e80 	.word	0x42470e80
 8002dc0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc4:	f7fe fcf4 	bl	80017b0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e106      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b85      	ldr	r3, [pc, #532]	; (8002fec <HAL_RCC_OscConfig+0x4e4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d106      	bne.n	8002df8 <HAL_RCC_OscConfig+0x2f0>
 8002dea:	4b81      	ldr	r3, [pc, #516]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	4a80      	ldr	r2, [pc, #512]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6713      	str	r3, [r2, #112]	; 0x70
 8002df6:	e01c      	b.n	8002e32 <HAL_RCC_OscConfig+0x32a>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b05      	cmp	r3, #5
 8002dfe:	d10c      	bne.n	8002e1a <HAL_RCC_OscConfig+0x312>
 8002e00:	4b7b      	ldr	r3, [pc, #492]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	4a7a      	ldr	r2, [pc, #488]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002e06:	f043 0304 	orr.w	r3, r3, #4
 8002e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0c:	4b78      	ldr	r3, [pc, #480]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	4a77      	ldr	r2, [pc, #476]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6713      	str	r3, [r2, #112]	; 0x70
 8002e18:	e00b      	b.n	8002e32 <HAL_RCC_OscConfig+0x32a>
 8002e1a:	4b75      	ldr	r3, [pc, #468]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	4a74      	ldr	r2, [pc, #464]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	6713      	str	r3, [r2, #112]	; 0x70
 8002e26:	4b72      	ldr	r3, [pc, #456]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	4a71      	ldr	r2, [pc, #452]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002e2c:	f023 0304 	bic.w	r3, r3, #4
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d015      	beq.n	8002e66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3a:	f7fe fcb9 	bl	80017b0 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	e00a      	b.n	8002e58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e42:	f7fe fcb5 	bl	80017b0 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e0c5      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e58:	4b65      	ldr	r3, [pc, #404]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ee      	beq.n	8002e42 <HAL_RCC_OscConfig+0x33a>
 8002e64:	e014      	b.n	8002e90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e66:	f7fe fca3 	bl	80017b0 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fe fc9f 	bl	80017b0 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e0af      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e84:	4b5a      	ldr	r3, [pc, #360]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1ee      	bne.n	8002e6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d105      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e96:	4b56      	ldr	r3, [pc, #344]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	4a55      	ldr	r2, [pc, #340]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 809b 	beq.w	8002fe2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eac:	4b50      	ldr	r3, [pc, #320]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d05c      	beq.n	8002f72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d141      	bne.n	8002f44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec0:	4b4c      	ldr	r3, [pc, #304]	; (8002ff4 <HAL_RCC_OscConfig+0x4ec>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec6:	f7fe fc73 	bl	80017b0 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ece:	f7fe fc6f 	bl	80017b0 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e081      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee0:	4b43      	ldr	r3, [pc, #268]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f0      	bne.n	8002ece <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	019b      	lsls	r3, r3, #6
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	3b01      	subs	r3, #1
 8002f06:	041b      	lsls	r3, r3, #16
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	061b      	lsls	r3, r3, #24
 8002f10:	4937      	ldr	r1, [pc, #220]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f16:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <HAL_RCC_OscConfig+0x4ec>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fc48 	bl	80017b0 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fe fc44 	bl	80017b0 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e056      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f36:	4b2e      	ldr	r3, [pc, #184]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x41c>
 8002f42:	e04e      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f44:	4b2b      	ldr	r3, [pc, #172]	; (8002ff4 <HAL_RCC_OscConfig+0x4ec>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7fe fc31 	bl	80017b0 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe fc2d 	bl	80017b0 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e03f      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f64:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f0      	bne.n	8002f52 <HAL_RCC_OscConfig+0x44a>
 8002f70:	e037      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e032      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ff0 <HAL_RCC_OscConfig+0x4e8>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d028      	beq.n	8002fde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d121      	bne.n	8002fde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d11a      	bne.n	8002fde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fae:	4013      	ands	r3, r2
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fb4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d111      	bne.n	8002fde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40007000 	.word	0x40007000
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	42470060 	.word	0x42470060

08002ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0cc      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800300c:	4b68      	ldr	r3, [pc, #416]	; (80031b0 <HAL_RCC_ClockConfig+0x1b8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d90c      	bls.n	8003034 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b65      	ldr	r3, [pc, #404]	; (80031b0 <HAL_RCC_ClockConfig+0x1b8>)
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003022:	4b63      	ldr	r3, [pc, #396]	; (80031b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d001      	beq.n	8003034 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0b8      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d020      	beq.n	8003082 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800304c:	4b59      	ldr	r3, [pc, #356]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	4a58      	ldr	r2, [pc, #352]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003056:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003064:	4b53      	ldr	r3, [pc, #332]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4a52      	ldr	r2, [pc, #328]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800306e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003070:	4b50      	ldr	r3, [pc, #320]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	494d      	ldr	r1, [pc, #308]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d044      	beq.n	8003118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d107      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003096:	4b47      	ldr	r3, [pc, #284]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d119      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e07f      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d003      	beq.n	80030b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b6:	4b3f      	ldr	r3, [pc, #252]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e06f      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c6:	4b3b      	ldr	r3, [pc, #236]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e067      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d6:	4b37      	ldr	r3, [pc, #220]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4934      	ldr	r1, [pc, #208]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030e8:	f7fe fb62 	bl	80017b0 <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f0:	f7fe fb5e 	bl	80017b0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e04f      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	4b2b      	ldr	r3, [pc, #172]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 020c 	and.w	r2, r3, #12
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	429a      	cmp	r2, r3
 8003116:	d1eb      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003118:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <HAL_RCC_ClockConfig+0x1b8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d20c      	bcs.n	8003140 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e032      	b.n	80031a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800314c:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4916      	ldr	r1, [pc, #88]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	490e      	ldr	r1, [pc, #56]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	4313      	orrs	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800317e:	f000 f821 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 8003182:	4602      	mov	r2, r0
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	490a      	ldr	r1, [pc, #40]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003190:	5ccb      	ldrb	r3, [r1, r3]
 8003192:	fa22 f303 	lsr.w	r3, r2, r3
 8003196:	4a09      	ldr	r2, [pc, #36]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe fac2 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40023c00 	.word	0x40023c00
 80031b4:	40023800 	.word	0x40023800
 80031b8:	08007144 	.word	0x08007144
 80031bc:	20000010 	.word	0x20000010
 80031c0:	20000014 	.word	0x20000014

080031c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	607b      	str	r3, [r7, #4]
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	2300      	movs	r3, #0
 80031d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031dc:	4b67      	ldr	r3, [pc, #412]	; (800337c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d00d      	beq.n	8003204 <HAL_RCC_GetSysClockFreq+0x40>
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	f200 80bd 	bhi.w	8003368 <HAL_RCC_GetSysClockFreq+0x1a4>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x34>
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d003      	beq.n	80031fe <HAL_RCC_GetSysClockFreq+0x3a>
 80031f6:	e0b7      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031f8:	4b61      	ldr	r3, [pc, #388]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031fa:	60bb      	str	r3, [r7, #8]
       break;
 80031fc:	e0b7      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031fe:	4b61      	ldr	r3, [pc, #388]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003200:	60bb      	str	r3, [r7, #8]
      break;
 8003202:	e0b4      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003204:	4b5d      	ldr	r3, [pc, #372]	; (800337c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800320c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800320e:	4b5b      	ldr	r3, [pc, #364]	; (800337c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d04d      	beq.n	80032b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321a:	4b58      	ldr	r3, [pc, #352]	; (800337c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	461a      	mov	r2, r3
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	f240 10ff 	movw	r0, #511	; 0x1ff
 800322a:	f04f 0100 	mov.w	r1, #0
 800322e:	ea02 0800 	and.w	r8, r2, r0
 8003232:	ea03 0901 	and.w	r9, r3, r1
 8003236:	4640      	mov	r0, r8
 8003238:	4649      	mov	r1, r9
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	014b      	lsls	r3, r1, #5
 8003244:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003248:	0142      	lsls	r2, r0, #5
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	ebb0 0008 	subs.w	r0, r0, r8
 8003252:	eb61 0109 	sbc.w	r1, r1, r9
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	018b      	lsls	r3, r1, #6
 8003260:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003264:	0182      	lsls	r2, r0, #6
 8003266:	1a12      	subs	r2, r2, r0
 8003268:	eb63 0301 	sbc.w	r3, r3, r1
 800326c:	f04f 0000 	mov.w	r0, #0
 8003270:	f04f 0100 	mov.w	r1, #0
 8003274:	00d9      	lsls	r1, r3, #3
 8003276:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800327a:	00d0      	lsls	r0, r2, #3
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	eb12 0208 	adds.w	r2, r2, r8
 8003284:	eb43 0309 	adc.w	r3, r3, r9
 8003288:	f04f 0000 	mov.w	r0, #0
 800328c:	f04f 0100 	mov.w	r1, #0
 8003290:	0259      	lsls	r1, r3, #9
 8003292:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003296:	0250      	lsls	r0, r2, #9
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	461a      	mov	r2, r3
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	f7fd fa2e 	bl	8000708 <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4613      	mov	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e04a      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b6:	4b31      	ldr	r3, [pc, #196]	; (800337c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	461a      	mov	r2, r3
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032c6:	f04f 0100 	mov.w	r1, #0
 80032ca:	ea02 0400 	and.w	r4, r2, r0
 80032ce:	ea03 0501 	and.w	r5, r3, r1
 80032d2:	4620      	mov	r0, r4
 80032d4:	4629      	mov	r1, r5
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	014b      	lsls	r3, r1, #5
 80032e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032e4:	0142      	lsls	r2, r0, #5
 80032e6:	4610      	mov	r0, r2
 80032e8:	4619      	mov	r1, r3
 80032ea:	1b00      	subs	r0, r0, r4
 80032ec:	eb61 0105 	sbc.w	r1, r1, r5
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	018b      	lsls	r3, r1, #6
 80032fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032fe:	0182      	lsls	r2, r0, #6
 8003300:	1a12      	subs	r2, r2, r0
 8003302:	eb63 0301 	sbc.w	r3, r3, r1
 8003306:	f04f 0000 	mov.w	r0, #0
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	00d9      	lsls	r1, r3, #3
 8003310:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003314:	00d0      	lsls	r0, r2, #3
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	1912      	adds	r2, r2, r4
 800331c:	eb45 0303 	adc.w	r3, r5, r3
 8003320:	f04f 0000 	mov.w	r0, #0
 8003324:	f04f 0100 	mov.w	r1, #0
 8003328:	0299      	lsls	r1, r3, #10
 800332a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800332e:	0290      	lsls	r0, r2, #10
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	461a      	mov	r2, r3
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	f7fd f9e2 	bl	8000708 <__aeabi_uldivmod>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4613      	mov	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	3301      	adds	r3, #1
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	60bb      	str	r3, [r7, #8]
      break;
 8003366:	e002      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800336a:	60bb      	str	r3, [r7, #8]
      break;
 800336c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800336e:	68bb      	ldr	r3, [r7, #8]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	00f42400 	.word	0x00f42400
 8003384:	007a1200 	.word	0x007a1200

08003388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <HAL_RCC_GetHCLKFreq+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000010 	.word	0x20000010

080033a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033a4:	f7ff fff0 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	0a9b      	lsrs	r3, r3, #10
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40023800 	.word	0x40023800
 80033c4:	08007154 	.word	0x08007154

080033c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033cc:	f7ff ffdc 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	0b5b      	lsrs	r3, r3, #13
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4903      	ldr	r1, [pc, #12]	; (80033ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40023800 	.word	0x40023800
 80033ec:	08007154 	.word	0x08007154

080033f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e03f      	b.n	8003482 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe f886 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2224      	movs	r2, #36	; 0x24
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f929 	bl	800368c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695a      	ldr	r2, [r3, #20]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b08a      	sub	sp, #40	; 0x28
 800348e:	af02      	add	r7, sp, #8
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d17c      	bne.n	80035a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_UART_Transmit+0x2c>
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e075      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Transmit+0x3e>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e06e      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2221      	movs	r2, #33	; 0x21
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034de:	f7fe f967 	bl	80017b0 <HAL_GetTick>
 80034e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	88fa      	ldrh	r2, [r7, #6]
 80034e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f8:	d108      	bne.n	800350c <HAL_UART_Transmit+0x82>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d104      	bne.n	800350c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	e003      	b.n	8003514 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800351c:	e02a      	b.n	8003574 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2200      	movs	r2, #0
 8003526:	2180      	movs	r1, #128	; 0x80
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f840 	bl	80035ae <UART_WaitOnFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e036      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800354c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	3302      	adds	r3, #2
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	e007      	b.n	8003566 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	3301      	adds	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1cf      	bne.n	800351e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2200      	movs	r2, #0
 8003586:	2140      	movs	r1, #64	; 0x40
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f810 	bl	80035ae <UART_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e006      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	e000      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
  }
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b090      	sub	sp, #64	; 0x40
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	4613      	mov	r3, r2
 80035bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035be:	e050      	b.n	8003662 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c6:	d04c      	beq.n	8003662 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d007      	beq.n	80035de <UART_WaitOnFlagUntilTimeout+0x30>
 80035ce:	f7fe f8ef 	bl	80017b0 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035da:	429a      	cmp	r2, r3
 80035dc:	d241      	bcs.n	8003662 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	330c      	adds	r3, #12
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035fe:	637a      	str	r2, [r7, #52]	; 0x34
 8003600:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e5      	bne.n	80035de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3314      	adds	r3, #20
 8003618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	613b      	str	r3, [r7, #16]
   return(result);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	63bb      	str	r3, [r7, #56]	; 0x38
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3314      	adds	r3, #20
 8003630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003632:	623a      	str	r2, [r7, #32]
 8003634:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	69f9      	ldr	r1, [r7, #28]
 8003638:	6a3a      	ldr	r2, [r7, #32]
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e5      	bne.n	8003612 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e00f      	b.n	8003682 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4013      	ands	r3, r2
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	bf0c      	ite	eq
 8003672:	2301      	moveq	r3, #1
 8003674:	2300      	movne	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	429a      	cmp	r2, r3
 800367e:	d09f      	beq.n	80035c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3740      	adds	r7, #64	; 0x40
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800368c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003690:	b09f      	sub	sp, #124	; 0x7c
 8003692:	af00      	add	r7, sp, #0
 8003694:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a2:	68d9      	ldr	r1, [r3, #12]
 80036a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	ea40 0301 	orr.w	r3, r0, r1
 80036ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	431a      	orrs	r2, r3
 80036be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80036c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036d0:	f021 010c 	bic.w	r1, r1, #12
 80036d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036da:	430b      	orrs	r3, r1
 80036dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ea:	6999      	ldr	r1, [r3, #24]
 80036ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	ea40 0301 	orr.w	r3, r0, r1
 80036f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4bc5      	ldr	r3, [pc, #788]	; (8003a10 <UART_SetConfig+0x384>)
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d004      	beq.n	800370a <UART_SetConfig+0x7e>
 8003700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4bc3      	ldr	r3, [pc, #780]	; (8003a14 <UART_SetConfig+0x388>)
 8003706:	429a      	cmp	r2, r3
 8003708:	d103      	bne.n	8003712 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800370a:	f7ff fe5d 	bl	80033c8 <HAL_RCC_GetPCLK2Freq>
 800370e:	6778      	str	r0, [r7, #116]	; 0x74
 8003710:	e002      	b.n	8003718 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003712:	f7ff fe45 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 8003716:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003720:	f040 80b6 	bne.w	8003890 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003726:	461c      	mov	r4, r3
 8003728:	f04f 0500 	mov.w	r5, #0
 800372c:	4622      	mov	r2, r4
 800372e:	462b      	mov	r3, r5
 8003730:	1891      	adds	r1, r2, r2
 8003732:	6439      	str	r1, [r7, #64]	; 0x40
 8003734:	415b      	adcs	r3, r3
 8003736:	647b      	str	r3, [r7, #68]	; 0x44
 8003738:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800373c:	1912      	adds	r2, r2, r4
 800373e:	eb45 0303 	adc.w	r3, r5, r3
 8003742:	f04f 0000 	mov.w	r0, #0
 8003746:	f04f 0100 	mov.w	r1, #0
 800374a:	00d9      	lsls	r1, r3, #3
 800374c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003750:	00d0      	lsls	r0, r2, #3
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	1911      	adds	r1, r2, r4
 8003758:	6639      	str	r1, [r7, #96]	; 0x60
 800375a:	416b      	adcs	r3, r5
 800375c:	667b      	str	r3, [r7, #100]	; 0x64
 800375e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	461a      	mov	r2, r3
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	1891      	adds	r1, r2, r2
 800376a:	63b9      	str	r1, [r7, #56]	; 0x38
 800376c:	415b      	adcs	r3, r3
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003770:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003774:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003778:	f7fc ffc6 	bl	8000708 <__aeabi_uldivmod>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4ba5      	ldr	r3, [pc, #660]	; (8003a18 <UART_SetConfig+0x38c>)
 8003782:	fba3 2302 	umull	r2, r3, r3, r2
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	011e      	lsls	r6, r3, #4
 800378a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800378c:	461c      	mov	r4, r3
 800378e:	f04f 0500 	mov.w	r5, #0
 8003792:	4622      	mov	r2, r4
 8003794:	462b      	mov	r3, r5
 8003796:	1891      	adds	r1, r2, r2
 8003798:	6339      	str	r1, [r7, #48]	; 0x30
 800379a:	415b      	adcs	r3, r3
 800379c:	637b      	str	r3, [r7, #52]	; 0x34
 800379e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80037a2:	1912      	adds	r2, r2, r4
 80037a4:	eb45 0303 	adc.w	r3, r5, r3
 80037a8:	f04f 0000 	mov.w	r0, #0
 80037ac:	f04f 0100 	mov.w	r1, #0
 80037b0:	00d9      	lsls	r1, r3, #3
 80037b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037b6:	00d0      	lsls	r0, r2, #3
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	1911      	adds	r1, r2, r4
 80037be:	65b9      	str	r1, [r7, #88]	; 0x58
 80037c0:	416b      	adcs	r3, r5
 80037c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	461a      	mov	r2, r3
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	1891      	adds	r1, r2, r2
 80037d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80037d2:	415b      	adcs	r3, r3
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80037de:	f7fc ff93 	bl	8000708 <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4b8c      	ldr	r3, [pc, #560]	; (8003a18 <UART_SetConfig+0x38c>)
 80037e8:	fba3 1302 	umull	r1, r3, r3, r2
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	2164      	movs	r1, #100	; 0x64
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	3332      	adds	r3, #50	; 0x32
 80037fa:	4a87      	ldr	r2, [pc, #540]	; (8003a18 <UART_SetConfig+0x38c>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003808:	441e      	add	r6, r3
 800380a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380c:	4618      	mov	r0, r3
 800380e:	f04f 0100 	mov.w	r1, #0
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	1894      	adds	r4, r2, r2
 8003818:	623c      	str	r4, [r7, #32]
 800381a:	415b      	adcs	r3, r3
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
 800381e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003822:	1812      	adds	r2, r2, r0
 8003824:	eb41 0303 	adc.w	r3, r1, r3
 8003828:	f04f 0400 	mov.w	r4, #0
 800382c:	f04f 0500 	mov.w	r5, #0
 8003830:	00dd      	lsls	r5, r3, #3
 8003832:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003836:	00d4      	lsls	r4, r2, #3
 8003838:	4622      	mov	r2, r4
 800383a:	462b      	mov	r3, r5
 800383c:	1814      	adds	r4, r2, r0
 800383e:	653c      	str	r4, [r7, #80]	; 0x50
 8003840:	414b      	adcs	r3, r1
 8003842:	657b      	str	r3, [r7, #84]	; 0x54
 8003844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	461a      	mov	r2, r3
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	1891      	adds	r1, r2, r2
 8003850:	61b9      	str	r1, [r7, #24]
 8003852:	415b      	adcs	r3, r3
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800385a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800385e:	f7fc ff53 	bl	8000708 <__aeabi_uldivmod>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4b6c      	ldr	r3, [pc, #432]	; (8003a18 <UART_SetConfig+0x38c>)
 8003868:	fba3 1302 	umull	r1, r3, r3, r2
 800386c:	095b      	lsrs	r3, r3, #5
 800386e:	2164      	movs	r1, #100	; 0x64
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	3332      	adds	r3, #50	; 0x32
 800387a:	4a67      	ldr	r2, [pc, #412]	; (8003a18 <UART_SetConfig+0x38c>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	f003 0207 	and.w	r2, r3, #7
 8003886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4432      	add	r2, r6
 800388c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800388e:	e0b9      	b.n	8003a04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003892:	461c      	mov	r4, r3
 8003894:	f04f 0500 	mov.w	r5, #0
 8003898:	4622      	mov	r2, r4
 800389a:	462b      	mov	r3, r5
 800389c:	1891      	adds	r1, r2, r2
 800389e:	6139      	str	r1, [r7, #16]
 80038a0:	415b      	adcs	r3, r3
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038a8:	1912      	adds	r2, r2, r4
 80038aa:	eb45 0303 	adc.w	r3, r5, r3
 80038ae:	f04f 0000 	mov.w	r0, #0
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	00d9      	lsls	r1, r3, #3
 80038b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038bc:	00d0      	lsls	r0, r2, #3
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	eb12 0804 	adds.w	r8, r2, r4
 80038c6:	eb43 0905 	adc.w	r9, r3, r5
 80038ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f04f 0100 	mov.w	r1, #0
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	008b      	lsls	r3, r1, #2
 80038de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038e2:	0082      	lsls	r2, r0, #2
 80038e4:	4640      	mov	r0, r8
 80038e6:	4649      	mov	r1, r9
 80038e8:	f7fc ff0e 	bl	8000708 <__aeabi_uldivmod>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4b49      	ldr	r3, [pc, #292]	; (8003a18 <UART_SetConfig+0x38c>)
 80038f2:	fba3 2302 	umull	r2, r3, r3, r2
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	011e      	lsls	r6, r3, #4
 80038fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038fc:	4618      	mov	r0, r3
 80038fe:	f04f 0100 	mov.w	r1, #0
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	1894      	adds	r4, r2, r2
 8003908:	60bc      	str	r4, [r7, #8]
 800390a:	415b      	adcs	r3, r3
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003912:	1812      	adds	r2, r2, r0
 8003914:	eb41 0303 	adc.w	r3, r1, r3
 8003918:	f04f 0400 	mov.w	r4, #0
 800391c:	f04f 0500 	mov.w	r5, #0
 8003920:	00dd      	lsls	r5, r3, #3
 8003922:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003926:	00d4      	lsls	r4, r2, #3
 8003928:	4622      	mov	r2, r4
 800392a:	462b      	mov	r3, r5
 800392c:	1814      	adds	r4, r2, r0
 800392e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003930:	414b      	adcs	r3, r1
 8003932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4618      	mov	r0, r3
 800393a:	f04f 0100 	mov.w	r1, #0
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	008b      	lsls	r3, r1, #2
 8003948:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800394c:	0082      	lsls	r2, r0, #2
 800394e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003952:	f7fc fed9 	bl	8000708 <__aeabi_uldivmod>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4b2f      	ldr	r3, [pc, #188]	; (8003a18 <UART_SetConfig+0x38c>)
 800395c:	fba3 1302 	umull	r1, r3, r3, r2
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	2164      	movs	r1, #100	; 0x64
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	3332      	adds	r3, #50	; 0x32
 800396e:	4a2a      	ldr	r2, [pc, #168]	; (8003a18 <UART_SetConfig+0x38c>)
 8003970:	fba2 2303 	umull	r2, r3, r2, r3
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800397a:	441e      	add	r6, r3
 800397c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800397e:	4618      	mov	r0, r3
 8003980:	f04f 0100 	mov.w	r1, #0
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	1894      	adds	r4, r2, r2
 800398a:	603c      	str	r4, [r7, #0]
 800398c:	415b      	adcs	r3, r3
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003994:	1812      	adds	r2, r2, r0
 8003996:	eb41 0303 	adc.w	r3, r1, r3
 800399a:	f04f 0400 	mov.w	r4, #0
 800399e:	f04f 0500 	mov.w	r5, #0
 80039a2:	00dd      	lsls	r5, r3, #3
 80039a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039a8:	00d4      	lsls	r4, r2, #3
 80039aa:	4622      	mov	r2, r4
 80039ac:	462b      	mov	r3, r5
 80039ae:	eb12 0a00 	adds.w	sl, r2, r0
 80039b2:	eb43 0b01 	adc.w	fp, r3, r1
 80039b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f04f 0100 	mov.w	r1, #0
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	008b      	lsls	r3, r1, #2
 80039ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039ce:	0082      	lsls	r2, r0, #2
 80039d0:	4650      	mov	r0, sl
 80039d2:	4659      	mov	r1, fp
 80039d4:	f7fc fe98 	bl	8000708 <__aeabi_uldivmod>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <UART_SetConfig+0x38c>)
 80039de:	fba3 1302 	umull	r1, r3, r3, r2
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	2164      	movs	r1, #100	; 0x64
 80039e6:	fb01 f303 	mul.w	r3, r1, r3
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	3332      	adds	r3, #50	; 0x32
 80039f0:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <UART_SetConfig+0x38c>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	f003 020f 	and.w	r2, r3, #15
 80039fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4432      	add	r2, r6
 8003a02:	609a      	str	r2, [r3, #8]
}
 8003a04:	bf00      	nop
 8003a06:	377c      	adds	r7, #124	; 0x7c
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a0e:	bf00      	nop
 8003a10:	40011000 	.word	0x40011000
 8003a14:	40011400 	.word	0x40011400
 8003a18:	51eb851f 	.word	0x51eb851f

08003a1c <__NVIC_SetPriority>:
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	6039      	str	r1, [r7, #0]
 8003a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	db0a      	blt.n	8003a46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	490c      	ldr	r1, [pc, #48]	; (8003a68 <__NVIC_SetPriority+0x4c>)
 8003a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3a:	0112      	lsls	r2, r2, #4
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	440b      	add	r3, r1
 8003a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a44:	e00a      	b.n	8003a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	4908      	ldr	r1, [pc, #32]	; (8003a6c <__NVIC_SetPriority+0x50>)
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	3b04      	subs	r3, #4
 8003a54:	0112      	lsls	r2, r2, #4
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	440b      	add	r3, r1
 8003a5a:	761a      	strb	r2, [r3, #24]
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	e000e100 	.word	0xe000e100
 8003a6c:	e000ed00 	.word	0xe000ed00

08003a70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a74:	2100      	movs	r1, #0
 8003a76:	f06f 0004 	mvn.w	r0, #4
 8003a7a:	f7ff ffcf 	bl	8003a1c <__NVIC_SetPriority>
#endif
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a8a:	f3ef 8305 	mrs	r3, IPSR
 8003a8e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a96:	f06f 0305 	mvn.w	r3, #5
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	e00c      	b.n	8003ab8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <osKernelInitialize+0x44>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d105      	bne.n	8003ab2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <osKernelInitialize+0x44>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	e002      	b.n	8003ab8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ab8:	687b      	ldr	r3, [r7, #4]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	200000b0 	.word	0x200000b0

08003acc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ad2:	f3ef 8305 	mrs	r3, IPSR
 8003ad6:	603b      	str	r3, [r7, #0]
  return(result);
 8003ad8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003ade:	f06f 0305 	mvn.w	r3, #5
 8003ae2:	607b      	str	r3, [r7, #4]
 8003ae4:	e010      	b.n	8003b08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <osKernelStart+0x48>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d109      	bne.n	8003b02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003aee:	f7ff ffbf 	bl	8003a70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003af2:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <osKernelStart+0x48>)
 8003af4:	2202      	movs	r2, #2
 8003af6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003af8:	f001 f972 	bl	8004de0 <vTaskStartScheduler>
      stat = osOK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	e002      	b.n	8003b08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003b02:	f04f 33ff 	mov.w	r3, #4294967295
 8003b06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b08:	687b      	ldr	r3, [r7, #4]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200000b0 	.word	0x200000b0

08003b18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08e      	sub	sp, #56	; 0x38
 8003b1c:	af04      	add	r7, sp, #16
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b28:	f3ef 8305 	mrs	r3, IPSR
 8003b2c:	617b      	str	r3, [r7, #20]
  return(result);
 8003b2e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d17e      	bne.n	8003c32 <osThreadNew+0x11a>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d07b      	beq.n	8003c32 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b3e:	2318      	movs	r3, #24
 8003b40:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003b46:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d045      	beq.n	8003bde <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <osThreadNew+0x48>
        name = attr->name;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <osThreadNew+0x6e>
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	2b38      	cmp	r3, #56	; 0x38
 8003b78:	d805      	bhi.n	8003b86 <osThreadNew+0x6e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <osThreadNew+0x72>
        return (NULL);
 8003b86:	2300      	movs	r3, #0
 8003b88:	e054      	b.n	8003c34 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	089b      	lsrs	r3, r3, #2
 8003b98:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00e      	beq.n	8003bc0 <osThreadNew+0xa8>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2b5b      	cmp	r3, #91	; 0x5b
 8003ba8:	d90a      	bls.n	8003bc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d006      	beq.n	8003bc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <osThreadNew+0xa8>
        mem = 1;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	e010      	b.n	8003be2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10c      	bne.n	8003be2 <osThreadNew+0xca>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d108      	bne.n	8003be2 <osThreadNew+0xca>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d104      	bne.n	8003be2 <osThreadNew+0xca>
          mem = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	e001      	b.n	8003be2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d110      	bne.n	8003c0a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bf0:	9202      	str	r2, [sp, #8]
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	6a3a      	ldr	r2, [r7, #32]
 8003bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 ff18 	bl	8004a34 <xTaskCreateStatic>
 8003c04:	4603      	mov	r3, r0
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	e013      	b.n	8003c32 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d110      	bne.n	8003c32 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	f107 0310 	add.w	r3, r7, #16
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 ff63 	bl	8004aee <xTaskCreate>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d001      	beq.n	8003c32 <osThreadNew+0x11a>
            hTask = NULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c32:	693b      	ldr	r3, [r7, #16]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3728      	adds	r7, #40	; 0x28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c44:	f3ef 8305 	mrs	r3, IPSR
 8003c48:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c4a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <osDelay+0x1c>
    stat = osErrorISR;
 8003c50:	f06f 0305 	mvn.w	r3, #5
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	e007      	b.n	8003c68 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f001 f888 	bl	8004d78 <vTaskDelay>
    }
  }

  return (stat);
 8003c68:	68fb      	ldr	r3, [r7, #12]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b088      	sub	sp, #32
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c7e:	f3ef 8305 	mrs	r3, IPSR
 8003c82:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c84:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d174      	bne.n	8003d74 <osMutexNew+0x102>
    if (attr != NULL) {
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	e001      	b.n	8003c9c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <osMutexNew+0x3a>
      rmtx = 1U;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	e001      	b.n	8003cb0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d15c      	bne.n	8003d74 <osMutexNew+0x102>
      mem = -1;
 8003cba:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbe:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d015      	beq.n	8003cf2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d006      	beq.n	8003cdc <osMutexNew+0x6a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2b4f      	cmp	r3, #79	; 0x4f
 8003cd4:	d902      	bls.n	8003cdc <osMutexNew+0x6a>
          mem = 1;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	e00c      	b.n	8003cf6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d108      	bne.n	8003cf6 <osMutexNew+0x84>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d104      	bne.n	8003cf6 <osMutexNew+0x84>
            mem = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	e001      	b.n	8003cf6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d112      	bne.n	8003d22 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	4619      	mov	r1, r3
 8003d08:	2004      	movs	r0, #4
 8003d0a:	f000 fa90 	bl	800422e <xQueueCreateMutexStatic>
 8003d0e:	61f8      	str	r0, [r7, #28]
 8003d10:	e016      	b.n	8003d40 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	4619      	mov	r1, r3
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f000 fa88 	bl	800422e <xQueueCreateMutexStatic>
 8003d1e:	61f8      	str	r0, [r7, #28]
 8003d20:	e00e      	b.n	8003d40 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10b      	bne.n	8003d40 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003d2e:	2004      	movs	r0, #4
 8003d30:	f000 fa65 	bl	80041fe <xQueueCreateMutex>
 8003d34:	61f8      	str	r0, [r7, #28]
 8003d36:	e003      	b.n	8003d40 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003d38:	2001      	movs	r0, #1
 8003d3a:	f000 fa60 	bl	80041fe <xQueueCreateMutex>
 8003d3e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00c      	beq.n	8003d60 <osMutexNew+0xee>
        if (attr != NULL) {
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <osMutexNew+0xe2>
          name = attr->name;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	e001      	b.n	8003d58 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003d58:	68f9      	ldr	r1, [r7, #12]
 8003d5a:	69f8      	ldr	r0, [r7, #28]
 8003d5c:	f000 fe0c 	bl	8004978 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d006      	beq.n	8003d74 <osMutexNew+0x102>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003d74:	69fb      	ldr	r3, [r7, #28]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a07      	ldr	r2, [pc, #28]	; (8003dac <vApplicationGetIdleTaskMemory+0x2c>)
 8003d90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4a06      	ldr	r2, [pc, #24]	; (8003db0 <vApplicationGetIdleTaskMemory+0x30>)
 8003d96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2280      	movs	r2, #128	; 0x80
 8003d9c:	601a      	str	r2, [r3, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	200000b4 	.word	0x200000b4
 8003db0:	20000110 	.word	0x20000110

08003db4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a07      	ldr	r2, [pc, #28]	; (8003de0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003dc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4a06      	ldr	r2, [pc, #24]	; (8003de4 <vApplicationGetTimerTaskMemory+0x30>)
 8003dca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dd2:	601a      	str	r2, [r3, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	20000310 	.word	0x20000310
 8003de4:	2000036c 	.word	0x2000036c

08003de8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f103 0208 	add.w	r2, r3, #8
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003e00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f103 0208 	add.w	r2, r3, #8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f103 0208 	add.w	r2, r3, #8
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	601a      	str	r2, [r3, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d103      	bne.n	8003eaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	e00c      	b.n	8003ec4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3308      	adds	r3, #8
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	e002      	b.n	8003eb8 <vListInsert+0x2e>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d2f6      	bcs.n	8003eb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	601a      	str	r2, [r3, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6892      	ldr	r2, [r2, #8]
 8003f12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6852      	ldr	r2, [r2, #4]
 8003f1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d103      	bne.n	8003f30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	1e5a      	subs	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f7a:	f002 f8d3 	bl	8006124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	68f9      	ldr	r1, [r7, #12]
 8003f88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f8a:	fb01 f303 	mul.w	r3, r1, r3
 8003f8e:	441a      	add	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	3b01      	subs	r3, #1
 8003fac:	68f9      	ldr	r1, [r7, #12]
 8003fae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	441a      	add	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	22ff      	movs	r2, #255	; 0xff
 8003fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	22ff      	movs	r2, #255	; 0xff
 8003fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d114      	bne.n	8003ffa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01a      	beq.n	800400e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3310      	adds	r3, #16
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f001 f989 	bl	80052f4 <xTaskRemoveFromEventList>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d012      	beq.n	800400e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <xQueueGenericReset+0xcc>)
 8003fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	e009      	b.n	800400e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3310      	adds	r3, #16
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff fef2 	bl	8003de8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3324      	adds	r3, #36	; 0x24
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff feed 	bl	8003de8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800400e:	f002 f8b9 	bl	8006184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004012:	2301      	movs	r3, #1
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	e000ed04 	.word	0xe000ed04

08004020 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08e      	sub	sp, #56	; 0x38
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004046:	bf00      	nop
 8004048:	e7fe      	b.n	8004048 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004062:	bf00      	nop
 8004064:	e7fe      	b.n	8004064 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <xQueueGenericCreateStatic+0x52>
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <xQueueGenericCreateStatic+0x56>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <xQueueGenericCreateStatic+0x58>
 8004076:	2300      	movs	r3, #0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10a      	bne.n	8004092 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	623b      	str	r3, [r7, #32]
}
 800408e:	bf00      	nop
 8004090:	e7fe      	b.n	8004090 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d102      	bne.n	800409e <xQueueGenericCreateStatic+0x7e>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <xQueueGenericCreateStatic+0x82>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <xQueueGenericCreateStatic+0x84>
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	61fb      	str	r3, [r7, #28]
}
 80040ba:	bf00      	nop
 80040bc:	e7fe      	b.n	80040bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040be:	2350      	movs	r3, #80	; 0x50
 80040c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b50      	cmp	r3, #80	; 0x50
 80040c6:	d00a      	beq.n	80040de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80040c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	61bb      	str	r3, [r7, #24]
}
 80040da:	bf00      	nop
 80040dc:	e7fe      	b.n	80040dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00d      	beq.n	8004106 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	4613      	mov	r3, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f83f 	bl	8004184 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004108:	4618      	mov	r0, r3
 800410a:	3730      	adds	r7, #48	; 0x30
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08a      	sub	sp, #40	; 0x28
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	613b      	str	r3, [r7, #16]
}
 8004136:	bf00      	nop
 8004138:	e7fe      	b.n	8004138 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	3350      	adds	r3, #80	; 0x50
 8004148:	4618      	mov	r0, r3
 800414a:	f002 f90d 	bl	8006368 <pvPortMalloc>
 800414e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d011      	beq.n	800417a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	3350      	adds	r3, #80	; 0x50
 800415e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004168:	79fa      	ldrb	r2, [r7, #7]
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	4613      	mov	r3, r2
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f805 	bl	8004184 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800417a:	69bb      	ldr	r3, [r7, #24]
	}
 800417c:	4618      	mov	r0, r3
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d103      	bne.n	80041a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	e002      	b.n	80041a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041b2:	2101      	movs	r1, #1
 80041b4:	69b8      	ldr	r0, [r7, #24]
 80041b6:	f7ff fecb 	bl	8003f50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	78fa      	ldrb	r2, [r7, #3]
 80041be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00e      	beq.n	80041f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80041ea:	2300      	movs	r3, #0
 80041ec:	2200      	movs	r2, #0
 80041ee:	2100      	movs	r1, #0
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f837 	bl	8004264 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	4603      	mov	r3, r0
 8004206:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004208:	2301      	movs	r3, #1
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	2300      	movs	r3, #0
 800420e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	461a      	mov	r2, r3
 8004214:	6939      	ldr	r1, [r7, #16]
 8004216:	6978      	ldr	r0, [r7, #20]
 8004218:	f7ff ff7a 	bl	8004110 <xQueueGenericCreate>
 800421c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff ffd3 	bl	80041ca <prvInitialiseMutex>

		return xNewQueue;
 8004224:	68fb      	ldr	r3, [r7, #12]
	}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800422e:	b580      	push	{r7, lr}
 8004230:	b088      	sub	sp, #32
 8004232:	af02      	add	r7, sp, #8
 8004234:	4603      	mov	r3, r0
 8004236:	6039      	str	r1, [r7, #0]
 8004238:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800423a:	2301      	movs	r3, #1
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	2300      	movs	r3, #0
 8004240:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2200      	movs	r2, #0
 800424a:	6939      	ldr	r1, [r7, #16]
 800424c:	6978      	ldr	r0, [r7, #20]
 800424e:	f7ff fee7 	bl	8004020 <xQueueGenericCreateStatic>
 8004252:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7ff ffb8 	bl	80041ca <prvInitialiseMutex>

		return xNewQueue;
 800425a:	68fb      	ldr	r3, [r7, #12]
	}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08e      	sub	sp, #56	; 0x38
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004272:	2300      	movs	r3, #0
 8004274:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10a      	bne.n	8004296 <xQueueGenericSend+0x32>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d103      	bne.n	80042a4 <xQueueGenericSend+0x40>
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <xQueueGenericSend+0x44>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <xQueueGenericSend+0x46>
 80042a8:	2300      	movs	r3, #0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10a      	bne.n	80042c4 <xQueueGenericSend+0x60>
	__asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042c0:	bf00      	nop
 80042c2:	e7fe      	b.n	80042c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d103      	bne.n	80042d2 <xQueueGenericSend+0x6e>
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <xQueueGenericSend+0x72>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <xQueueGenericSend+0x74>
 80042d6:	2300      	movs	r3, #0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	623b      	str	r3, [r7, #32]
}
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042f2:	f001 f9bd 	bl	8005670 <xTaskGetSchedulerState>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d102      	bne.n	8004302 <xQueueGenericSend+0x9e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <xQueueGenericSend+0xa2>
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <xQueueGenericSend+0xa4>
 8004306:	2300      	movs	r3, #0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <xQueueGenericSend+0xbe>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	61fb      	str	r3, [r7, #28]
}
 800431e:	bf00      	nop
 8004320:	e7fe      	b.n	8004320 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004322:	f001 feff 	bl	8006124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <xQueueGenericSend+0xd4>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d129      	bne.n	800438c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800433e:	f000 fa0b 	bl	8004758 <prvCopyDataToQueue>
 8004342:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	2b00      	cmp	r3, #0
 800434a:	d010      	beq.n	800436e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	3324      	adds	r3, #36	; 0x24
 8004350:	4618      	mov	r0, r3
 8004352:	f000 ffcf 	bl	80052f4 <xTaskRemoveFromEventList>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d013      	beq.n	8004384 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800435c:	4b3f      	ldr	r3, [pc, #252]	; (800445c <xQueueGenericSend+0x1f8>)
 800435e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	e00a      	b.n	8004384 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004370:	2b00      	cmp	r3, #0
 8004372:	d007      	beq.n	8004384 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004374:	4b39      	ldr	r3, [pc, #228]	; (800445c <xQueueGenericSend+0x1f8>)
 8004376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004384:	f001 fefe 	bl	8006184 <vPortExitCritical>
				return pdPASS;
 8004388:	2301      	movs	r3, #1
 800438a:	e063      	b.n	8004454 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d103      	bne.n	800439a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004392:	f001 fef7 	bl	8006184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004396:	2300      	movs	r3, #0
 8004398:	e05c      	b.n	8004454 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800439a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439c:	2b00      	cmp	r3, #0
 800439e:	d106      	bne.n	80043ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043a0:	f107 0314 	add.w	r3, r7, #20
 80043a4:	4618      	mov	r0, r3
 80043a6:	f001 f809 	bl	80053bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043aa:	2301      	movs	r3, #1
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043ae:	f001 fee9 	bl	8006184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043b2:	f000 fd7b 	bl	8004eac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043b6:	f001 feb5 	bl	8006124 <vPortEnterCritical>
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043c0:	b25b      	sxtb	r3, r3
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d103      	bne.n	80043d0 <xQueueGenericSend+0x16c>
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043d6:	b25b      	sxtb	r3, r3
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d103      	bne.n	80043e6 <xQueueGenericSend+0x182>
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043e6:	f001 fecd 	bl	8006184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043ea:	1d3a      	adds	r2, r7, #4
 80043ec:	f107 0314 	add.w	r3, r7, #20
 80043f0:	4611      	mov	r1, r2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fff8 	bl	80053e8 <xTaskCheckForTimeOut>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d124      	bne.n	8004448 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004400:	f000 faa2 	bl	8004948 <prvIsQueueFull>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d018      	beq.n	800443c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	3310      	adds	r3, #16
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4611      	mov	r1, r2
 8004412:	4618      	mov	r0, r3
 8004414:	f000 ff1e 	bl	8005254 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800441a:	f000 fa2d 	bl	8004878 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800441e:	f000 fd53 	bl	8004ec8 <xTaskResumeAll>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	f47f af7c 	bne.w	8004322 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800442a:	4b0c      	ldr	r3, [pc, #48]	; (800445c <xQueueGenericSend+0x1f8>)
 800442c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	e772      	b.n	8004322 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800443c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800443e:	f000 fa1b 	bl	8004878 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004442:	f000 fd41 	bl	8004ec8 <xTaskResumeAll>
 8004446:	e76c      	b.n	8004322 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800444a:	f000 fa15 	bl	8004878 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800444e:	f000 fd3b 	bl	8004ec8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004452:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004454:	4618      	mov	r0, r3
 8004456:	3738      	adds	r7, #56	; 0x38
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	e000ed04 	.word	0xe000ed04

08004460 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b090      	sub	sp, #64	; 0x40
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <xQueueGenericSendFromISR+0x3c>
 8004494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <xQueueGenericSendFromISR+0x40>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <xQueueGenericSendFromISR+0x42>
 80044a0:	2300      	movs	r3, #0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80044a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044b8:	bf00      	nop
 80044ba:	e7fe      	b.n	80044ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d103      	bne.n	80044ca <xQueueGenericSendFromISR+0x6a>
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <xQueueGenericSendFromISR+0x6e>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <xQueueGenericSendFromISR+0x70>
 80044ce:	2300      	movs	r3, #0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	623b      	str	r3, [r7, #32]
}
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044ea:	f001 fefd 	bl	80062e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044ee:	f3ef 8211 	mrs	r2, BASEPRI
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	61fa      	str	r2, [r7, #28]
 8004504:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004506:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004508:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800450e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004512:	429a      	cmp	r2, r3
 8004514:	d302      	bcc.n	800451c <xQueueGenericSendFromISR+0xbc>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b02      	cmp	r3, #2
 800451a:	d12f      	bne.n	800457c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004532:	f000 f911 	bl	8004758 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004536:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d112      	bne.n	8004566 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	2b00      	cmp	r3, #0
 8004546:	d016      	beq.n	8004576 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454a:	3324      	adds	r3, #36	; 0x24
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fed1 	bl	80052f4 <xTaskRemoveFromEventList>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00e      	beq.n	8004576 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	e007      	b.n	8004576 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004566:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800456a:	3301      	adds	r3, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	b25a      	sxtb	r2, r3
 8004570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004576:	2301      	movs	r3, #1
 8004578:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800457a:	e001      	b.n	8004580 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800457c:	2300      	movs	r3, #0
 800457e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004582:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800458a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800458c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800458e:	4618      	mov	r0, r3
 8004590:	3740      	adds	r7, #64	; 0x40
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08c      	sub	sp, #48	; 0x30
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80045a4:	2300      	movs	r3, #0
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10a      	bne.n	80045c8 <xQueueReceive+0x30>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	623b      	str	r3, [r7, #32]
}
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d103      	bne.n	80045d6 <xQueueReceive+0x3e>
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <xQueueReceive+0x42>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <xQueueReceive+0x44>
 80045da:	2300      	movs	r3, #0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10a      	bne.n	80045f6 <xQueueReceive+0x5e>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	61fb      	str	r3, [r7, #28]
}
 80045f2:	bf00      	nop
 80045f4:	e7fe      	b.n	80045f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045f6:	f001 f83b 	bl	8005670 <xTaskGetSchedulerState>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <xQueueReceive+0x6e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <xQueueReceive+0x72>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <xQueueReceive+0x74>
 800460a:	2300      	movs	r3, #0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10a      	bne.n	8004626 <xQueueReceive+0x8e>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	61bb      	str	r3, [r7, #24]
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004626:	f001 fd7d 	bl	8006124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01f      	beq.n	8004676 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800463a:	f000 f8f7 	bl	800482c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	1e5a      	subs	r2, r3, #1
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00f      	beq.n	800466e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	3310      	adds	r3, #16
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fe4e 	bl	80052f4 <xTaskRemoveFromEventList>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800465e:	4b3d      	ldr	r3, [pc, #244]	; (8004754 <xQueueReceive+0x1bc>)
 8004660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800466e:	f001 fd89 	bl	8006184 <vPortExitCritical>
				return pdPASS;
 8004672:	2301      	movs	r3, #1
 8004674:	e069      	b.n	800474a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d103      	bne.n	8004684 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800467c:	f001 fd82 	bl	8006184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004680:	2300      	movs	r3, #0
 8004682:	e062      	b.n	800474a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800468a:	f107 0310 	add.w	r3, r7, #16
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fe94 	bl	80053bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004694:	2301      	movs	r3, #1
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004698:	f001 fd74 	bl	8006184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800469c:	f000 fc06 	bl	8004eac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046a0:	f001 fd40 	bl	8006124 <vPortEnterCritical>
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046aa:	b25b      	sxtb	r3, r3
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d103      	bne.n	80046ba <xQueueReceive+0x122>
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046c0:	b25b      	sxtb	r3, r3
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d103      	bne.n	80046d0 <xQueueReceive+0x138>
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046d0:	f001 fd58 	bl	8006184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046d4:	1d3a      	adds	r2, r7, #4
 80046d6:	f107 0310 	add.w	r3, r7, #16
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fe83 	bl	80053e8 <xTaskCheckForTimeOut>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d123      	bne.n	8004730 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ea:	f000 f917 	bl	800491c <prvIsQueueEmpty>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d017      	beq.n	8004724 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	3324      	adds	r3, #36	; 0x24
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	4611      	mov	r1, r2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fda9 	bl	8005254 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004704:	f000 f8b8 	bl	8004878 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004708:	f000 fbde 	bl	8004ec8 <xTaskResumeAll>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d189      	bne.n	8004626 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004712:	4b10      	ldr	r3, [pc, #64]	; (8004754 <xQueueReceive+0x1bc>)
 8004714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	e780      	b.n	8004626 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004726:	f000 f8a7 	bl	8004878 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800472a:	f000 fbcd 	bl	8004ec8 <xTaskResumeAll>
 800472e:	e77a      	b.n	8004626 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004732:	f000 f8a1 	bl	8004878 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004736:	f000 fbc7 	bl	8004ec8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800473a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800473c:	f000 f8ee 	bl	800491c <prvIsQueueEmpty>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	f43f af6f 	beq.w	8004626 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004748:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800474a:	4618      	mov	r0, r3
 800474c:	3730      	adds	r7, #48	; 0x30
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	e000ed04 	.word	0xe000ed04

08004758 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004764:	2300      	movs	r3, #0
 8004766:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10d      	bne.n	8004792 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d14d      	bne.n	800481a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	4618      	mov	r0, r3
 8004784:	f000 ff92 	bl	80056ac <xTaskPriorityDisinherit>
 8004788:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	609a      	str	r2, [r3, #8]
 8004790:	e043      	b.n	800481a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d119      	bne.n	80047cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6858      	ldr	r0, [r3, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	461a      	mov	r2, r3
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	f001 fff4 	bl	8006790 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	441a      	add	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d32b      	bcc.n	800481a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	e026      	b.n	800481a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68d8      	ldr	r0, [r3, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	461a      	mov	r2, r3
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	f001 ffda 	bl	8006790 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	425b      	negs	r3, r3
 80047e6:	441a      	add	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d207      	bcs.n	8004808 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	425b      	negs	r3, r3
 8004802:	441a      	add	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d105      	bne.n	800481a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	3b01      	subs	r3, #1
 8004818:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004822:	697b      	ldr	r3, [r7, #20]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d018      	beq.n	8004870 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	441a      	add	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	429a      	cmp	r2, r3
 8004856:	d303      	bcc.n	8004860 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68d9      	ldr	r1, [r3, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	461a      	mov	r2, r3
 800486a:	6838      	ldr	r0, [r7, #0]
 800486c:	f001 ff90 	bl	8006790 <memcpy>
	}
}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004880:	f001 fc50 	bl	8006124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800488a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800488c:	e011      	b.n	80048b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	2b00      	cmp	r3, #0
 8004894:	d012      	beq.n	80048bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3324      	adds	r3, #36	; 0x24
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fd2a 	bl	80052f4 <xTaskRemoveFromEventList>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048a6:	f000 fe01 	bl	80054ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	dce9      	bgt.n	800488e <prvUnlockQueue+0x16>
 80048ba:	e000      	b.n	80048be <prvUnlockQueue+0x46>
					break;
 80048bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	22ff      	movs	r2, #255	; 0xff
 80048c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048c6:	f001 fc5d 	bl	8006184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048ca:	f001 fc2b 	bl	8006124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048d6:	e011      	b.n	80048fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d012      	beq.n	8004906 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3310      	adds	r3, #16
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fd05 	bl	80052f4 <xTaskRemoveFromEventList>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048f0:	f000 fddc 	bl	80054ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048f4:	7bbb      	ldrb	r3, [r7, #14]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004900:	2b00      	cmp	r3, #0
 8004902:	dce9      	bgt.n	80048d8 <prvUnlockQueue+0x60>
 8004904:	e000      	b.n	8004908 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004906:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	22ff      	movs	r2, #255	; 0xff
 800490c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004910:	f001 fc38 	bl	8006184 <vPortExitCritical>
}
 8004914:	bf00      	nop
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004924:	f001 fbfe 	bl	8006124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004930:	2301      	movs	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	e001      	b.n	800493a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800493a:	f001 fc23 	bl	8006184 <vPortExitCritical>

	return xReturn;
 800493e:	68fb      	ldr	r3, [r7, #12]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004950:	f001 fbe8 	bl	8006124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495c:	429a      	cmp	r2, r3
 800495e:	d102      	bne.n	8004966 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004960:	2301      	movs	r3, #1
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	e001      	b.n	800496a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800496a:	f001 fc0b 	bl	8006184 <vPortExitCritical>

	return xReturn;
 800496e:	68fb      	ldr	r3, [r7, #12]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	e014      	b.n	80049b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004988:	4a0f      	ldr	r2, [pc, #60]	; (80049c8 <vQueueAddToRegistry+0x50>)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004994:	490c      	ldr	r1, [pc, #48]	; (80049c8 <vQueueAddToRegistry+0x50>)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800499e:	4a0a      	ldr	r2, [pc, #40]	; (80049c8 <vQueueAddToRegistry+0x50>)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	4413      	add	r3, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049aa:	e006      	b.n	80049ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3301      	adds	r3, #1
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b07      	cmp	r3, #7
 80049b6:	d9e7      	bls.n	8004988 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20004ac8 	.word	0x20004ac8

080049cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049dc:	f001 fba2 	bl	8006124 <vPortEnterCritical>
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049e6:	b25b      	sxtb	r3, r3
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d103      	bne.n	80049f6 <vQueueWaitForMessageRestricted+0x2a>
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049fc:	b25b      	sxtb	r3, r3
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d103      	bne.n	8004a0c <vQueueWaitForMessageRestricted+0x40>
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a0c:	f001 fbba 	bl	8006184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	3324      	adds	r3, #36	; 0x24
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fc3b 	bl	800529c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a26:	6978      	ldr	r0, [r7, #20]
 8004a28:	f7ff ff26 	bl	8004878 <prvUnlockQueue>
	}
 8004a2c:	bf00      	nop
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08e      	sub	sp, #56	; 0x38
 8004a38:	af04      	add	r7, sp, #16
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10a      	bne.n	8004a5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	623b      	str	r3, [r7, #32]
}
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <xTaskCreateStatic+0x46>
	__asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	61fb      	str	r3, [r7, #28]
}
 8004a76:	bf00      	nop
 8004a78:	e7fe      	b.n	8004a78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a7a:	235c      	movs	r3, #92	; 0x5c
 8004a7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b5c      	cmp	r3, #92	; 0x5c
 8004a82:	d00a      	beq.n	8004a9a <xTaskCreateStatic+0x66>
	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	61bb      	str	r3, [r7, #24]
}
 8004a96:	bf00      	nop
 8004a98:	e7fe      	b.n	8004a98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d01e      	beq.n	8004ae0 <xTaskCreateStatic+0xac>
 8004aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01b      	beq.n	8004ae0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ab0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004aba:	2300      	movs	r3, #0
 8004abc:	9303      	str	r3, [sp, #12]
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	9302      	str	r3, [sp, #8]
 8004ac2:	f107 0314 	add.w	r3, r7, #20
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f850 	bl	8004b78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ad8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ada:	f000 f8dd 	bl	8004c98 <prvAddNewTaskToReadyList>
 8004ade:	e001      	b.n	8004ae4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ae4:	697b      	ldr	r3, [r7, #20]
	}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3728      	adds	r7, #40	; 0x28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b08c      	sub	sp, #48	; 0x30
 8004af2:	af04      	add	r7, sp, #16
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	603b      	str	r3, [r7, #0]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f001 fc30 	bl	8006368 <pvPortMalloc>
 8004b08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00e      	beq.n	8004b2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b10:	205c      	movs	r0, #92	; 0x5c
 8004b12:	f001 fc29 	bl	8006368 <pvPortMalloc>
 8004b16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
 8004b24:	e005      	b.n	8004b32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b26:	6978      	ldr	r0, [r7, #20]
 8004b28:	f001 fcea 	bl	8006500 <vPortFree>
 8004b2c:	e001      	b.n	8004b32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d017      	beq.n	8004b68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b40:	88fa      	ldrh	r2, [r7, #6]
 8004b42:	2300      	movs	r3, #0
 8004b44:	9303      	str	r3, [sp, #12]
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	9302      	str	r3, [sp, #8]
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f80e 	bl	8004b78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b5c:	69f8      	ldr	r0, [r7, #28]
 8004b5e:	f000 f89b 	bl	8004c98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b62:	2301      	movs	r3, #1
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	e002      	b.n	8004b6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b68:	f04f 33ff 	mov.w	r3, #4294967295
 8004b6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
	}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3720      	adds	r7, #32
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	461a      	mov	r2, r3
 8004b90:	21a5      	movs	r1, #165	; 0xa5
 8004b92:	f001 fe0b 	bl	80067ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f023 0307 	bic.w	r3, r3, #7
 8004bae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	617b      	str	r3, [r7, #20]
}
 8004bcc:	bf00      	nop
 8004bce:	e7fe      	b.n	8004bce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01f      	beq.n	8004c16 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	e012      	b.n	8004c02 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	7819      	ldrb	r1, [r3, #0]
 8004be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	4413      	add	r3, r2
 8004bea:	3334      	adds	r3, #52	; 0x34
 8004bec:	460a      	mov	r2, r1
 8004bee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d006      	beq.n	8004c0a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	2b0f      	cmp	r3, #15
 8004c06:	d9e9      	bls.n	8004bdc <prvInitialiseNewTask+0x64>
 8004c08:	e000      	b.n	8004c0c <prvInitialiseNewTask+0x94>
			{
				break;
 8004c0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c14:	e003      	b.n	8004c1e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	2b37      	cmp	r3, #55	; 0x37
 8004c22:	d901      	bls.n	8004c28 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c24:	2337      	movs	r3, #55	; 0x37
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	2200      	movs	r2, #0
 8004c38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff f8f2 	bl	8003e28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	3318      	adds	r3, #24
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff f8ed 	bl	8003e28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	2200      	movs	r2, #0
 8004c68:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	68f9      	ldr	r1, [r7, #12]
 8004c76:	69b8      	ldr	r0, [r7, #24]
 8004c78:	f001 f928 	bl	8005ecc <pxPortInitialiseStack>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c8e:	bf00      	nop
 8004c90:	3720      	adds	r7, #32
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ca0:	f001 fa40 	bl	8006124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ca4:	4b2d      	ldr	r3, [pc, #180]	; (8004d5c <prvAddNewTaskToReadyList+0xc4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	4a2c      	ldr	r2, [pc, #176]	; (8004d5c <prvAddNewTaskToReadyList+0xc4>)
 8004cac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cae:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <prvAddNewTaskToReadyList+0xc8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d109      	bne.n	8004cca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cb6:	4a2a      	ldr	r2, [pc, #168]	; (8004d60 <prvAddNewTaskToReadyList+0xc8>)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cbc:	4b27      	ldr	r3, [pc, #156]	; (8004d5c <prvAddNewTaskToReadyList+0xc4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d110      	bne.n	8004ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cc4:	f000 fc16 	bl	80054f4 <prvInitialiseTaskLists>
 8004cc8:	e00d      	b.n	8004ce6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cca:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <prvAddNewTaskToReadyList+0xcc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cd2:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <prvAddNewTaskToReadyList+0xc8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d802      	bhi.n	8004ce6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ce0:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <prvAddNewTaskToReadyList+0xc8>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ce6:	4b20      	ldr	r3, [pc, #128]	; (8004d68 <prvAddNewTaskToReadyList+0xd0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3301      	adds	r3, #1
 8004cec:	4a1e      	ldr	r2, [pc, #120]	; (8004d68 <prvAddNewTaskToReadyList+0xd0>)
 8004cee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cf0:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <prvAddNewTaskToReadyList+0xd0>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfc:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <prvAddNewTaskToReadyList+0xd4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d903      	bls.n	8004d0c <prvAddNewTaskToReadyList+0x74>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <prvAddNewTaskToReadyList+0xd4>)
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4a15      	ldr	r2, [pc, #84]	; (8004d70 <prvAddNewTaskToReadyList+0xd8>)
 8004d1a:	441a      	add	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4619      	mov	r1, r3
 8004d22:	4610      	mov	r0, r2
 8004d24:	f7ff f88d 	bl	8003e42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d28:	f001 fa2c 	bl	8006184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <prvAddNewTaskToReadyList+0xcc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d34:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <prvAddNewTaskToReadyList+0xc8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d207      	bcs.n	8004d52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d42:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <prvAddNewTaskToReadyList+0xdc>)
 8004d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000c40 	.word	0x20000c40
 8004d60:	2000076c 	.word	0x2000076c
 8004d64:	20000c4c 	.word	0x20000c4c
 8004d68:	20000c5c 	.word	0x20000c5c
 8004d6c:	20000c48 	.word	0x20000c48
 8004d70:	20000770 	.word	0x20000770
 8004d74:	e000ed04 	.word	0xe000ed04

08004d78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d80:	2300      	movs	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d017      	beq.n	8004dba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d8a:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <vTaskDelay+0x60>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <vTaskDelay+0x30>
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	60bb      	str	r3, [r7, #8]
}
 8004da4:	bf00      	nop
 8004da6:	e7fe      	b.n	8004da6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004da8:	f000 f880 	bl	8004eac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004dac:	2100      	movs	r1, #0
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fcea 	bl	8005788 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004db4:	f000 f888 	bl	8004ec8 <xTaskResumeAll>
 8004db8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d107      	bne.n	8004dd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <vTaskDelay+0x64>)
 8004dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20000c68 	.word	0x20000c68
 8004ddc:	e000ed04 	.word	0xe000ed04

08004de0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	; 0x28
 8004de4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dee:	463a      	mov	r2, r7
 8004df0:	1d39      	adds	r1, r7, #4
 8004df2:	f107 0308 	add.w	r3, r7, #8
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fe ffc2 	bl	8003d80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004dfc:	6839      	ldr	r1, [r7, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	9202      	str	r2, [sp, #8]
 8004e04:	9301      	str	r3, [sp, #4]
 8004e06:	2300      	movs	r3, #0
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	460a      	mov	r2, r1
 8004e0e:	4921      	ldr	r1, [pc, #132]	; (8004e94 <vTaskStartScheduler+0xb4>)
 8004e10:	4821      	ldr	r0, [pc, #132]	; (8004e98 <vTaskStartScheduler+0xb8>)
 8004e12:	f7ff fe0f 	bl	8004a34 <xTaskCreateStatic>
 8004e16:	4603      	mov	r3, r0
 8004e18:	4a20      	ldr	r2, [pc, #128]	; (8004e9c <vTaskStartScheduler+0xbc>)
 8004e1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e1c:	4b1f      	ldr	r3, [pc, #124]	; (8004e9c <vTaskStartScheduler+0xbc>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e24:	2301      	movs	r3, #1
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	e001      	b.n	8004e2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d102      	bne.n	8004e3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e34:	f000 fcfc 	bl	8005830 <xTimerCreateTimerTask>
 8004e38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d116      	bne.n	8004e6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	613b      	str	r3, [r7, #16]
}
 8004e52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e54:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <vTaskStartScheduler+0xc0>)
 8004e56:	f04f 32ff 	mov.w	r2, #4294967295
 8004e5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e5c:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <vTaskStartScheduler+0xc4>)
 8004e5e:	2201      	movs	r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e62:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <vTaskStartScheduler+0xc8>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e68:	f001 f8ba 	bl	8005fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e6c:	e00e      	b.n	8004e8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e74:	d10a      	bne.n	8004e8c <vTaskStartScheduler+0xac>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	60fb      	str	r3, [r7, #12]
}
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <vTaskStartScheduler+0xaa>
}
 8004e8c:	bf00      	nop
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	0800708c 	.word	0x0800708c
 8004e98:	080054c5 	.word	0x080054c5
 8004e9c:	20000c64 	.word	0x20000c64
 8004ea0:	20000c60 	.word	0x20000c60
 8004ea4:	20000c4c 	.word	0x20000c4c
 8004ea8:	20000c44 	.word	0x20000c44

08004eac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004eb0:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <vTaskSuspendAll+0x18>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	4a03      	ldr	r2, [pc, #12]	; (8004ec4 <vTaskSuspendAll+0x18>)
 8004eb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004eba:	bf00      	nop
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	20000c68 	.word	0x20000c68

08004ec8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ed6:	4b42      	ldr	r3, [pc, #264]	; (8004fe0 <xTaskResumeAll+0x118>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	603b      	str	r3, [r7, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ef4:	f001 f916 	bl	8006124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ef8:	4b39      	ldr	r3, [pc, #228]	; (8004fe0 <xTaskResumeAll+0x118>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	4a38      	ldr	r2, [pc, #224]	; (8004fe0 <xTaskResumeAll+0x118>)
 8004f00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f02:	4b37      	ldr	r3, [pc, #220]	; (8004fe0 <xTaskResumeAll+0x118>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d162      	bne.n	8004fd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f0a:	4b36      	ldr	r3, [pc, #216]	; (8004fe4 <xTaskResumeAll+0x11c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d05e      	beq.n	8004fd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f12:	e02f      	b.n	8004f74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f14:	4b34      	ldr	r3, [pc, #208]	; (8004fe8 <xTaskResumeAll+0x120>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3318      	adds	r3, #24
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fe ffeb 	bl	8003efc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fe ffe6 	bl	8003efc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f34:	4b2d      	ldr	r3, [pc, #180]	; (8004fec <xTaskResumeAll+0x124>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d903      	bls.n	8004f44 <xTaskResumeAll+0x7c>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	4a2a      	ldr	r2, [pc, #168]	; (8004fec <xTaskResumeAll+0x124>)
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4a27      	ldr	r2, [pc, #156]	; (8004ff0 <xTaskResumeAll+0x128>)
 8004f52:	441a      	add	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f7fe ff71 	bl	8003e42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f64:	4b23      	ldr	r3, [pc, #140]	; (8004ff4 <xTaskResumeAll+0x12c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d302      	bcc.n	8004f74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f6e:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <xTaskResumeAll+0x130>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f74:	4b1c      	ldr	r3, [pc, #112]	; (8004fe8 <xTaskResumeAll+0x120>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1cb      	bne.n	8004f14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f82:	f000 fb55 	bl	8005630 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f86:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <xTaskResumeAll+0x134>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d010      	beq.n	8004fb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f92:	f000 f847 	bl	8005024 <xTaskIncrementTick>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f9c:	4b16      	ldr	r3, [pc, #88]	; (8004ff8 <xTaskResumeAll+0x130>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f1      	bne.n	8004f92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004fae:	4b13      	ldr	r3, [pc, #76]	; (8004ffc <xTaskResumeAll+0x134>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004fb4:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <xTaskResumeAll+0x130>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <xTaskResumeAll+0x138>)
 8004fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fd0:	f001 f8d8 	bl	8006184 <vPortExitCritical>

	return xAlreadyYielded;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000c68 	.word	0x20000c68
 8004fe4:	20000c40 	.word	0x20000c40
 8004fe8:	20000c00 	.word	0x20000c00
 8004fec:	20000c48 	.word	0x20000c48
 8004ff0:	20000770 	.word	0x20000770
 8004ff4:	2000076c 	.word	0x2000076c
 8004ff8:	20000c54 	.word	0x20000c54
 8004ffc:	20000c50 	.word	0x20000c50
 8005000:	e000ed04 	.word	0xe000ed04

08005004 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <xTaskGetTickCount+0x1c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005010:	687b      	ldr	r3, [r7, #4]
}
 8005012:	4618      	mov	r0, r3
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	20000c44 	.word	0x20000c44

08005024 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800502e:	4b4f      	ldr	r3, [pc, #316]	; (800516c <xTaskIncrementTick+0x148>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f040 808f 	bne.w	8005156 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005038:	4b4d      	ldr	r3, [pc, #308]	; (8005170 <xTaskIncrementTick+0x14c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3301      	adds	r3, #1
 800503e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005040:	4a4b      	ldr	r2, [pc, #300]	; (8005170 <xTaskIncrementTick+0x14c>)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d120      	bne.n	800508e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800504c:	4b49      	ldr	r3, [pc, #292]	; (8005174 <xTaskIncrementTick+0x150>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <xTaskIncrementTick+0x48>
	__asm volatile
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	603b      	str	r3, [r7, #0]
}
 8005068:	bf00      	nop
 800506a:	e7fe      	b.n	800506a <xTaskIncrementTick+0x46>
 800506c:	4b41      	ldr	r3, [pc, #260]	; (8005174 <xTaskIncrementTick+0x150>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	4b41      	ldr	r3, [pc, #260]	; (8005178 <xTaskIncrementTick+0x154>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a3f      	ldr	r2, [pc, #252]	; (8005174 <xTaskIncrementTick+0x150>)
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	4a3f      	ldr	r2, [pc, #252]	; (8005178 <xTaskIncrementTick+0x154>)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	4b3e      	ldr	r3, [pc, #248]	; (800517c <xTaskIncrementTick+0x158>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3301      	adds	r3, #1
 8005086:	4a3d      	ldr	r2, [pc, #244]	; (800517c <xTaskIncrementTick+0x158>)
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	f000 fad1 	bl	8005630 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800508e:	4b3c      	ldr	r3, [pc, #240]	; (8005180 <xTaskIncrementTick+0x15c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	429a      	cmp	r2, r3
 8005096:	d349      	bcc.n	800512c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005098:	4b36      	ldr	r3, [pc, #216]	; (8005174 <xTaskIncrementTick+0x150>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d104      	bne.n	80050ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050a2:	4b37      	ldr	r3, [pc, #220]	; (8005180 <xTaskIncrementTick+0x15c>)
 80050a4:	f04f 32ff 	mov.w	r2, #4294967295
 80050a8:	601a      	str	r2, [r3, #0]
					break;
 80050aa:	e03f      	b.n	800512c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ac:	4b31      	ldr	r3, [pc, #196]	; (8005174 <xTaskIncrementTick+0x150>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d203      	bcs.n	80050cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050c4:	4a2e      	ldr	r2, [pc, #184]	; (8005180 <xTaskIncrementTick+0x15c>)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80050ca:	e02f      	b.n	800512c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	3304      	adds	r3, #4
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fe ff13 	bl	8003efc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d004      	beq.n	80050e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	3318      	adds	r3, #24
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe ff0a 	bl	8003efc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ec:	4b25      	ldr	r3, [pc, #148]	; (8005184 <xTaskIncrementTick+0x160>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d903      	bls.n	80050fc <xTaskIncrementTick+0xd8>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	4a22      	ldr	r2, [pc, #136]	; (8005184 <xTaskIncrementTick+0x160>)
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4a1f      	ldr	r2, [pc, #124]	; (8005188 <xTaskIncrementTick+0x164>)
 800510a:	441a      	add	r2, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	3304      	adds	r3, #4
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f7fe fe95 	bl	8003e42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511c:	4b1b      	ldr	r3, [pc, #108]	; (800518c <xTaskIncrementTick+0x168>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	429a      	cmp	r2, r3
 8005124:	d3b8      	bcc.n	8005098 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005126:	2301      	movs	r3, #1
 8005128:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800512a:	e7b5      	b.n	8005098 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800512c:	4b17      	ldr	r3, [pc, #92]	; (800518c <xTaskIncrementTick+0x168>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005132:	4915      	ldr	r1, [pc, #84]	; (8005188 <xTaskIncrementTick+0x164>)
 8005134:	4613      	mov	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d901      	bls.n	8005148 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005144:	2301      	movs	r3, #1
 8005146:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005148:	4b11      	ldr	r3, [pc, #68]	; (8005190 <xTaskIncrementTick+0x16c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005150:	2301      	movs	r3, #1
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	e004      	b.n	8005160 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005156:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <xTaskIncrementTick+0x170>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3301      	adds	r3, #1
 800515c:	4a0d      	ldr	r2, [pc, #52]	; (8005194 <xTaskIncrementTick+0x170>)
 800515e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005160:	697b      	ldr	r3, [r7, #20]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	20000c68 	.word	0x20000c68
 8005170:	20000c44 	.word	0x20000c44
 8005174:	20000bf8 	.word	0x20000bf8
 8005178:	20000bfc 	.word	0x20000bfc
 800517c:	20000c58 	.word	0x20000c58
 8005180:	20000c60 	.word	0x20000c60
 8005184:	20000c48 	.word	0x20000c48
 8005188:	20000770 	.word	0x20000770
 800518c:	2000076c 	.word	0x2000076c
 8005190:	20000c54 	.word	0x20000c54
 8005194:	20000c50 	.word	0x20000c50

08005198 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800519e:	4b28      	ldr	r3, [pc, #160]	; (8005240 <vTaskSwitchContext+0xa8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051a6:	4b27      	ldr	r3, [pc, #156]	; (8005244 <vTaskSwitchContext+0xac>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051ac:	e041      	b.n	8005232 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80051ae:	4b25      	ldr	r3, [pc, #148]	; (8005244 <vTaskSwitchContext+0xac>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b4:	4b24      	ldr	r3, [pc, #144]	; (8005248 <vTaskSwitchContext+0xb0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	e010      	b.n	80051de <vTaskSwitchContext+0x46>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10a      	bne.n	80051d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	607b      	str	r3, [r7, #4]
}
 80051d4:	bf00      	nop
 80051d6:	e7fe      	b.n	80051d6 <vTaskSwitchContext+0x3e>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3b01      	subs	r3, #1
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	491b      	ldr	r1, [pc, #108]	; (800524c <vTaskSwitchContext+0xb4>)
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	440b      	add	r3, r1
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0e4      	beq.n	80051bc <vTaskSwitchContext+0x24>
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4a13      	ldr	r2, [pc, #76]	; (800524c <vTaskSwitchContext+0xb4>)
 80051fe:	4413      	add	r3, r2
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	605a      	str	r2, [r3, #4]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	3308      	adds	r3, #8
 8005214:	429a      	cmp	r2, r3
 8005216:	d104      	bne.n	8005222 <vTaskSwitchContext+0x8a>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	605a      	str	r2, [r3, #4]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4a09      	ldr	r2, [pc, #36]	; (8005250 <vTaskSwitchContext+0xb8>)
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	4a06      	ldr	r2, [pc, #24]	; (8005248 <vTaskSwitchContext+0xb0>)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6013      	str	r3, [r2, #0]
}
 8005232:	bf00      	nop
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	20000c68 	.word	0x20000c68
 8005244:	20000c54 	.word	0x20000c54
 8005248:	20000c48 	.word	0x20000c48
 800524c:	20000770 	.word	0x20000770
 8005250:	2000076c 	.word	0x2000076c

08005254 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	60fb      	str	r3, [r7, #12]
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800527a:	4b07      	ldr	r3, [pc, #28]	; (8005298 <vTaskPlaceOnEventList+0x44>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3318      	adds	r3, #24
 8005280:	4619      	mov	r1, r3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fe fe01 	bl	8003e8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005288:	2101      	movs	r1, #1
 800528a:	6838      	ldr	r0, [r7, #0]
 800528c:	f000 fa7c 	bl	8005788 <prvAddCurrentTaskToDelayedList>
}
 8005290:	bf00      	nop
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	2000076c 	.word	0x2000076c

0800529c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10a      	bne.n	80052c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	617b      	str	r3, [r7, #20]
}
 80052c0:	bf00      	nop
 80052c2:	e7fe      	b.n	80052c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052c4:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3318      	adds	r3, #24
 80052ca:	4619      	mov	r1, r3
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7fe fdb8 	bl	8003e42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80052d8:	f04f 33ff 	mov.w	r3, #4294967295
 80052dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	68b8      	ldr	r0, [r7, #8]
 80052e2:	f000 fa51 	bl	8005788 <prvAddCurrentTaskToDelayedList>
	}
 80052e6:	bf00      	nop
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	2000076c 	.word	0x2000076c

080052f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	60fb      	str	r3, [r7, #12]
}
 800531c:	bf00      	nop
 800531e:	e7fe      	b.n	800531e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	3318      	adds	r3, #24
 8005324:	4618      	mov	r0, r3
 8005326:	f7fe fde9 	bl	8003efc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800532a:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <xTaskRemoveFromEventList+0xb0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d11d      	bne.n	800536e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	3304      	adds	r3, #4
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fde0 	bl	8003efc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005340:	4b19      	ldr	r3, [pc, #100]	; (80053a8 <xTaskRemoveFromEventList+0xb4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d903      	bls.n	8005350 <xTaskRemoveFromEventList+0x5c>
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	4a16      	ldr	r2, [pc, #88]	; (80053a8 <xTaskRemoveFromEventList+0xb4>)
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005354:	4613      	mov	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4a13      	ldr	r2, [pc, #76]	; (80053ac <xTaskRemoveFromEventList+0xb8>)
 800535e:	441a      	add	r2, r3
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	3304      	adds	r3, #4
 8005364:	4619      	mov	r1, r3
 8005366:	4610      	mov	r0, r2
 8005368:	f7fe fd6b 	bl	8003e42 <vListInsertEnd>
 800536c:	e005      	b.n	800537a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	3318      	adds	r3, #24
 8005372:	4619      	mov	r1, r3
 8005374:	480e      	ldr	r0, [pc, #56]	; (80053b0 <xTaskRemoveFromEventList+0xbc>)
 8005376:	f7fe fd64 	bl	8003e42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537e:	4b0d      	ldr	r3, [pc, #52]	; (80053b4 <xTaskRemoveFromEventList+0xc0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005384:	429a      	cmp	r2, r3
 8005386:	d905      	bls.n	8005394 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005388:	2301      	movs	r3, #1
 800538a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800538c:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <xTaskRemoveFromEventList+0xc4>)
 800538e:	2201      	movs	r2, #1
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e001      	b.n	8005398 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005398:	697b      	ldr	r3, [r7, #20]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000c68 	.word	0x20000c68
 80053a8:	20000c48 	.word	0x20000c48
 80053ac:	20000770 	.word	0x20000770
 80053b0:	20000c00 	.word	0x20000c00
 80053b4:	2000076c 	.word	0x2000076c
 80053b8:	20000c54 	.word	0x20000c54

080053bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <vTaskInternalSetTimeOutState+0x24>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <vTaskInternalSetTimeOutState+0x28>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	605a      	str	r2, [r3, #4]
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	20000c58 	.word	0x20000c58
 80053e4:	20000c44 	.word	0x20000c44

080053e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10a      	bne.n	800540e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	613b      	str	r3, [r7, #16]
}
 800540a:	bf00      	nop
 800540c:	e7fe      	b.n	800540c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	60fb      	str	r3, [r7, #12]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800542a:	f000 fe7b 	bl	8006124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800542e:	4b1d      	ldr	r3, [pc, #116]	; (80054a4 <xTaskCheckForTimeOut+0xbc>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	d102      	bne.n	800544e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	e023      	b.n	8005496 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4b15      	ldr	r3, [pc, #84]	; (80054a8 <xTaskCheckForTimeOut+0xc0>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d007      	beq.n	800546a <xTaskCheckForTimeOut+0x82>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	429a      	cmp	r2, r3
 8005462:	d302      	bcc.n	800546a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005464:	2301      	movs	r3, #1
 8005466:	61fb      	str	r3, [r7, #28]
 8005468:	e015      	b.n	8005496 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	429a      	cmp	r2, r3
 8005472:	d20b      	bcs.n	800548c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	1ad2      	subs	r2, r2, r3
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff ff9b 	bl	80053bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
 800548a:	e004      	b.n	8005496 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005492:	2301      	movs	r3, #1
 8005494:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005496:	f000 fe75 	bl	8006184 <vPortExitCritical>

	return xReturn;
 800549a:	69fb      	ldr	r3, [r7, #28]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	20000c44 	.word	0x20000c44
 80054a8:	20000c58 	.word	0x20000c58

080054ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054b0:	4b03      	ldr	r3, [pc, #12]	; (80054c0 <vTaskMissedYield+0x14>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
}
 80054b6:	bf00      	nop
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	20000c54 	.word	0x20000c54

080054c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054cc:	f000 f852 	bl	8005574 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054d0:	4b06      	ldr	r3, [pc, #24]	; (80054ec <prvIdleTask+0x28>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d9f9      	bls.n	80054cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80054d8:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <prvIdleTask+0x2c>)
 80054da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054e8:	e7f0      	b.n	80054cc <prvIdleTask+0x8>
 80054ea:	bf00      	nop
 80054ec:	20000770 	.word	0x20000770
 80054f0:	e000ed04 	.word	0xe000ed04

080054f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054fa:	2300      	movs	r3, #0
 80054fc:	607b      	str	r3, [r7, #4]
 80054fe:	e00c      	b.n	800551a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4a12      	ldr	r2, [pc, #72]	; (8005554 <prvInitialiseTaskLists+0x60>)
 800550c:	4413      	add	r3, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f7fe fc6a 	bl	8003de8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3301      	adds	r3, #1
 8005518:	607b      	str	r3, [r7, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b37      	cmp	r3, #55	; 0x37
 800551e:	d9ef      	bls.n	8005500 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005520:	480d      	ldr	r0, [pc, #52]	; (8005558 <prvInitialiseTaskLists+0x64>)
 8005522:	f7fe fc61 	bl	8003de8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005526:	480d      	ldr	r0, [pc, #52]	; (800555c <prvInitialiseTaskLists+0x68>)
 8005528:	f7fe fc5e 	bl	8003de8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800552c:	480c      	ldr	r0, [pc, #48]	; (8005560 <prvInitialiseTaskLists+0x6c>)
 800552e:	f7fe fc5b 	bl	8003de8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005532:	480c      	ldr	r0, [pc, #48]	; (8005564 <prvInitialiseTaskLists+0x70>)
 8005534:	f7fe fc58 	bl	8003de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005538:	480b      	ldr	r0, [pc, #44]	; (8005568 <prvInitialiseTaskLists+0x74>)
 800553a:	f7fe fc55 	bl	8003de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800553e:	4b0b      	ldr	r3, [pc, #44]	; (800556c <prvInitialiseTaskLists+0x78>)
 8005540:	4a05      	ldr	r2, [pc, #20]	; (8005558 <prvInitialiseTaskLists+0x64>)
 8005542:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005544:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <prvInitialiseTaskLists+0x7c>)
 8005546:	4a05      	ldr	r2, [pc, #20]	; (800555c <prvInitialiseTaskLists+0x68>)
 8005548:	601a      	str	r2, [r3, #0]
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20000770 	.word	0x20000770
 8005558:	20000bd0 	.word	0x20000bd0
 800555c:	20000be4 	.word	0x20000be4
 8005560:	20000c00 	.word	0x20000c00
 8005564:	20000c14 	.word	0x20000c14
 8005568:	20000c2c 	.word	0x20000c2c
 800556c:	20000bf8 	.word	0x20000bf8
 8005570:	20000bfc 	.word	0x20000bfc

08005574 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800557a:	e019      	b.n	80055b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800557c:	f000 fdd2 	bl	8006124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005580:	4b10      	ldr	r3, [pc, #64]	; (80055c4 <prvCheckTasksWaitingTermination+0x50>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3304      	adds	r3, #4
 800558c:	4618      	mov	r0, r3
 800558e:	f7fe fcb5 	bl	8003efc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005592:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <prvCheckTasksWaitingTermination+0x54>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3b01      	subs	r3, #1
 8005598:	4a0b      	ldr	r2, [pc, #44]	; (80055c8 <prvCheckTasksWaitingTermination+0x54>)
 800559a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <prvCheckTasksWaitingTermination+0x58>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <prvCheckTasksWaitingTermination+0x58>)
 80055a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055a6:	f000 fded 	bl	8006184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f810 	bl	80055d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055b0:	4b06      	ldr	r3, [pc, #24]	; (80055cc <prvCheckTasksWaitingTermination+0x58>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e1      	bne.n	800557c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20000c14 	.word	0x20000c14
 80055c8:	20000c40 	.word	0x20000c40
 80055cc:	20000c28 	.word	0x20000c28

080055d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d108      	bne.n	80055f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 ff8a 	bl	8006500 <vPortFree>
				vPortFree( pxTCB );
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 ff87 	bl	8006500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055f2:	e018      	b.n	8005626 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d103      	bne.n	8005606 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 ff7e 	bl	8006500 <vPortFree>
	}
 8005604:	e00f      	b.n	8005626 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800560c:	2b02      	cmp	r3, #2
 800560e:	d00a      	beq.n	8005626 <prvDeleteTCB+0x56>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	60fb      	str	r3, [r7, #12]
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <prvDeleteTCB+0x54>
	}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005636:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <prvResetNextTaskUnblockTime+0x38>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d104      	bne.n	800564a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005640:	4b0a      	ldr	r3, [pc, #40]	; (800566c <prvResetNextTaskUnblockTime+0x3c>)
 8005642:	f04f 32ff 	mov.w	r2, #4294967295
 8005646:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005648:	e008      	b.n	800565c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800564a:	4b07      	ldr	r3, [pc, #28]	; (8005668 <prvResetNextTaskUnblockTime+0x38>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4a04      	ldr	r2, [pc, #16]	; (800566c <prvResetNextTaskUnblockTime+0x3c>)
 800565a:	6013      	str	r3, [r2, #0]
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	20000bf8 	.word	0x20000bf8
 800566c:	20000c60 	.word	0x20000c60

08005670 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005676:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <xTaskGetSchedulerState+0x34>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d102      	bne.n	8005684 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800567e:	2301      	movs	r3, #1
 8005680:	607b      	str	r3, [r7, #4]
 8005682:	e008      	b.n	8005696 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005684:	4b08      	ldr	r3, [pc, #32]	; (80056a8 <xTaskGetSchedulerState+0x38>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800568c:	2302      	movs	r3, #2
 800568e:	607b      	str	r3, [r7, #4]
 8005690:	e001      	b.n	8005696 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005692:	2300      	movs	r3, #0
 8005694:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005696:	687b      	ldr	r3, [r7, #4]
	}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	20000c4c 	.word	0x20000c4c
 80056a8:	20000c68 	.word	0x20000c68

080056ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d056      	beq.n	8005770 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056c2:	4b2e      	ldr	r3, [pc, #184]	; (800577c <xTaskPriorityDisinherit+0xd0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d00a      	beq.n	80056e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	60fb      	str	r3, [r7, #12]
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	60bb      	str	r3, [r7, #8]
}
 80056fc:	bf00      	nop
 80056fe:	e7fe      	b.n	80056fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005704:	1e5a      	subs	r2, r3, #1
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005712:	429a      	cmp	r2, r3
 8005714:	d02c      	beq.n	8005770 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571a:	2b00      	cmp	r3, #0
 800571c:	d128      	bne.n	8005770 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	3304      	adds	r3, #4
 8005722:	4618      	mov	r0, r3
 8005724:	f7fe fbea 	bl	8003efc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005740:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <xTaskPriorityDisinherit+0xd4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d903      	bls.n	8005750 <xTaskPriorityDisinherit+0xa4>
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	4a0c      	ldr	r2, [pc, #48]	; (8005780 <xTaskPriorityDisinherit+0xd4>)
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4a09      	ldr	r2, [pc, #36]	; (8005784 <xTaskPriorityDisinherit+0xd8>)
 800575e:	441a      	add	r2, r3
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	3304      	adds	r3, #4
 8005764:	4619      	mov	r1, r3
 8005766:	4610      	mov	r0, r2
 8005768:	f7fe fb6b 	bl	8003e42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800576c:	2301      	movs	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005770:	697b      	ldr	r3, [r7, #20]
	}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	2000076c 	.word	0x2000076c
 8005780:	20000c48 	.word	0x20000c48
 8005784:	20000770 	.word	0x20000770

08005788 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005792:	4b21      	ldr	r3, [pc, #132]	; (8005818 <prvAddCurrentTaskToDelayedList+0x90>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005798:	4b20      	ldr	r3, [pc, #128]	; (800581c <prvAddCurrentTaskToDelayedList+0x94>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3304      	adds	r3, #4
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe fbac 	bl	8003efc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057aa:	d10a      	bne.n	80057c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057b2:	4b1a      	ldr	r3, [pc, #104]	; (800581c <prvAddCurrentTaskToDelayedList+0x94>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4819      	ldr	r0, [pc, #100]	; (8005820 <prvAddCurrentTaskToDelayedList+0x98>)
 80057bc:	f7fe fb41 	bl	8003e42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057c0:	e026      	b.n	8005810 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4413      	add	r3, r2
 80057c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057ca:	4b14      	ldr	r3, [pc, #80]	; (800581c <prvAddCurrentTaskToDelayedList+0x94>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d209      	bcs.n	80057ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057da:	4b12      	ldr	r3, [pc, #72]	; (8005824 <prvAddCurrentTaskToDelayedList+0x9c>)
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	4b0f      	ldr	r3, [pc, #60]	; (800581c <prvAddCurrentTaskToDelayedList+0x94>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4619      	mov	r1, r3
 80057e6:	4610      	mov	r0, r2
 80057e8:	f7fe fb4f 	bl	8003e8a <vListInsert>
}
 80057ec:	e010      	b.n	8005810 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ee:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <prvAddCurrentTaskToDelayedList+0xa0>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b0a      	ldr	r3, [pc, #40]	; (800581c <prvAddCurrentTaskToDelayedList+0x94>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3304      	adds	r3, #4
 80057f8:	4619      	mov	r1, r3
 80057fa:	4610      	mov	r0, r2
 80057fc:	f7fe fb45 	bl	8003e8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005800:	4b0a      	ldr	r3, [pc, #40]	; (800582c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	429a      	cmp	r2, r3
 8005808:	d202      	bcs.n	8005810 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800580a:	4a08      	ldr	r2, [pc, #32]	; (800582c <prvAddCurrentTaskToDelayedList+0xa4>)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	6013      	str	r3, [r2, #0]
}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	20000c44 	.word	0x20000c44
 800581c:	2000076c 	.word	0x2000076c
 8005820:	20000c2c 	.word	0x20000c2c
 8005824:	20000bfc 	.word	0x20000bfc
 8005828:	20000bf8 	.word	0x20000bf8
 800582c:	20000c60 	.word	0x20000c60

08005830 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08a      	sub	sp, #40	; 0x28
 8005834:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005836:	2300      	movs	r3, #0
 8005838:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800583a:	f000 fb07 	bl	8005e4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800583e:	4b1c      	ldr	r3, [pc, #112]	; (80058b0 <xTimerCreateTimerTask+0x80>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d021      	beq.n	800588a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800584a:	2300      	movs	r3, #0
 800584c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800584e:	1d3a      	adds	r2, r7, #4
 8005850:	f107 0108 	add.w	r1, r7, #8
 8005854:	f107 030c 	add.w	r3, r7, #12
 8005858:	4618      	mov	r0, r3
 800585a:	f7fe faab 	bl	8003db4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	9202      	str	r2, [sp, #8]
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	2302      	movs	r3, #2
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	2300      	movs	r3, #0
 800586e:	460a      	mov	r2, r1
 8005870:	4910      	ldr	r1, [pc, #64]	; (80058b4 <xTimerCreateTimerTask+0x84>)
 8005872:	4811      	ldr	r0, [pc, #68]	; (80058b8 <xTimerCreateTimerTask+0x88>)
 8005874:	f7ff f8de 	bl	8004a34 <xTaskCreateStatic>
 8005878:	4603      	mov	r3, r0
 800587a:	4a10      	ldr	r2, [pc, #64]	; (80058bc <xTimerCreateTimerTask+0x8c>)
 800587c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800587e:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <xTimerCreateTimerTask+0x8c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005886:	2301      	movs	r3, #1
 8005888:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	613b      	str	r3, [r7, #16]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80058a6:	697b      	ldr	r3, [r7, #20]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20000c9c 	.word	0x20000c9c
 80058b4:	08007094 	.word	0x08007094
 80058b8:	080059f5 	.word	0x080059f5
 80058bc:	20000ca0 	.word	0x20000ca0

080058c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08a      	sub	sp, #40	; 0x28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	623b      	str	r3, [r7, #32]
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058ee:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <xTimerGenericCommand+0x98>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d02a      	beq.n	800594c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b05      	cmp	r3, #5
 8005906:	dc18      	bgt.n	800593a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005908:	f7ff feb2 	bl	8005670 <xTaskGetSchedulerState>
 800590c:	4603      	mov	r3, r0
 800590e:	2b02      	cmp	r3, #2
 8005910:	d109      	bne.n	8005926 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005912:	4b11      	ldr	r3, [pc, #68]	; (8005958 <xTimerGenericCommand+0x98>)
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	f107 0110 	add.w	r1, r7, #16
 800591a:	2300      	movs	r3, #0
 800591c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800591e:	f7fe fca1 	bl	8004264 <xQueueGenericSend>
 8005922:	6278      	str	r0, [r7, #36]	; 0x24
 8005924:	e012      	b.n	800594c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005926:	4b0c      	ldr	r3, [pc, #48]	; (8005958 <xTimerGenericCommand+0x98>)
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	f107 0110 	add.w	r1, r7, #16
 800592e:	2300      	movs	r3, #0
 8005930:	2200      	movs	r2, #0
 8005932:	f7fe fc97 	bl	8004264 <xQueueGenericSend>
 8005936:	6278      	str	r0, [r7, #36]	; 0x24
 8005938:	e008      	b.n	800594c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800593a:	4b07      	ldr	r3, [pc, #28]	; (8005958 <xTimerGenericCommand+0x98>)
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	f107 0110 	add.w	r1, r7, #16
 8005942:	2300      	movs	r3, #0
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	f7fe fd8b 	bl	8004460 <xQueueGenericSendFromISR>
 800594a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800594e:	4618      	mov	r0, r3
 8005950:	3728      	adds	r7, #40	; 0x28
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20000c9c 	.word	0x20000c9c

0800595c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af02      	add	r7, sp, #8
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005966:	4b22      	ldr	r3, [pc, #136]	; (80059f0 <prvProcessExpiredTimer+0x94>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	3304      	adds	r3, #4
 8005974:	4618      	mov	r0, r3
 8005976:	f7fe fac1 	bl	8003efc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d022      	beq.n	80059ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	699a      	ldr	r2, [r3, #24]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	18d1      	adds	r1, r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	6978      	ldr	r0, [r7, #20]
 8005996:	f000 f8d1 	bl	8005b3c <prvInsertTimerInActiveList>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01f      	beq.n	80059e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059a0:	2300      	movs	r3, #0
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	2300      	movs	r3, #0
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	2100      	movs	r1, #0
 80059aa:	6978      	ldr	r0, [r7, #20]
 80059ac:	f7ff ff88 	bl	80058c0 <xTimerGenericCommand>
 80059b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d113      	bne.n	80059e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	60fb      	str	r3, [r7, #12]
}
 80059ca:	bf00      	nop
 80059cc:	e7fe      	b.n	80059cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059d4:	f023 0301 	bic.w	r3, r3, #1
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	6978      	ldr	r0, [r7, #20]
 80059e6:	4798      	blx	r3
}
 80059e8:	bf00      	nop
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20000c94 	.word	0x20000c94

080059f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059fc:	f107 0308 	add.w	r3, r7, #8
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 f857 	bl	8005ab4 <prvGetNextExpireTime>
 8005a06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 f803 	bl	8005a18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a12:	f000 f8d5 	bl	8005bc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a16:	e7f1      	b.n	80059fc <prvTimerTask+0x8>

08005a18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a22:	f7ff fa43 	bl	8004eac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a26:	f107 0308 	add.w	r3, r7, #8
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 f866 	bl	8005afc <prvSampleTimeNow>
 8005a30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d130      	bne.n	8005a9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <prvProcessTimerOrBlockTask+0x3c>
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d806      	bhi.n	8005a54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a46:	f7ff fa3f 	bl	8004ec8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a4a:	68f9      	ldr	r1, [r7, #12]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff ff85 	bl	800595c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a52:	e024      	b.n	8005a9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a5a:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <prvProcessTimerOrBlockTask+0x90>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <prvProcessTimerOrBlockTask+0x50>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <prvProcessTimerOrBlockTask+0x52>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a6c:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <prvProcessTimerOrBlockTask+0x94>)
 8005a6e:	6818      	ldr	r0, [r3, #0]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	f7fe ffa7 	bl	80049cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a7e:	f7ff fa23 	bl	8004ec8 <xTaskResumeAll>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10a      	bne.n	8005a9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a88:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <prvProcessTimerOrBlockTask+0x98>)
 8005a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	f3bf 8f6f 	isb	sy
}
 8005a98:	e001      	b.n	8005a9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a9a:	f7ff fa15 	bl	8004ec8 <xTaskResumeAll>
}
 8005a9e:	bf00      	nop
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000c98 	.word	0x20000c98
 8005aac:	20000c9c 	.word	0x20000c9c
 8005ab0:	e000ed04 	.word	0xe000ed04

08005ab4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005abc:	4b0e      	ldr	r3, [pc, #56]	; (8005af8 <prvGetNextExpireTime+0x44>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <prvGetNextExpireTime+0x16>
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	e000      	b.n	8005acc <prvGetNextExpireTime+0x18>
 8005aca:	2200      	movs	r2, #0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d105      	bne.n	8005ae4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ad8:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <prvGetNextExpireTime+0x44>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	e001      	b.n	8005ae8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	20000c94 	.word	0x20000c94

08005afc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b04:	f7ff fa7e 	bl	8005004 <xTaskGetTickCount>
 8005b08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <prvSampleTimeNow+0x3c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d205      	bcs.n	8005b20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b14:	f000 f936 	bl	8005d84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	e002      	b.n	8005b26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b26:	4a04      	ldr	r2, [pc, #16]	; (8005b38 <prvSampleTimeNow+0x3c>)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000ca4 	.word	0x20000ca4

08005b3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d812      	bhi.n	8005b88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	1ad2      	subs	r2, r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d302      	bcc.n	8005b76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b70:	2301      	movs	r3, #1
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	e01b      	b.n	8005bae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b76:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <prvInsertTimerInActiveList+0x7c>)
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4610      	mov	r0, r2
 8005b82:	f7fe f982 	bl	8003e8a <vListInsert>
 8005b86:	e012      	b.n	8005bae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d206      	bcs.n	8005b9e <prvInsertTimerInActiveList+0x62>
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d302      	bcc.n	8005b9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	e007      	b.n	8005bae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b9e:	4b07      	ldr	r3, [pc, #28]	; (8005bbc <prvInsertTimerInActiveList+0x80>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4610      	mov	r0, r2
 8005baa:	f7fe f96e 	bl	8003e8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005bae:	697b      	ldr	r3, [r7, #20]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	20000c98 	.word	0x20000c98
 8005bbc:	20000c94 	.word	0x20000c94

08005bc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08e      	sub	sp, #56	; 0x38
 8005bc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bc6:	e0ca      	b.n	8005d5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	da18      	bge.n	8005c00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005bce:	1d3b      	adds	r3, r7, #4
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10a      	bne.n	8005bf0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	61fb      	str	r3, [r7, #28]
}
 8005bec:	bf00      	nop
 8005bee:	e7fe      	b.n	8005bee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bf6:	6850      	ldr	r0, [r2, #4]
 8005bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bfa:	6892      	ldr	r2, [r2, #8]
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f2c0 80aa 	blt.w	8005d5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d004      	beq.n	8005c1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	3304      	adds	r3, #4
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fe f96f 	bl	8003efc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c1e:	463b      	mov	r3, r7
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff ff6b 	bl	8005afc <prvSampleTimeNow>
 8005c26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b09      	cmp	r3, #9
 8005c2c:	f200 8097 	bhi.w	8005d5e <prvProcessReceivedCommands+0x19e>
 8005c30:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <prvProcessReceivedCommands+0x78>)
 8005c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c36:	bf00      	nop
 8005c38:	08005c61 	.word	0x08005c61
 8005c3c:	08005c61 	.word	0x08005c61
 8005c40:	08005c61 	.word	0x08005c61
 8005c44:	08005cd5 	.word	0x08005cd5
 8005c48:	08005ce9 	.word	0x08005ce9
 8005c4c:	08005d33 	.word	0x08005d33
 8005c50:	08005c61 	.word	0x08005c61
 8005c54:	08005c61 	.word	0x08005c61
 8005c58:	08005cd5 	.word	0x08005cd5
 8005c5c:	08005ce9 	.word	0x08005ce9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	18d1      	adds	r1, r2, r3
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c80:	f7ff ff5c 	bl	8005b3c <prvInsertTimerInActiveList>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d069      	beq.n	8005d5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d05e      	beq.n	8005d5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	441a      	add	r2, r3
 8005ca8:	2300      	movs	r3, #0
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	2300      	movs	r3, #0
 8005cae:	2100      	movs	r1, #0
 8005cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cb2:	f7ff fe05 	bl	80058c0 <xTimerGenericCommand>
 8005cb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d14f      	bne.n	8005d5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	61bb      	str	r3, [r7, #24]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005ce6:	e03a      	b.n	8005d5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cee:	f043 0301 	orr.w	r3, r3, #1
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	617b      	str	r3, [r7, #20]
}
 8005d1a:	bf00      	nop
 8005d1c:	e7fe      	b.n	8005d1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	18d1      	adds	r1, r2, r3
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d2c:	f7ff ff06 	bl	8005b3c <prvInsertTimerInActiveList>
					break;
 8005d30:	e015      	b.n	8005d5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d103      	bne.n	8005d48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d42:	f000 fbdd 	bl	8006500 <vPortFree>
 8005d46:	e00a      	b.n	8005d5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d4e:	f023 0301 	bic.w	r3, r3, #1
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d5a:	e000      	b.n	8005d5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005d5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d5e:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <prvProcessReceivedCommands+0x1c0>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	1d39      	adds	r1, r7, #4
 8005d64:	2200      	movs	r2, #0
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fe fc16 	bl	8004598 <xQueueReceive>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f47f af2a 	bne.w	8005bc8 <prvProcessReceivedCommands+0x8>
	}
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	3730      	adds	r7, #48	; 0x30
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000c9c 	.word	0x20000c9c

08005d84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d8a:	e048      	b.n	8005e1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d8c:	4b2d      	ldr	r3, [pc, #180]	; (8005e44 <prvSwitchTimerLists+0xc0>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d96:	4b2b      	ldr	r3, [pc, #172]	; (8005e44 <prvSwitchTimerLists+0xc0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3304      	adds	r3, #4
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7fe f8a9 	bl	8003efc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d02e      	beq.n	8005e1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d90e      	bls.n	8005df0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dde:	4b19      	ldr	r3, [pc, #100]	; (8005e44 <prvSwitchTimerLists+0xc0>)
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3304      	adds	r3, #4
 8005de6:	4619      	mov	r1, r3
 8005de8:	4610      	mov	r0, r2
 8005dea:	f7fe f84e 	bl	8003e8a <vListInsert>
 8005dee:	e016      	b.n	8005e1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005df0:	2300      	movs	r3, #0
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	2300      	movs	r3, #0
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	2100      	movs	r1, #0
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f7ff fd60 	bl	80058c0 <xTimerGenericCommand>
 8005e00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10a      	bne.n	8005e1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	603b      	str	r3, [r7, #0]
}
 8005e1a:	bf00      	nop
 8005e1c:	e7fe      	b.n	8005e1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e1e:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <prvSwitchTimerLists+0xc0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1b1      	bne.n	8005d8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e28:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <prvSwitchTimerLists+0xc0>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e2e:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <prvSwitchTimerLists+0xc4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a04      	ldr	r2, [pc, #16]	; (8005e44 <prvSwitchTimerLists+0xc0>)
 8005e34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e36:	4a04      	ldr	r2, [pc, #16]	; (8005e48 <prvSwitchTimerLists+0xc4>)
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	6013      	str	r3, [r2, #0]
}
 8005e3c:	bf00      	nop
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20000c94 	.word	0x20000c94
 8005e48:	20000c98 	.word	0x20000c98

08005e4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e52:	f000 f967 	bl	8006124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e56:	4b15      	ldr	r3, [pc, #84]	; (8005eac <prvCheckForValidListAndQueue+0x60>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d120      	bne.n	8005ea0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e5e:	4814      	ldr	r0, [pc, #80]	; (8005eb0 <prvCheckForValidListAndQueue+0x64>)
 8005e60:	f7fd ffc2 	bl	8003de8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e64:	4813      	ldr	r0, [pc, #76]	; (8005eb4 <prvCheckForValidListAndQueue+0x68>)
 8005e66:	f7fd ffbf 	bl	8003de8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e6a:	4b13      	ldr	r3, [pc, #76]	; (8005eb8 <prvCheckForValidListAndQueue+0x6c>)
 8005e6c:	4a10      	ldr	r2, [pc, #64]	; (8005eb0 <prvCheckForValidListAndQueue+0x64>)
 8005e6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e70:	4b12      	ldr	r3, [pc, #72]	; (8005ebc <prvCheckForValidListAndQueue+0x70>)
 8005e72:	4a10      	ldr	r2, [pc, #64]	; (8005eb4 <prvCheckForValidListAndQueue+0x68>)
 8005e74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e76:	2300      	movs	r3, #0
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	4b11      	ldr	r3, [pc, #68]	; (8005ec0 <prvCheckForValidListAndQueue+0x74>)
 8005e7c:	4a11      	ldr	r2, [pc, #68]	; (8005ec4 <prvCheckForValidListAndQueue+0x78>)
 8005e7e:	2110      	movs	r1, #16
 8005e80:	200a      	movs	r0, #10
 8005e82:	f7fe f8cd 	bl	8004020 <xQueueGenericCreateStatic>
 8005e86:	4603      	mov	r3, r0
 8005e88:	4a08      	ldr	r2, [pc, #32]	; (8005eac <prvCheckForValidListAndQueue+0x60>)
 8005e8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e8c:	4b07      	ldr	r3, [pc, #28]	; (8005eac <prvCheckForValidListAndQueue+0x60>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <prvCheckForValidListAndQueue+0x60>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	490b      	ldr	r1, [pc, #44]	; (8005ec8 <prvCheckForValidListAndQueue+0x7c>)
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe fd6c 	bl	8004978 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ea0:	f000 f970 	bl	8006184 <vPortExitCritical>
}
 8005ea4:	bf00      	nop
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000c9c 	.word	0x20000c9c
 8005eb0:	20000c6c 	.word	0x20000c6c
 8005eb4:	20000c80 	.word	0x20000c80
 8005eb8:	20000c94 	.word	0x20000c94
 8005ebc:	20000c98 	.word	0x20000c98
 8005ec0:	20000d48 	.word	0x20000d48
 8005ec4:	20000ca8 	.word	0x20000ca8
 8005ec8:	0800709c 	.word	0x0800709c

08005ecc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3b04      	subs	r3, #4
 8005edc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3b04      	subs	r3, #4
 8005eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f023 0201 	bic.w	r2, r3, #1
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3b04      	subs	r3, #4
 8005efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005efc:	4a0c      	ldr	r2, [pc, #48]	; (8005f30 <pxPortInitialiseStack+0x64>)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3b14      	subs	r3, #20
 8005f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3b04      	subs	r3, #4
 8005f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f06f 0202 	mvn.w	r2, #2
 8005f1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3b20      	subs	r3, #32
 8005f20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f22:	68fb      	ldr	r3, [r7, #12]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	08005f35 	.word	0x08005f35

08005f34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f3e:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <prvTaskExitError+0x54>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d00a      	beq.n	8005f5e <prvTaskExitError+0x2a>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	60fb      	str	r3, [r7, #12]
}
 8005f5a:	bf00      	nop
 8005f5c:	e7fe      	b.n	8005f5c <prvTaskExitError+0x28>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	60bb      	str	r3, [r7, #8]
}
 8005f70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f72:	bf00      	nop
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0fc      	beq.n	8005f74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f7a:	bf00      	nop
 8005f7c:	bf00      	nop
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	2000001c 	.word	0x2000001c
 8005f8c:	00000000 	.word	0x00000000

08005f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f90:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <pxCurrentTCBConst2>)
 8005f92:	6819      	ldr	r1, [r3, #0]
 8005f94:	6808      	ldr	r0, [r1, #0]
 8005f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9a:	f380 8809 	msr	PSP, r0
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f04f 0000 	mov.w	r0, #0
 8005fa6:	f380 8811 	msr	BASEPRI, r0
 8005faa:	4770      	bx	lr
 8005fac:	f3af 8000 	nop.w

08005fb0 <pxCurrentTCBConst2>:
 8005fb0:	2000076c 	.word	0x2000076c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop

08005fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fb8:	4808      	ldr	r0, [pc, #32]	; (8005fdc <prvPortStartFirstTask+0x24>)
 8005fba:	6800      	ldr	r0, [r0, #0]
 8005fbc:	6800      	ldr	r0, [r0, #0]
 8005fbe:	f380 8808 	msr	MSP, r0
 8005fc2:	f04f 0000 	mov.w	r0, #0
 8005fc6:	f380 8814 	msr	CONTROL, r0
 8005fca:	b662      	cpsie	i
 8005fcc:	b661      	cpsie	f
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	df00      	svc	0
 8005fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fda:	bf00      	nop
 8005fdc:	e000ed08 	.word	0xe000ed08

08005fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fe6:	4b46      	ldr	r3, [pc, #280]	; (8006100 <xPortStartScheduler+0x120>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a46      	ldr	r2, [pc, #280]	; (8006104 <xPortStartScheduler+0x124>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d10a      	bne.n	8006006 <xPortStartScheduler+0x26>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	613b      	str	r3, [r7, #16]
}
 8006002:	bf00      	nop
 8006004:	e7fe      	b.n	8006004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006006:	4b3e      	ldr	r3, [pc, #248]	; (8006100 <xPortStartScheduler+0x120>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a3f      	ldr	r2, [pc, #252]	; (8006108 <xPortStartScheduler+0x128>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d10a      	bne.n	8006026 <xPortStartScheduler+0x46>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
}
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006026:	4b39      	ldr	r3, [pc, #228]	; (800610c <xPortStartScheduler+0x12c>)
 8006028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	22ff      	movs	r2, #255	; 0xff
 8006036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006040:	78fb      	ldrb	r3, [r7, #3]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006048:	b2da      	uxtb	r2, r3
 800604a:	4b31      	ldr	r3, [pc, #196]	; (8006110 <xPortStartScheduler+0x130>)
 800604c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800604e:	4b31      	ldr	r3, [pc, #196]	; (8006114 <xPortStartScheduler+0x134>)
 8006050:	2207      	movs	r2, #7
 8006052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006054:	e009      	b.n	800606a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006056:	4b2f      	ldr	r3, [pc, #188]	; (8006114 <xPortStartScheduler+0x134>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3b01      	subs	r3, #1
 800605c:	4a2d      	ldr	r2, [pc, #180]	; (8006114 <xPortStartScheduler+0x134>)
 800605e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	b2db      	uxtb	r3, r3
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	b2db      	uxtb	r3, r3
 8006068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800606a:	78fb      	ldrb	r3, [r7, #3]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006072:	2b80      	cmp	r3, #128	; 0x80
 8006074:	d0ef      	beq.n	8006056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006076:	4b27      	ldr	r3, [pc, #156]	; (8006114 <xPortStartScheduler+0x134>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f1c3 0307 	rsb	r3, r3, #7
 800607e:	2b04      	cmp	r3, #4
 8006080:	d00a      	beq.n	8006098 <xPortStartScheduler+0xb8>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	60bb      	str	r3, [r7, #8]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006098:	4b1e      	ldr	r3, [pc, #120]	; (8006114 <xPortStartScheduler+0x134>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	4a1d      	ldr	r2, [pc, #116]	; (8006114 <xPortStartScheduler+0x134>)
 80060a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060a2:	4b1c      	ldr	r3, [pc, #112]	; (8006114 <xPortStartScheduler+0x134>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060aa:	4a1a      	ldr	r2, [pc, #104]	; (8006114 <xPortStartScheduler+0x134>)
 80060ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060b6:	4b18      	ldr	r3, [pc, #96]	; (8006118 <xPortStartScheduler+0x138>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a17      	ldr	r2, [pc, #92]	; (8006118 <xPortStartScheduler+0x138>)
 80060bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060c2:	4b15      	ldr	r3, [pc, #84]	; (8006118 <xPortStartScheduler+0x138>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a14      	ldr	r2, [pc, #80]	; (8006118 <xPortStartScheduler+0x138>)
 80060c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80060cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060ce:	f000 f8dd 	bl	800628c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060d2:	4b12      	ldr	r3, [pc, #72]	; (800611c <xPortStartScheduler+0x13c>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060d8:	f000 f8fc 	bl	80062d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060dc:	4b10      	ldr	r3, [pc, #64]	; (8006120 <xPortStartScheduler+0x140>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a0f      	ldr	r2, [pc, #60]	; (8006120 <xPortStartScheduler+0x140>)
 80060e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060e8:	f7ff ff66 	bl	8005fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060ec:	f7ff f854 	bl	8005198 <vTaskSwitchContext>
	prvTaskExitError();
 80060f0:	f7ff ff20 	bl	8005f34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	e000ed00 	.word	0xe000ed00
 8006104:	410fc271 	.word	0x410fc271
 8006108:	410fc270 	.word	0x410fc270
 800610c:	e000e400 	.word	0xe000e400
 8006110:	20000d98 	.word	0x20000d98
 8006114:	20000d9c 	.word	0x20000d9c
 8006118:	e000ed20 	.word	0xe000ed20
 800611c:	2000001c 	.word	0x2000001c
 8006120:	e000ef34 	.word	0xe000ef34

08006124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	607b      	str	r3, [r7, #4]
}
 800613c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800613e:	4b0f      	ldr	r3, [pc, #60]	; (800617c <vPortEnterCritical+0x58>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3301      	adds	r3, #1
 8006144:	4a0d      	ldr	r2, [pc, #52]	; (800617c <vPortEnterCritical+0x58>)
 8006146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006148:	4b0c      	ldr	r3, [pc, #48]	; (800617c <vPortEnterCritical+0x58>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d10f      	bne.n	8006170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006150:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <vPortEnterCritical+0x5c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <vPortEnterCritical+0x4c>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	603b      	str	r3, [r7, #0]
}
 800616c:	bf00      	nop
 800616e:	e7fe      	b.n	800616e <vPortEnterCritical+0x4a>
	}
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	2000001c 	.word	0x2000001c
 8006180:	e000ed04 	.word	0xe000ed04

08006184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800618a:	4b12      	ldr	r3, [pc, #72]	; (80061d4 <vPortExitCritical+0x50>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <vPortExitCritical+0x24>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	607b      	str	r3, [r7, #4]
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061a8:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <vPortExitCritical+0x50>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	4a09      	ldr	r2, [pc, #36]	; (80061d4 <vPortExitCritical+0x50>)
 80061b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061b2:	4b08      	ldr	r3, [pc, #32]	; (80061d4 <vPortExitCritical+0x50>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d105      	bne.n	80061c6 <vPortExitCritical+0x42>
 80061ba:	2300      	movs	r3, #0
 80061bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	f383 8811 	msr	BASEPRI, r3
}
 80061c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	2000001c 	.word	0x2000001c
	...

080061e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061e0:	f3ef 8009 	mrs	r0, PSP
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	4b15      	ldr	r3, [pc, #84]	; (8006240 <pxCurrentTCBConst>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	f01e 0f10 	tst.w	lr, #16
 80061f0:	bf08      	it	eq
 80061f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fa:	6010      	str	r0, [r2, #0]
 80061fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006204:	f380 8811 	msr	BASEPRI, r0
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f7fe ffc2 	bl	8005198 <vTaskSwitchContext>
 8006214:	f04f 0000 	mov.w	r0, #0
 8006218:	f380 8811 	msr	BASEPRI, r0
 800621c:	bc09      	pop	{r0, r3}
 800621e:	6819      	ldr	r1, [r3, #0]
 8006220:	6808      	ldr	r0, [r1, #0]
 8006222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006226:	f01e 0f10 	tst.w	lr, #16
 800622a:	bf08      	it	eq
 800622c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006230:	f380 8809 	msr	PSP, r0
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	f3af 8000 	nop.w

08006240 <pxCurrentTCBConst>:
 8006240:	2000076c 	.word	0x2000076c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop

08006248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	607b      	str	r3, [r7, #4]
}
 8006260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006262:	f7fe fedf 	bl	8005024 <xTaskIncrementTick>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <xPortSysTickHandler+0x40>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	2300      	movs	r3, #0
 8006276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	f383 8811 	msr	BASEPRI, r3
}
 800627e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006290:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <vPortSetupTimerInterrupt+0x34>)
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006296:	4b0b      	ldr	r3, [pc, #44]	; (80062c4 <vPortSetupTimerInterrupt+0x38>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800629c:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <vPortSetupTimerInterrupt+0x3c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a0a      	ldr	r2, [pc, #40]	; (80062cc <vPortSetupTimerInterrupt+0x40>)
 80062a2:	fba2 2303 	umull	r2, r3, r2, r3
 80062a6:	099b      	lsrs	r3, r3, #6
 80062a8:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <vPortSetupTimerInterrupt+0x44>)
 80062aa:	3b01      	subs	r3, #1
 80062ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062ae:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <vPortSetupTimerInterrupt+0x34>)
 80062b0:	2207      	movs	r2, #7
 80062b2:	601a      	str	r2, [r3, #0]
}
 80062b4:	bf00      	nop
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	e000e010 	.word	0xe000e010
 80062c4:	e000e018 	.word	0xe000e018
 80062c8:	20000010 	.word	0x20000010
 80062cc:	10624dd3 	.word	0x10624dd3
 80062d0:	e000e014 	.word	0xe000e014

080062d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062e4 <vPortEnableVFP+0x10>
 80062d8:	6801      	ldr	r1, [r0, #0]
 80062da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062de:	6001      	str	r1, [r0, #0]
 80062e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062e2:	bf00      	nop
 80062e4:	e000ed88 	.word	0xe000ed88

080062e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062ee:	f3ef 8305 	mrs	r3, IPSR
 80062f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b0f      	cmp	r3, #15
 80062f8:	d914      	bls.n	8006324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062fa:	4a17      	ldr	r2, [pc, #92]	; (8006358 <vPortValidateInterruptPriority+0x70>)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4413      	add	r3, r2
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006304:	4b15      	ldr	r3, [pc, #84]	; (800635c <vPortValidateInterruptPriority+0x74>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	7afa      	ldrb	r2, [r7, #11]
 800630a:	429a      	cmp	r2, r3
 800630c:	d20a      	bcs.n	8006324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	607b      	str	r3, [r7, #4]
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006324:	4b0e      	ldr	r3, [pc, #56]	; (8006360 <vPortValidateInterruptPriority+0x78>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800632c:	4b0d      	ldr	r3, [pc, #52]	; (8006364 <vPortValidateInterruptPriority+0x7c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d90a      	bls.n	800634a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	603b      	str	r3, [r7, #0]
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <vPortValidateInterruptPriority+0x60>
	}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	e000e3f0 	.word	0xe000e3f0
 800635c:	20000d98 	.word	0x20000d98
 8006360:	e000ed0c 	.word	0xe000ed0c
 8006364:	20000d9c 	.word	0x20000d9c

08006368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08a      	sub	sp, #40	; 0x28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006370:	2300      	movs	r3, #0
 8006372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006374:	f7fe fd9a 	bl	8004eac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006378:	4b5b      	ldr	r3, [pc, #364]	; (80064e8 <pvPortMalloc+0x180>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006380:	f000 f920 	bl	80065c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006384:	4b59      	ldr	r3, [pc, #356]	; (80064ec <pvPortMalloc+0x184>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	f040 8093 	bne.w	80064b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01d      	beq.n	80063d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006398:	2208      	movs	r2, #8
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4413      	add	r3, r2
 800639e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d014      	beq.n	80063d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f023 0307 	bic.w	r3, r3, #7
 80063b0:	3308      	adds	r3, #8
 80063b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <pvPortMalloc+0x6c>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	617b      	str	r3, [r7, #20]
}
 80063d0:	bf00      	nop
 80063d2:	e7fe      	b.n	80063d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d06e      	beq.n	80064b8 <pvPortMalloc+0x150>
 80063da:	4b45      	ldr	r3, [pc, #276]	; (80064f0 <pvPortMalloc+0x188>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d869      	bhi.n	80064b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063e4:	4b43      	ldr	r3, [pc, #268]	; (80064f4 <pvPortMalloc+0x18c>)
 80063e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063e8:	4b42      	ldr	r3, [pc, #264]	; (80064f4 <pvPortMalloc+0x18c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063ee:	e004      	b.n	80063fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d903      	bls.n	800640c <pvPortMalloc+0xa4>
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1f1      	bne.n	80063f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800640c:	4b36      	ldr	r3, [pc, #216]	; (80064e8 <pvPortMalloc+0x180>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006412:	429a      	cmp	r2, r3
 8006414:	d050      	beq.n	80064b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2208      	movs	r2, #8
 800641c:	4413      	add	r3, r2
 800641e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	1ad2      	subs	r2, r2, r3
 8006430:	2308      	movs	r3, #8
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	429a      	cmp	r2, r3
 8006436:	d91f      	bls.n	8006478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4413      	add	r3, r2
 800643e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <pvPortMalloc+0xf8>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	613b      	str	r3, [r7, #16]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	1ad2      	subs	r2, r2, r3
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006472:	69b8      	ldr	r0, [r7, #24]
 8006474:	f000 f908 	bl	8006688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006478:	4b1d      	ldr	r3, [pc, #116]	; (80064f0 <pvPortMalloc+0x188>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	4a1b      	ldr	r2, [pc, #108]	; (80064f0 <pvPortMalloc+0x188>)
 8006484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006486:	4b1a      	ldr	r3, [pc, #104]	; (80064f0 <pvPortMalloc+0x188>)
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b1b      	ldr	r3, [pc, #108]	; (80064f8 <pvPortMalloc+0x190>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d203      	bcs.n	800649a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006492:	4b17      	ldr	r3, [pc, #92]	; (80064f0 <pvPortMalloc+0x188>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a18      	ldr	r2, [pc, #96]	; (80064f8 <pvPortMalloc+0x190>)
 8006498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	4b13      	ldr	r3, [pc, #76]	; (80064ec <pvPortMalloc+0x184>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064ae:	4b13      	ldr	r3, [pc, #76]	; (80064fc <pvPortMalloc+0x194>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3301      	adds	r3, #1
 80064b4:	4a11      	ldr	r2, [pc, #68]	; (80064fc <pvPortMalloc+0x194>)
 80064b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064b8:	f7fe fd06 	bl	8004ec8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <pvPortMalloc+0x174>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	60fb      	str	r3, [r7, #12]
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <pvPortMalloc+0x172>
	return pvReturn;
 80064dc:	69fb      	ldr	r3, [r7, #28]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3728      	adds	r7, #40	; 0x28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	200049a8 	.word	0x200049a8
 80064ec:	200049bc 	.word	0x200049bc
 80064f0:	200049ac 	.word	0x200049ac
 80064f4:	200049a0 	.word	0x200049a0
 80064f8:	200049b0 	.word	0x200049b0
 80064fc:	200049b4 	.word	0x200049b4

08006500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d04d      	beq.n	80065ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006512:	2308      	movs	r3, #8
 8006514:	425b      	negs	r3, r3
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4413      	add	r3, r2
 800651a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	4b24      	ldr	r3, [pc, #144]	; (80065b8 <vPortFree+0xb8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4013      	ands	r3, r2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <vPortFree+0x44>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	60fb      	str	r3, [r7, #12]
}
 8006540:	bf00      	nop
 8006542:	e7fe      	b.n	8006542 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <vPortFree+0x62>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	60bb      	str	r3, [r7, #8]
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <vPortFree+0xb8>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4013      	ands	r3, r2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01e      	beq.n	80065ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d11a      	bne.n	80065ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	4b0e      	ldr	r3, [pc, #56]	; (80065b8 <vPortFree+0xb8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	43db      	mvns	r3, r3
 8006582:	401a      	ands	r2, r3
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006588:	f7fe fc90 	bl	8004eac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <vPortFree+0xbc>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4413      	add	r3, r2
 8006596:	4a09      	ldr	r2, [pc, #36]	; (80065bc <vPortFree+0xbc>)
 8006598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800659a:	6938      	ldr	r0, [r7, #16]
 800659c:	f000 f874 	bl	8006688 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80065a0:	4b07      	ldr	r3, [pc, #28]	; (80065c0 <vPortFree+0xc0>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3301      	adds	r3, #1
 80065a6:	4a06      	ldr	r2, [pc, #24]	; (80065c0 <vPortFree+0xc0>)
 80065a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80065aa:	f7fe fc8d 	bl	8004ec8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065ae:	bf00      	nop
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	200049bc 	.word	0x200049bc
 80065bc:	200049ac 	.word	0x200049ac
 80065c0:	200049b8 	.word	0x200049b8

080065c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065d0:	4b27      	ldr	r3, [pc, #156]	; (8006670 <prvHeapInit+0xac>)
 80065d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00c      	beq.n	80065f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3307      	adds	r3, #7
 80065e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0307 	bic.w	r3, r3, #7
 80065ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	4a1f      	ldr	r2, [pc, #124]	; (8006670 <prvHeapInit+0xac>)
 80065f4:	4413      	add	r3, r2
 80065f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065fc:	4a1d      	ldr	r2, [pc, #116]	; (8006674 <prvHeapInit+0xb0>)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006602:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <prvHeapInit+0xb0>)
 8006604:	2200      	movs	r2, #0
 8006606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	4413      	add	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006610:	2208      	movs	r2, #8
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0307 	bic.w	r3, r3, #7
 800661e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4a15      	ldr	r2, [pc, #84]	; (8006678 <prvHeapInit+0xb4>)
 8006624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006626:	4b14      	ldr	r3, [pc, #80]	; (8006678 <prvHeapInit+0xb4>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2200      	movs	r2, #0
 800662c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800662e:	4b12      	ldr	r3, [pc, #72]	; (8006678 <prvHeapInit+0xb4>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	1ad2      	subs	r2, r2, r3
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006644:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <prvHeapInit+0xb4>)
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	4a0a      	ldr	r2, [pc, #40]	; (800667c <prvHeapInit+0xb8>)
 8006652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	4a09      	ldr	r2, [pc, #36]	; (8006680 <prvHeapInit+0xbc>)
 800665a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800665c:	4b09      	ldr	r3, [pc, #36]	; (8006684 <prvHeapInit+0xc0>)
 800665e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006662:	601a      	str	r2, [r3, #0]
}
 8006664:	bf00      	nop
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	20000da0 	.word	0x20000da0
 8006674:	200049a0 	.word	0x200049a0
 8006678:	200049a8 	.word	0x200049a8
 800667c:	200049b0 	.word	0x200049b0
 8006680:	200049ac 	.word	0x200049ac
 8006684:	200049bc 	.word	0x200049bc

08006688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006690:	4b28      	ldr	r3, [pc, #160]	; (8006734 <prvInsertBlockIntoFreeList+0xac>)
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e002      	b.n	800669c <prvInsertBlockIntoFreeList+0x14>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d8f7      	bhi.n	8006696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	4413      	add	r3, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d108      	bne.n	80066ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	441a      	add	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	441a      	add	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d118      	bne.n	8006710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4b15      	ldr	r3, [pc, #84]	; (8006738 <prvInsertBlockIntoFreeList+0xb0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d00d      	beq.n	8006706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	441a      	add	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	e008      	b.n	8006718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006706:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <prvInsertBlockIntoFreeList+0xb0>)
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	e003      	b.n	8006718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	429a      	cmp	r2, r3
 800671e:	d002      	beq.n	8006726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006726:	bf00      	nop
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	200049a0 	.word	0x200049a0
 8006738:	200049a8 	.word	0x200049a8

0800673c <__errno>:
 800673c:	4b01      	ldr	r3, [pc, #4]	; (8006744 <__errno+0x8>)
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20000020 	.word	0x20000020

08006748 <__libc_init_array>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	4d0d      	ldr	r5, [pc, #52]	; (8006780 <__libc_init_array+0x38>)
 800674c:	4c0d      	ldr	r4, [pc, #52]	; (8006784 <__libc_init_array+0x3c>)
 800674e:	1b64      	subs	r4, r4, r5
 8006750:	10a4      	asrs	r4, r4, #2
 8006752:	2600      	movs	r6, #0
 8006754:	42a6      	cmp	r6, r4
 8006756:	d109      	bne.n	800676c <__libc_init_array+0x24>
 8006758:	4d0b      	ldr	r5, [pc, #44]	; (8006788 <__libc_init_array+0x40>)
 800675a:	4c0c      	ldr	r4, [pc, #48]	; (800678c <__libc_init_array+0x44>)
 800675c:	f000 fc4e 	bl	8006ffc <_init>
 8006760:	1b64      	subs	r4, r4, r5
 8006762:	10a4      	asrs	r4, r4, #2
 8006764:	2600      	movs	r6, #0
 8006766:	42a6      	cmp	r6, r4
 8006768:	d105      	bne.n	8006776 <__libc_init_array+0x2e>
 800676a:	bd70      	pop	{r4, r5, r6, pc}
 800676c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006770:	4798      	blx	r3
 8006772:	3601      	adds	r6, #1
 8006774:	e7ee      	b.n	8006754 <__libc_init_array+0xc>
 8006776:	f855 3b04 	ldr.w	r3, [r5], #4
 800677a:	4798      	blx	r3
 800677c:	3601      	adds	r6, #1
 800677e:	e7f2      	b.n	8006766 <__libc_init_array+0x1e>
 8006780:	08007198 	.word	0x08007198
 8006784:	08007198 	.word	0x08007198
 8006788:	08007198 	.word	0x08007198
 800678c:	0800719c 	.word	0x0800719c

08006790 <memcpy>:
 8006790:	440a      	add	r2, r1
 8006792:	4291      	cmp	r1, r2
 8006794:	f100 33ff 	add.w	r3, r0, #4294967295
 8006798:	d100      	bne.n	800679c <memcpy+0xc>
 800679a:	4770      	bx	lr
 800679c:	b510      	push	{r4, lr}
 800679e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067a6:	4291      	cmp	r1, r2
 80067a8:	d1f9      	bne.n	800679e <memcpy+0xe>
 80067aa:	bd10      	pop	{r4, pc}

080067ac <memset>:
 80067ac:	4402      	add	r2, r0
 80067ae:	4603      	mov	r3, r0
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d100      	bne.n	80067b6 <memset+0xa>
 80067b4:	4770      	bx	lr
 80067b6:	f803 1b01 	strb.w	r1, [r3], #1
 80067ba:	e7f9      	b.n	80067b0 <memset+0x4>

080067bc <siprintf>:
 80067bc:	b40e      	push	{r1, r2, r3}
 80067be:	b500      	push	{lr}
 80067c0:	b09c      	sub	sp, #112	; 0x70
 80067c2:	ab1d      	add	r3, sp, #116	; 0x74
 80067c4:	9002      	str	r0, [sp, #8]
 80067c6:	9006      	str	r0, [sp, #24]
 80067c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067cc:	4809      	ldr	r0, [pc, #36]	; (80067f4 <siprintf+0x38>)
 80067ce:	9107      	str	r1, [sp, #28]
 80067d0:	9104      	str	r1, [sp, #16]
 80067d2:	4909      	ldr	r1, [pc, #36]	; (80067f8 <siprintf+0x3c>)
 80067d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80067d8:	9105      	str	r1, [sp, #20]
 80067da:	6800      	ldr	r0, [r0, #0]
 80067dc:	9301      	str	r3, [sp, #4]
 80067de:	a902      	add	r1, sp, #8
 80067e0:	f000 f868 	bl	80068b4 <_svfiprintf_r>
 80067e4:	9b02      	ldr	r3, [sp, #8]
 80067e6:	2200      	movs	r2, #0
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	b01c      	add	sp, #112	; 0x70
 80067ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80067f0:	b003      	add	sp, #12
 80067f2:	4770      	bx	lr
 80067f4:	20000020 	.word	0x20000020
 80067f8:	ffff0208 	.word	0xffff0208

080067fc <__ssputs_r>:
 80067fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006800:	688e      	ldr	r6, [r1, #8]
 8006802:	429e      	cmp	r6, r3
 8006804:	4682      	mov	sl, r0
 8006806:	460c      	mov	r4, r1
 8006808:	4690      	mov	r8, r2
 800680a:	461f      	mov	r7, r3
 800680c:	d838      	bhi.n	8006880 <__ssputs_r+0x84>
 800680e:	898a      	ldrh	r2, [r1, #12]
 8006810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006814:	d032      	beq.n	800687c <__ssputs_r+0x80>
 8006816:	6825      	ldr	r5, [r4, #0]
 8006818:	6909      	ldr	r1, [r1, #16]
 800681a:	eba5 0901 	sub.w	r9, r5, r1
 800681e:	6965      	ldr	r5, [r4, #20]
 8006820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006828:	3301      	adds	r3, #1
 800682a:	444b      	add	r3, r9
 800682c:	106d      	asrs	r5, r5, #1
 800682e:	429d      	cmp	r5, r3
 8006830:	bf38      	it	cc
 8006832:	461d      	movcc	r5, r3
 8006834:	0553      	lsls	r3, r2, #21
 8006836:	d531      	bpl.n	800689c <__ssputs_r+0xa0>
 8006838:	4629      	mov	r1, r5
 800683a:	f000 fb39 	bl	8006eb0 <_malloc_r>
 800683e:	4606      	mov	r6, r0
 8006840:	b950      	cbnz	r0, 8006858 <__ssputs_r+0x5c>
 8006842:	230c      	movs	r3, #12
 8006844:	f8ca 3000 	str.w	r3, [sl]
 8006848:	89a3      	ldrh	r3, [r4, #12]
 800684a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800684e:	81a3      	strh	r3, [r4, #12]
 8006850:	f04f 30ff 	mov.w	r0, #4294967295
 8006854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006858:	6921      	ldr	r1, [r4, #16]
 800685a:	464a      	mov	r2, r9
 800685c:	f7ff ff98 	bl	8006790 <memcpy>
 8006860:	89a3      	ldrh	r3, [r4, #12]
 8006862:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686a:	81a3      	strh	r3, [r4, #12]
 800686c:	6126      	str	r6, [r4, #16]
 800686e:	6165      	str	r5, [r4, #20]
 8006870:	444e      	add	r6, r9
 8006872:	eba5 0509 	sub.w	r5, r5, r9
 8006876:	6026      	str	r6, [r4, #0]
 8006878:	60a5      	str	r5, [r4, #8]
 800687a:	463e      	mov	r6, r7
 800687c:	42be      	cmp	r6, r7
 800687e:	d900      	bls.n	8006882 <__ssputs_r+0x86>
 8006880:	463e      	mov	r6, r7
 8006882:	4632      	mov	r2, r6
 8006884:	6820      	ldr	r0, [r4, #0]
 8006886:	4641      	mov	r1, r8
 8006888:	f000 faa8 	bl	8006ddc <memmove>
 800688c:	68a3      	ldr	r3, [r4, #8]
 800688e:	6822      	ldr	r2, [r4, #0]
 8006890:	1b9b      	subs	r3, r3, r6
 8006892:	4432      	add	r2, r6
 8006894:	60a3      	str	r3, [r4, #8]
 8006896:	6022      	str	r2, [r4, #0]
 8006898:	2000      	movs	r0, #0
 800689a:	e7db      	b.n	8006854 <__ssputs_r+0x58>
 800689c:	462a      	mov	r2, r5
 800689e:	f000 fb61 	bl	8006f64 <_realloc_r>
 80068a2:	4606      	mov	r6, r0
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d1e1      	bne.n	800686c <__ssputs_r+0x70>
 80068a8:	6921      	ldr	r1, [r4, #16]
 80068aa:	4650      	mov	r0, sl
 80068ac:	f000 fab0 	bl	8006e10 <_free_r>
 80068b0:	e7c7      	b.n	8006842 <__ssputs_r+0x46>
	...

080068b4 <_svfiprintf_r>:
 80068b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b8:	4698      	mov	r8, r3
 80068ba:	898b      	ldrh	r3, [r1, #12]
 80068bc:	061b      	lsls	r3, r3, #24
 80068be:	b09d      	sub	sp, #116	; 0x74
 80068c0:	4607      	mov	r7, r0
 80068c2:	460d      	mov	r5, r1
 80068c4:	4614      	mov	r4, r2
 80068c6:	d50e      	bpl.n	80068e6 <_svfiprintf_r+0x32>
 80068c8:	690b      	ldr	r3, [r1, #16]
 80068ca:	b963      	cbnz	r3, 80068e6 <_svfiprintf_r+0x32>
 80068cc:	2140      	movs	r1, #64	; 0x40
 80068ce:	f000 faef 	bl	8006eb0 <_malloc_r>
 80068d2:	6028      	str	r0, [r5, #0]
 80068d4:	6128      	str	r0, [r5, #16]
 80068d6:	b920      	cbnz	r0, 80068e2 <_svfiprintf_r+0x2e>
 80068d8:	230c      	movs	r3, #12
 80068da:	603b      	str	r3, [r7, #0]
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295
 80068e0:	e0d1      	b.n	8006a86 <_svfiprintf_r+0x1d2>
 80068e2:	2340      	movs	r3, #64	; 0x40
 80068e4:	616b      	str	r3, [r5, #20]
 80068e6:	2300      	movs	r3, #0
 80068e8:	9309      	str	r3, [sp, #36]	; 0x24
 80068ea:	2320      	movs	r3, #32
 80068ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80068f4:	2330      	movs	r3, #48	; 0x30
 80068f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006aa0 <_svfiprintf_r+0x1ec>
 80068fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068fe:	f04f 0901 	mov.w	r9, #1
 8006902:	4623      	mov	r3, r4
 8006904:	469a      	mov	sl, r3
 8006906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800690a:	b10a      	cbz	r2, 8006910 <_svfiprintf_r+0x5c>
 800690c:	2a25      	cmp	r2, #37	; 0x25
 800690e:	d1f9      	bne.n	8006904 <_svfiprintf_r+0x50>
 8006910:	ebba 0b04 	subs.w	fp, sl, r4
 8006914:	d00b      	beq.n	800692e <_svfiprintf_r+0x7a>
 8006916:	465b      	mov	r3, fp
 8006918:	4622      	mov	r2, r4
 800691a:	4629      	mov	r1, r5
 800691c:	4638      	mov	r0, r7
 800691e:	f7ff ff6d 	bl	80067fc <__ssputs_r>
 8006922:	3001      	adds	r0, #1
 8006924:	f000 80aa 	beq.w	8006a7c <_svfiprintf_r+0x1c8>
 8006928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800692a:	445a      	add	r2, fp
 800692c:	9209      	str	r2, [sp, #36]	; 0x24
 800692e:	f89a 3000 	ldrb.w	r3, [sl]
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 80a2 	beq.w	8006a7c <_svfiprintf_r+0x1c8>
 8006938:	2300      	movs	r3, #0
 800693a:	f04f 32ff 	mov.w	r2, #4294967295
 800693e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006942:	f10a 0a01 	add.w	sl, sl, #1
 8006946:	9304      	str	r3, [sp, #16]
 8006948:	9307      	str	r3, [sp, #28]
 800694a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800694e:	931a      	str	r3, [sp, #104]	; 0x68
 8006950:	4654      	mov	r4, sl
 8006952:	2205      	movs	r2, #5
 8006954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006958:	4851      	ldr	r0, [pc, #324]	; (8006aa0 <_svfiprintf_r+0x1ec>)
 800695a:	f7f9 fc41 	bl	80001e0 <memchr>
 800695e:	9a04      	ldr	r2, [sp, #16]
 8006960:	b9d8      	cbnz	r0, 800699a <_svfiprintf_r+0xe6>
 8006962:	06d0      	lsls	r0, r2, #27
 8006964:	bf44      	itt	mi
 8006966:	2320      	movmi	r3, #32
 8006968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800696c:	0711      	lsls	r1, r2, #28
 800696e:	bf44      	itt	mi
 8006970:	232b      	movmi	r3, #43	; 0x2b
 8006972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006976:	f89a 3000 	ldrb.w	r3, [sl]
 800697a:	2b2a      	cmp	r3, #42	; 0x2a
 800697c:	d015      	beq.n	80069aa <_svfiprintf_r+0xf6>
 800697e:	9a07      	ldr	r2, [sp, #28]
 8006980:	4654      	mov	r4, sl
 8006982:	2000      	movs	r0, #0
 8006984:	f04f 0c0a 	mov.w	ip, #10
 8006988:	4621      	mov	r1, r4
 800698a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800698e:	3b30      	subs	r3, #48	; 0x30
 8006990:	2b09      	cmp	r3, #9
 8006992:	d94e      	bls.n	8006a32 <_svfiprintf_r+0x17e>
 8006994:	b1b0      	cbz	r0, 80069c4 <_svfiprintf_r+0x110>
 8006996:	9207      	str	r2, [sp, #28]
 8006998:	e014      	b.n	80069c4 <_svfiprintf_r+0x110>
 800699a:	eba0 0308 	sub.w	r3, r0, r8
 800699e:	fa09 f303 	lsl.w	r3, r9, r3
 80069a2:	4313      	orrs	r3, r2
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	46a2      	mov	sl, r4
 80069a8:	e7d2      	b.n	8006950 <_svfiprintf_r+0x9c>
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	1d19      	adds	r1, r3, #4
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	9103      	str	r1, [sp, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bfbb      	ittet	lt
 80069b6:	425b      	neglt	r3, r3
 80069b8:	f042 0202 	orrlt.w	r2, r2, #2
 80069bc:	9307      	strge	r3, [sp, #28]
 80069be:	9307      	strlt	r3, [sp, #28]
 80069c0:	bfb8      	it	lt
 80069c2:	9204      	strlt	r2, [sp, #16]
 80069c4:	7823      	ldrb	r3, [r4, #0]
 80069c6:	2b2e      	cmp	r3, #46	; 0x2e
 80069c8:	d10c      	bne.n	80069e4 <_svfiprintf_r+0x130>
 80069ca:	7863      	ldrb	r3, [r4, #1]
 80069cc:	2b2a      	cmp	r3, #42	; 0x2a
 80069ce:	d135      	bne.n	8006a3c <_svfiprintf_r+0x188>
 80069d0:	9b03      	ldr	r3, [sp, #12]
 80069d2:	1d1a      	adds	r2, r3, #4
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	9203      	str	r2, [sp, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bfb8      	it	lt
 80069dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80069e0:	3402      	adds	r4, #2
 80069e2:	9305      	str	r3, [sp, #20]
 80069e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ab0 <_svfiprintf_r+0x1fc>
 80069e8:	7821      	ldrb	r1, [r4, #0]
 80069ea:	2203      	movs	r2, #3
 80069ec:	4650      	mov	r0, sl
 80069ee:	f7f9 fbf7 	bl	80001e0 <memchr>
 80069f2:	b140      	cbz	r0, 8006a06 <_svfiprintf_r+0x152>
 80069f4:	2340      	movs	r3, #64	; 0x40
 80069f6:	eba0 000a 	sub.w	r0, r0, sl
 80069fa:	fa03 f000 	lsl.w	r0, r3, r0
 80069fe:	9b04      	ldr	r3, [sp, #16]
 8006a00:	4303      	orrs	r3, r0
 8006a02:	3401      	adds	r4, #1
 8006a04:	9304      	str	r3, [sp, #16]
 8006a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a0a:	4826      	ldr	r0, [pc, #152]	; (8006aa4 <_svfiprintf_r+0x1f0>)
 8006a0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a10:	2206      	movs	r2, #6
 8006a12:	f7f9 fbe5 	bl	80001e0 <memchr>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d038      	beq.n	8006a8c <_svfiprintf_r+0x1d8>
 8006a1a:	4b23      	ldr	r3, [pc, #140]	; (8006aa8 <_svfiprintf_r+0x1f4>)
 8006a1c:	bb1b      	cbnz	r3, 8006a66 <_svfiprintf_r+0x1b2>
 8006a1e:	9b03      	ldr	r3, [sp, #12]
 8006a20:	3307      	adds	r3, #7
 8006a22:	f023 0307 	bic.w	r3, r3, #7
 8006a26:	3308      	adds	r3, #8
 8006a28:	9303      	str	r3, [sp, #12]
 8006a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2c:	4433      	add	r3, r6
 8006a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a30:	e767      	b.n	8006902 <_svfiprintf_r+0x4e>
 8006a32:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a36:	460c      	mov	r4, r1
 8006a38:	2001      	movs	r0, #1
 8006a3a:	e7a5      	b.n	8006988 <_svfiprintf_r+0xd4>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	3401      	adds	r4, #1
 8006a40:	9305      	str	r3, [sp, #20]
 8006a42:	4619      	mov	r1, r3
 8006a44:	f04f 0c0a 	mov.w	ip, #10
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a4e:	3a30      	subs	r2, #48	; 0x30
 8006a50:	2a09      	cmp	r2, #9
 8006a52:	d903      	bls.n	8006a5c <_svfiprintf_r+0x1a8>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0c5      	beq.n	80069e4 <_svfiprintf_r+0x130>
 8006a58:	9105      	str	r1, [sp, #20]
 8006a5a:	e7c3      	b.n	80069e4 <_svfiprintf_r+0x130>
 8006a5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a60:	4604      	mov	r4, r0
 8006a62:	2301      	movs	r3, #1
 8006a64:	e7f0      	b.n	8006a48 <_svfiprintf_r+0x194>
 8006a66:	ab03      	add	r3, sp, #12
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	462a      	mov	r2, r5
 8006a6c:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <_svfiprintf_r+0x1f8>)
 8006a6e:	a904      	add	r1, sp, #16
 8006a70:	4638      	mov	r0, r7
 8006a72:	f3af 8000 	nop.w
 8006a76:	1c42      	adds	r2, r0, #1
 8006a78:	4606      	mov	r6, r0
 8006a7a:	d1d6      	bne.n	8006a2a <_svfiprintf_r+0x176>
 8006a7c:	89ab      	ldrh	r3, [r5, #12]
 8006a7e:	065b      	lsls	r3, r3, #25
 8006a80:	f53f af2c 	bmi.w	80068dc <_svfiprintf_r+0x28>
 8006a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a86:	b01d      	add	sp, #116	; 0x74
 8006a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8c:	ab03      	add	r3, sp, #12
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	462a      	mov	r2, r5
 8006a92:	4b06      	ldr	r3, [pc, #24]	; (8006aac <_svfiprintf_r+0x1f8>)
 8006a94:	a904      	add	r1, sp, #16
 8006a96:	4638      	mov	r0, r7
 8006a98:	f000 f87a 	bl	8006b90 <_printf_i>
 8006a9c:	e7eb      	b.n	8006a76 <_svfiprintf_r+0x1c2>
 8006a9e:	bf00      	nop
 8006aa0:	0800715c 	.word	0x0800715c
 8006aa4:	08007166 	.word	0x08007166
 8006aa8:	00000000 	.word	0x00000000
 8006aac:	080067fd 	.word	0x080067fd
 8006ab0:	08007162 	.word	0x08007162

08006ab4 <_printf_common>:
 8006ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab8:	4616      	mov	r6, r2
 8006aba:	4699      	mov	r9, r3
 8006abc:	688a      	ldr	r2, [r1, #8]
 8006abe:	690b      	ldr	r3, [r1, #16]
 8006ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	bfb8      	it	lt
 8006ac8:	4613      	movlt	r3, r2
 8006aca:	6033      	str	r3, [r6, #0]
 8006acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ad0:	4607      	mov	r7, r0
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	b10a      	cbz	r2, 8006ada <_printf_common+0x26>
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	6033      	str	r3, [r6, #0]
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	0699      	lsls	r1, r3, #26
 8006ade:	bf42      	ittt	mi
 8006ae0:	6833      	ldrmi	r3, [r6, #0]
 8006ae2:	3302      	addmi	r3, #2
 8006ae4:	6033      	strmi	r3, [r6, #0]
 8006ae6:	6825      	ldr	r5, [r4, #0]
 8006ae8:	f015 0506 	ands.w	r5, r5, #6
 8006aec:	d106      	bne.n	8006afc <_printf_common+0x48>
 8006aee:	f104 0a19 	add.w	sl, r4, #25
 8006af2:	68e3      	ldr	r3, [r4, #12]
 8006af4:	6832      	ldr	r2, [r6, #0]
 8006af6:	1a9b      	subs	r3, r3, r2
 8006af8:	42ab      	cmp	r3, r5
 8006afa:	dc26      	bgt.n	8006b4a <_printf_common+0x96>
 8006afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b00:	1e13      	subs	r3, r2, #0
 8006b02:	6822      	ldr	r2, [r4, #0]
 8006b04:	bf18      	it	ne
 8006b06:	2301      	movne	r3, #1
 8006b08:	0692      	lsls	r2, r2, #26
 8006b0a:	d42b      	bmi.n	8006b64 <_printf_common+0xb0>
 8006b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b10:	4649      	mov	r1, r9
 8006b12:	4638      	mov	r0, r7
 8006b14:	47c0      	blx	r8
 8006b16:	3001      	adds	r0, #1
 8006b18:	d01e      	beq.n	8006b58 <_printf_common+0xa4>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	68e5      	ldr	r5, [r4, #12]
 8006b1e:	6832      	ldr	r2, [r6, #0]
 8006b20:	f003 0306 	and.w	r3, r3, #6
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	bf08      	it	eq
 8006b28:	1aad      	subeq	r5, r5, r2
 8006b2a:	68a3      	ldr	r3, [r4, #8]
 8006b2c:	6922      	ldr	r2, [r4, #16]
 8006b2e:	bf0c      	ite	eq
 8006b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b34:	2500      	movne	r5, #0
 8006b36:	4293      	cmp	r3, r2
 8006b38:	bfc4      	itt	gt
 8006b3a:	1a9b      	subgt	r3, r3, r2
 8006b3c:	18ed      	addgt	r5, r5, r3
 8006b3e:	2600      	movs	r6, #0
 8006b40:	341a      	adds	r4, #26
 8006b42:	42b5      	cmp	r5, r6
 8006b44:	d11a      	bne.n	8006b7c <_printf_common+0xc8>
 8006b46:	2000      	movs	r0, #0
 8006b48:	e008      	b.n	8006b5c <_printf_common+0xa8>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	4652      	mov	r2, sl
 8006b4e:	4649      	mov	r1, r9
 8006b50:	4638      	mov	r0, r7
 8006b52:	47c0      	blx	r8
 8006b54:	3001      	adds	r0, #1
 8006b56:	d103      	bne.n	8006b60 <_printf_common+0xac>
 8006b58:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b60:	3501      	adds	r5, #1
 8006b62:	e7c6      	b.n	8006af2 <_printf_common+0x3e>
 8006b64:	18e1      	adds	r1, r4, r3
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	2030      	movs	r0, #48	; 0x30
 8006b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b6e:	4422      	add	r2, r4
 8006b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b78:	3302      	adds	r3, #2
 8006b7a:	e7c7      	b.n	8006b0c <_printf_common+0x58>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	4622      	mov	r2, r4
 8006b80:	4649      	mov	r1, r9
 8006b82:	4638      	mov	r0, r7
 8006b84:	47c0      	blx	r8
 8006b86:	3001      	adds	r0, #1
 8006b88:	d0e6      	beq.n	8006b58 <_printf_common+0xa4>
 8006b8a:	3601      	adds	r6, #1
 8006b8c:	e7d9      	b.n	8006b42 <_printf_common+0x8e>
	...

08006b90 <_printf_i>:
 8006b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	460c      	mov	r4, r1
 8006b96:	4691      	mov	r9, r2
 8006b98:	7e27      	ldrb	r7, [r4, #24]
 8006b9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b9c:	2f78      	cmp	r7, #120	; 0x78
 8006b9e:	4680      	mov	r8, r0
 8006ba0:	469a      	mov	sl, r3
 8006ba2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ba6:	d807      	bhi.n	8006bb8 <_printf_i+0x28>
 8006ba8:	2f62      	cmp	r7, #98	; 0x62
 8006baa:	d80a      	bhi.n	8006bc2 <_printf_i+0x32>
 8006bac:	2f00      	cmp	r7, #0
 8006bae:	f000 80d8 	beq.w	8006d62 <_printf_i+0x1d2>
 8006bb2:	2f58      	cmp	r7, #88	; 0x58
 8006bb4:	f000 80a3 	beq.w	8006cfe <_printf_i+0x16e>
 8006bb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bc0:	e03a      	b.n	8006c38 <_printf_i+0xa8>
 8006bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bc6:	2b15      	cmp	r3, #21
 8006bc8:	d8f6      	bhi.n	8006bb8 <_printf_i+0x28>
 8006bca:	a001      	add	r0, pc, #4	; (adr r0, 8006bd0 <_printf_i+0x40>)
 8006bcc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006bd0:	08006c29 	.word	0x08006c29
 8006bd4:	08006c3d 	.word	0x08006c3d
 8006bd8:	08006bb9 	.word	0x08006bb9
 8006bdc:	08006bb9 	.word	0x08006bb9
 8006be0:	08006bb9 	.word	0x08006bb9
 8006be4:	08006bb9 	.word	0x08006bb9
 8006be8:	08006c3d 	.word	0x08006c3d
 8006bec:	08006bb9 	.word	0x08006bb9
 8006bf0:	08006bb9 	.word	0x08006bb9
 8006bf4:	08006bb9 	.word	0x08006bb9
 8006bf8:	08006bb9 	.word	0x08006bb9
 8006bfc:	08006d49 	.word	0x08006d49
 8006c00:	08006c6d 	.word	0x08006c6d
 8006c04:	08006d2b 	.word	0x08006d2b
 8006c08:	08006bb9 	.word	0x08006bb9
 8006c0c:	08006bb9 	.word	0x08006bb9
 8006c10:	08006d6b 	.word	0x08006d6b
 8006c14:	08006bb9 	.word	0x08006bb9
 8006c18:	08006c6d 	.word	0x08006c6d
 8006c1c:	08006bb9 	.word	0x08006bb9
 8006c20:	08006bb9 	.word	0x08006bb9
 8006c24:	08006d33 	.word	0x08006d33
 8006c28:	680b      	ldr	r3, [r1, #0]
 8006c2a:	1d1a      	adds	r2, r3, #4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	600a      	str	r2, [r1, #0]
 8006c30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e0a3      	b.n	8006d84 <_printf_i+0x1f4>
 8006c3c:	6825      	ldr	r5, [r4, #0]
 8006c3e:	6808      	ldr	r0, [r1, #0]
 8006c40:	062e      	lsls	r6, r5, #24
 8006c42:	f100 0304 	add.w	r3, r0, #4
 8006c46:	d50a      	bpl.n	8006c5e <_printf_i+0xce>
 8006c48:	6805      	ldr	r5, [r0, #0]
 8006c4a:	600b      	str	r3, [r1, #0]
 8006c4c:	2d00      	cmp	r5, #0
 8006c4e:	da03      	bge.n	8006c58 <_printf_i+0xc8>
 8006c50:	232d      	movs	r3, #45	; 0x2d
 8006c52:	426d      	negs	r5, r5
 8006c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c58:	485e      	ldr	r0, [pc, #376]	; (8006dd4 <_printf_i+0x244>)
 8006c5a:	230a      	movs	r3, #10
 8006c5c:	e019      	b.n	8006c92 <_printf_i+0x102>
 8006c5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c62:	6805      	ldr	r5, [r0, #0]
 8006c64:	600b      	str	r3, [r1, #0]
 8006c66:	bf18      	it	ne
 8006c68:	b22d      	sxthne	r5, r5
 8006c6a:	e7ef      	b.n	8006c4c <_printf_i+0xbc>
 8006c6c:	680b      	ldr	r3, [r1, #0]
 8006c6e:	6825      	ldr	r5, [r4, #0]
 8006c70:	1d18      	adds	r0, r3, #4
 8006c72:	6008      	str	r0, [r1, #0]
 8006c74:	0628      	lsls	r0, r5, #24
 8006c76:	d501      	bpl.n	8006c7c <_printf_i+0xec>
 8006c78:	681d      	ldr	r5, [r3, #0]
 8006c7a:	e002      	b.n	8006c82 <_printf_i+0xf2>
 8006c7c:	0669      	lsls	r1, r5, #25
 8006c7e:	d5fb      	bpl.n	8006c78 <_printf_i+0xe8>
 8006c80:	881d      	ldrh	r5, [r3, #0]
 8006c82:	4854      	ldr	r0, [pc, #336]	; (8006dd4 <_printf_i+0x244>)
 8006c84:	2f6f      	cmp	r7, #111	; 0x6f
 8006c86:	bf0c      	ite	eq
 8006c88:	2308      	moveq	r3, #8
 8006c8a:	230a      	movne	r3, #10
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c92:	6866      	ldr	r6, [r4, #4]
 8006c94:	60a6      	str	r6, [r4, #8]
 8006c96:	2e00      	cmp	r6, #0
 8006c98:	bfa2      	ittt	ge
 8006c9a:	6821      	ldrge	r1, [r4, #0]
 8006c9c:	f021 0104 	bicge.w	r1, r1, #4
 8006ca0:	6021      	strge	r1, [r4, #0]
 8006ca2:	b90d      	cbnz	r5, 8006ca8 <_printf_i+0x118>
 8006ca4:	2e00      	cmp	r6, #0
 8006ca6:	d04d      	beq.n	8006d44 <_printf_i+0x1b4>
 8006ca8:	4616      	mov	r6, r2
 8006caa:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cae:	fb03 5711 	mls	r7, r3, r1, r5
 8006cb2:	5dc7      	ldrb	r7, [r0, r7]
 8006cb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cb8:	462f      	mov	r7, r5
 8006cba:	42bb      	cmp	r3, r7
 8006cbc:	460d      	mov	r5, r1
 8006cbe:	d9f4      	bls.n	8006caa <_printf_i+0x11a>
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d10b      	bne.n	8006cdc <_printf_i+0x14c>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	07df      	lsls	r7, r3, #31
 8006cc8:	d508      	bpl.n	8006cdc <_printf_i+0x14c>
 8006cca:	6923      	ldr	r3, [r4, #16]
 8006ccc:	6861      	ldr	r1, [r4, #4]
 8006cce:	4299      	cmp	r1, r3
 8006cd0:	bfde      	ittt	le
 8006cd2:	2330      	movle	r3, #48	; 0x30
 8006cd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cdc:	1b92      	subs	r2, r2, r6
 8006cde:	6122      	str	r2, [r4, #16]
 8006ce0:	f8cd a000 	str.w	sl, [sp]
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	aa03      	add	r2, sp, #12
 8006ce8:	4621      	mov	r1, r4
 8006cea:	4640      	mov	r0, r8
 8006cec:	f7ff fee2 	bl	8006ab4 <_printf_common>
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d14c      	bne.n	8006d8e <_printf_i+0x1fe>
 8006cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf8:	b004      	add	sp, #16
 8006cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cfe:	4835      	ldr	r0, [pc, #212]	; (8006dd4 <_printf_i+0x244>)
 8006d00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	680e      	ldr	r6, [r1, #0]
 8006d08:	061f      	lsls	r7, r3, #24
 8006d0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d0e:	600e      	str	r6, [r1, #0]
 8006d10:	d514      	bpl.n	8006d3c <_printf_i+0x1ac>
 8006d12:	07d9      	lsls	r1, r3, #31
 8006d14:	bf44      	itt	mi
 8006d16:	f043 0320 	orrmi.w	r3, r3, #32
 8006d1a:	6023      	strmi	r3, [r4, #0]
 8006d1c:	b91d      	cbnz	r5, 8006d26 <_printf_i+0x196>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	f023 0320 	bic.w	r3, r3, #32
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	2310      	movs	r3, #16
 8006d28:	e7b0      	b.n	8006c8c <_printf_i+0xfc>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	f043 0320 	orr.w	r3, r3, #32
 8006d30:	6023      	str	r3, [r4, #0]
 8006d32:	2378      	movs	r3, #120	; 0x78
 8006d34:	4828      	ldr	r0, [pc, #160]	; (8006dd8 <_printf_i+0x248>)
 8006d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d3a:	e7e3      	b.n	8006d04 <_printf_i+0x174>
 8006d3c:	065e      	lsls	r6, r3, #25
 8006d3e:	bf48      	it	mi
 8006d40:	b2ad      	uxthmi	r5, r5
 8006d42:	e7e6      	b.n	8006d12 <_printf_i+0x182>
 8006d44:	4616      	mov	r6, r2
 8006d46:	e7bb      	b.n	8006cc0 <_printf_i+0x130>
 8006d48:	680b      	ldr	r3, [r1, #0]
 8006d4a:	6826      	ldr	r6, [r4, #0]
 8006d4c:	6960      	ldr	r0, [r4, #20]
 8006d4e:	1d1d      	adds	r5, r3, #4
 8006d50:	600d      	str	r5, [r1, #0]
 8006d52:	0635      	lsls	r5, r6, #24
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	d501      	bpl.n	8006d5c <_printf_i+0x1cc>
 8006d58:	6018      	str	r0, [r3, #0]
 8006d5a:	e002      	b.n	8006d62 <_printf_i+0x1d2>
 8006d5c:	0671      	lsls	r1, r6, #25
 8006d5e:	d5fb      	bpl.n	8006d58 <_printf_i+0x1c8>
 8006d60:	8018      	strh	r0, [r3, #0]
 8006d62:	2300      	movs	r3, #0
 8006d64:	6123      	str	r3, [r4, #16]
 8006d66:	4616      	mov	r6, r2
 8006d68:	e7ba      	b.n	8006ce0 <_printf_i+0x150>
 8006d6a:	680b      	ldr	r3, [r1, #0]
 8006d6c:	1d1a      	adds	r2, r3, #4
 8006d6e:	600a      	str	r2, [r1, #0]
 8006d70:	681e      	ldr	r6, [r3, #0]
 8006d72:	6862      	ldr	r2, [r4, #4]
 8006d74:	2100      	movs	r1, #0
 8006d76:	4630      	mov	r0, r6
 8006d78:	f7f9 fa32 	bl	80001e0 <memchr>
 8006d7c:	b108      	cbz	r0, 8006d82 <_printf_i+0x1f2>
 8006d7e:	1b80      	subs	r0, r0, r6
 8006d80:	6060      	str	r0, [r4, #4]
 8006d82:	6863      	ldr	r3, [r4, #4]
 8006d84:	6123      	str	r3, [r4, #16]
 8006d86:	2300      	movs	r3, #0
 8006d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d8c:	e7a8      	b.n	8006ce0 <_printf_i+0x150>
 8006d8e:	6923      	ldr	r3, [r4, #16]
 8006d90:	4632      	mov	r2, r6
 8006d92:	4649      	mov	r1, r9
 8006d94:	4640      	mov	r0, r8
 8006d96:	47d0      	blx	sl
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d0ab      	beq.n	8006cf4 <_printf_i+0x164>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	079b      	lsls	r3, r3, #30
 8006da0:	d413      	bmi.n	8006dca <_printf_i+0x23a>
 8006da2:	68e0      	ldr	r0, [r4, #12]
 8006da4:	9b03      	ldr	r3, [sp, #12]
 8006da6:	4298      	cmp	r0, r3
 8006da8:	bfb8      	it	lt
 8006daa:	4618      	movlt	r0, r3
 8006dac:	e7a4      	b.n	8006cf8 <_printf_i+0x168>
 8006dae:	2301      	movs	r3, #1
 8006db0:	4632      	mov	r2, r6
 8006db2:	4649      	mov	r1, r9
 8006db4:	4640      	mov	r0, r8
 8006db6:	47d0      	blx	sl
 8006db8:	3001      	adds	r0, #1
 8006dba:	d09b      	beq.n	8006cf4 <_printf_i+0x164>
 8006dbc:	3501      	adds	r5, #1
 8006dbe:	68e3      	ldr	r3, [r4, #12]
 8006dc0:	9903      	ldr	r1, [sp, #12]
 8006dc2:	1a5b      	subs	r3, r3, r1
 8006dc4:	42ab      	cmp	r3, r5
 8006dc6:	dcf2      	bgt.n	8006dae <_printf_i+0x21e>
 8006dc8:	e7eb      	b.n	8006da2 <_printf_i+0x212>
 8006dca:	2500      	movs	r5, #0
 8006dcc:	f104 0619 	add.w	r6, r4, #25
 8006dd0:	e7f5      	b.n	8006dbe <_printf_i+0x22e>
 8006dd2:	bf00      	nop
 8006dd4:	0800716d 	.word	0x0800716d
 8006dd8:	0800717e 	.word	0x0800717e

08006ddc <memmove>:
 8006ddc:	4288      	cmp	r0, r1
 8006dde:	b510      	push	{r4, lr}
 8006de0:	eb01 0402 	add.w	r4, r1, r2
 8006de4:	d902      	bls.n	8006dec <memmove+0x10>
 8006de6:	4284      	cmp	r4, r0
 8006de8:	4623      	mov	r3, r4
 8006dea:	d807      	bhi.n	8006dfc <memmove+0x20>
 8006dec:	1e43      	subs	r3, r0, #1
 8006dee:	42a1      	cmp	r1, r4
 8006df0:	d008      	beq.n	8006e04 <memmove+0x28>
 8006df2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006df6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dfa:	e7f8      	b.n	8006dee <memmove+0x12>
 8006dfc:	4402      	add	r2, r0
 8006dfe:	4601      	mov	r1, r0
 8006e00:	428a      	cmp	r2, r1
 8006e02:	d100      	bne.n	8006e06 <memmove+0x2a>
 8006e04:	bd10      	pop	{r4, pc}
 8006e06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e0e:	e7f7      	b.n	8006e00 <memmove+0x24>

08006e10 <_free_r>:
 8006e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e12:	2900      	cmp	r1, #0
 8006e14:	d048      	beq.n	8006ea8 <_free_r+0x98>
 8006e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e1a:	9001      	str	r0, [sp, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e22:	bfb8      	it	lt
 8006e24:	18e4      	addlt	r4, r4, r3
 8006e26:	f000 f8d3 	bl	8006fd0 <__malloc_lock>
 8006e2a:	4a20      	ldr	r2, [pc, #128]	; (8006eac <_free_r+0x9c>)
 8006e2c:	9801      	ldr	r0, [sp, #4]
 8006e2e:	6813      	ldr	r3, [r2, #0]
 8006e30:	4615      	mov	r5, r2
 8006e32:	b933      	cbnz	r3, 8006e42 <_free_r+0x32>
 8006e34:	6063      	str	r3, [r4, #4]
 8006e36:	6014      	str	r4, [r2, #0]
 8006e38:	b003      	add	sp, #12
 8006e3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e3e:	f000 b8cd 	b.w	8006fdc <__malloc_unlock>
 8006e42:	42a3      	cmp	r3, r4
 8006e44:	d90b      	bls.n	8006e5e <_free_r+0x4e>
 8006e46:	6821      	ldr	r1, [r4, #0]
 8006e48:	1862      	adds	r2, r4, r1
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	bf04      	itt	eq
 8006e4e:	681a      	ldreq	r2, [r3, #0]
 8006e50:	685b      	ldreq	r3, [r3, #4]
 8006e52:	6063      	str	r3, [r4, #4]
 8006e54:	bf04      	itt	eq
 8006e56:	1852      	addeq	r2, r2, r1
 8006e58:	6022      	streq	r2, [r4, #0]
 8006e5a:	602c      	str	r4, [r5, #0]
 8006e5c:	e7ec      	b.n	8006e38 <_free_r+0x28>
 8006e5e:	461a      	mov	r2, r3
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	b10b      	cbz	r3, 8006e68 <_free_r+0x58>
 8006e64:	42a3      	cmp	r3, r4
 8006e66:	d9fa      	bls.n	8006e5e <_free_r+0x4e>
 8006e68:	6811      	ldr	r1, [r2, #0]
 8006e6a:	1855      	adds	r5, r2, r1
 8006e6c:	42a5      	cmp	r5, r4
 8006e6e:	d10b      	bne.n	8006e88 <_free_r+0x78>
 8006e70:	6824      	ldr	r4, [r4, #0]
 8006e72:	4421      	add	r1, r4
 8006e74:	1854      	adds	r4, r2, r1
 8006e76:	42a3      	cmp	r3, r4
 8006e78:	6011      	str	r1, [r2, #0]
 8006e7a:	d1dd      	bne.n	8006e38 <_free_r+0x28>
 8006e7c:	681c      	ldr	r4, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	6053      	str	r3, [r2, #4]
 8006e82:	4421      	add	r1, r4
 8006e84:	6011      	str	r1, [r2, #0]
 8006e86:	e7d7      	b.n	8006e38 <_free_r+0x28>
 8006e88:	d902      	bls.n	8006e90 <_free_r+0x80>
 8006e8a:	230c      	movs	r3, #12
 8006e8c:	6003      	str	r3, [r0, #0]
 8006e8e:	e7d3      	b.n	8006e38 <_free_r+0x28>
 8006e90:	6825      	ldr	r5, [r4, #0]
 8006e92:	1961      	adds	r1, r4, r5
 8006e94:	428b      	cmp	r3, r1
 8006e96:	bf04      	itt	eq
 8006e98:	6819      	ldreq	r1, [r3, #0]
 8006e9a:	685b      	ldreq	r3, [r3, #4]
 8006e9c:	6063      	str	r3, [r4, #4]
 8006e9e:	bf04      	itt	eq
 8006ea0:	1949      	addeq	r1, r1, r5
 8006ea2:	6021      	streq	r1, [r4, #0]
 8006ea4:	6054      	str	r4, [r2, #4]
 8006ea6:	e7c7      	b.n	8006e38 <_free_r+0x28>
 8006ea8:	b003      	add	sp, #12
 8006eaa:	bd30      	pop	{r4, r5, pc}
 8006eac:	200049c0 	.word	0x200049c0

08006eb0 <_malloc_r>:
 8006eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb2:	1ccd      	adds	r5, r1, #3
 8006eb4:	f025 0503 	bic.w	r5, r5, #3
 8006eb8:	3508      	adds	r5, #8
 8006eba:	2d0c      	cmp	r5, #12
 8006ebc:	bf38      	it	cc
 8006ebe:	250c      	movcc	r5, #12
 8006ec0:	2d00      	cmp	r5, #0
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	db01      	blt.n	8006eca <_malloc_r+0x1a>
 8006ec6:	42a9      	cmp	r1, r5
 8006ec8:	d903      	bls.n	8006ed2 <_malloc_r+0x22>
 8006eca:	230c      	movs	r3, #12
 8006ecc:	6033      	str	r3, [r6, #0]
 8006ece:	2000      	movs	r0, #0
 8006ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ed2:	f000 f87d 	bl	8006fd0 <__malloc_lock>
 8006ed6:	4921      	ldr	r1, [pc, #132]	; (8006f5c <_malloc_r+0xac>)
 8006ed8:	680a      	ldr	r2, [r1, #0]
 8006eda:	4614      	mov	r4, r2
 8006edc:	b99c      	cbnz	r4, 8006f06 <_malloc_r+0x56>
 8006ede:	4f20      	ldr	r7, [pc, #128]	; (8006f60 <_malloc_r+0xb0>)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	b923      	cbnz	r3, 8006eee <_malloc_r+0x3e>
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	f000 f862 	bl	8006fb0 <_sbrk_r>
 8006eec:	6038      	str	r0, [r7, #0]
 8006eee:	4629      	mov	r1, r5
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f000 f85d 	bl	8006fb0 <_sbrk_r>
 8006ef6:	1c43      	adds	r3, r0, #1
 8006ef8:	d123      	bne.n	8006f42 <_malloc_r+0x92>
 8006efa:	230c      	movs	r3, #12
 8006efc:	6033      	str	r3, [r6, #0]
 8006efe:	4630      	mov	r0, r6
 8006f00:	f000 f86c 	bl	8006fdc <__malloc_unlock>
 8006f04:	e7e3      	b.n	8006ece <_malloc_r+0x1e>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	1b5b      	subs	r3, r3, r5
 8006f0a:	d417      	bmi.n	8006f3c <_malloc_r+0x8c>
 8006f0c:	2b0b      	cmp	r3, #11
 8006f0e:	d903      	bls.n	8006f18 <_malloc_r+0x68>
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	441c      	add	r4, r3
 8006f14:	6025      	str	r5, [r4, #0]
 8006f16:	e004      	b.n	8006f22 <_malloc_r+0x72>
 8006f18:	6863      	ldr	r3, [r4, #4]
 8006f1a:	42a2      	cmp	r2, r4
 8006f1c:	bf0c      	ite	eq
 8006f1e:	600b      	streq	r3, [r1, #0]
 8006f20:	6053      	strne	r3, [r2, #4]
 8006f22:	4630      	mov	r0, r6
 8006f24:	f000 f85a 	bl	8006fdc <__malloc_unlock>
 8006f28:	f104 000b 	add.w	r0, r4, #11
 8006f2c:	1d23      	adds	r3, r4, #4
 8006f2e:	f020 0007 	bic.w	r0, r0, #7
 8006f32:	1ac2      	subs	r2, r0, r3
 8006f34:	d0cc      	beq.n	8006ed0 <_malloc_r+0x20>
 8006f36:	1a1b      	subs	r3, r3, r0
 8006f38:	50a3      	str	r3, [r4, r2]
 8006f3a:	e7c9      	b.n	8006ed0 <_malloc_r+0x20>
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	6864      	ldr	r4, [r4, #4]
 8006f40:	e7cc      	b.n	8006edc <_malloc_r+0x2c>
 8006f42:	1cc4      	adds	r4, r0, #3
 8006f44:	f024 0403 	bic.w	r4, r4, #3
 8006f48:	42a0      	cmp	r0, r4
 8006f4a:	d0e3      	beq.n	8006f14 <_malloc_r+0x64>
 8006f4c:	1a21      	subs	r1, r4, r0
 8006f4e:	4630      	mov	r0, r6
 8006f50:	f000 f82e 	bl	8006fb0 <_sbrk_r>
 8006f54:	3001      	adds	r0, #1
 8006f56:	d1dd      	bne.n	8006f14 <_malloc_r+0x64>
 8006f58:	e7cf      	b.n	8006efa <_malloc_r+0x4a>
 8006f5a:	bf00      	nop
 8006f5c:	200049c0 	.word	0x200049c0
 8006f60:	200049c4 	.word	0x200049c4

08006f64 <_realloc_r>:
 8006f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f66:	4607      	mov	r7, r0
 8006f68:	4614      	mov	r4, r2
 8006f6a:	460e      	mov	r6, r1
 8006f6c:	b921      	cbnz	r1, 8006f78 <_realloc_r+0x14>
 8006f6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f72:	4611      	mov	r1, r2
 8006f74:	f7ff bf9c 	b.w	8006eb0 <_malloc_r>
 8006f78:	b922      	cbnz	r2, 8006f84 <_realloc_r+0x20>
 8006f7a:	f7ff ff49 	bl	8006e10 <_free_r>
 8006f7e:	4625      	mov	r5, r4
 8006f80:	4628      	mov	r0, r5
 8006f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f84:	f000 f830 	bl	8006fe8 <_malloc_usable_size_r>
 8006f88:	42a0      	cmp	r0, r4
 8006f8a:	d20f      	bcs.n	8006fac <_realloc_r+0x48>
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	4638      	mov	r0, r7
 8006f90:	f7ff ff8e 	bl	8006eb0 <_malloc_r>
 8006f94:	4605      	mov	r5, r0
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d0f2      	beq.n	8006f80 <_realloc_r+0x1c>
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4622      	mov	r2, r4
 8006f9e:	f7ff fbf7 	bl	8006790 <memcpy>
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	4638      	mov	r0, r7
 8006fa6:	f7ff ff33 	bl	8006e10 <_free_r>
 8006faa:	e7e9      	b.n	8006f80 <_realloc_r+0x1c>
 8006fac:	4635      	mov	r5, r6
 8006fae:	e7e7      	b.n	8006f80 <_realloc_r+0x1c>

08006fb0 <_sbrk_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4d06      	ldr	r5, [pc, #24]	; (8006fcc <_sbrk_r+0x1c>)
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	602b      	str	r3, [r5, #0]
 8006fbc:	f7fa fb20 	bl	8001600 <_sbrk>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d102      	bne.n	8006fca <_sbrk_r+0x1a>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	b103      	cbz	r3, 8006fca <_sbrk_r+0x1a>
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	20004b08 	.word	0x20004b08

08006fd0 <__malloc_lock>:
 8006fd0:	4801      	ldr	r0, [pc, #4]	; (8006fd8 <__malloc_lock+0x8>)
 8006fd2:	f000 b811 	b.w	8006ff8 <__retarget_lock_acquire_recursive>
 8006fd6:	bf00      	nop
 8006fd8:	20004b10 	.word	0x20004b10

08006fdc <__malloc_unlock>:
 8006fdc:	4801      	ldr	r0, [pc, #4]	; (8006fe4 <__malloc_unlock+0x8>)
 8006fde:	f000 b80c 	b.w	8006ffa <__retarget_lock_release_recursive>
 8006fe2:	bf00      	nop
 8006fe4:	20004b10 	.word	0x20004b10

08006fe8 <_malloc_usable_size_r>:
 8006fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fec:	1f18      	subs	r0, r3, #4
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	bfbc      	itt	lt
 8006ff2:	580b      	ldrlt	r3, [r1, r0]
 8006ff4:	18c0      	addlt	r0, r0, r3
 8006ff6:	4770      	bx	lr

08006ff8 <__retarget_lock_acquire_recursive>:
 8006ff8:	4770      	bx	lr

08006ffa <__retarget_lock_release_recursive>:
 8006ffa:	4770      	bx	lr

08006ffc <_init>:
 8006ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffe:	bf00      	nop
 8007000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007002:	bc08      	pop	{r3}
 8007004:	469e      	mov	lr, r3
 8007006:	4770      	bx	lr

08007008 <_fini>:
 8007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700a:	bf00      	nop
 800700c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700e:	bc08      	pop	{r3}
 8007010:	469e      	mov	lr, r3
 8007012:	4770      	bx	lr
