
cut_loss_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006df4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08006f94  08006f94  00016f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007110  08007110  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007110  08007110  00017110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007118  08007118  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007118  08007118  00017118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800711c  0800711c  0001711c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a90  20000084  080071a4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b14  080071a4  00024b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019257  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f9f  00000000  00000000  0003930b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  0003c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003d4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000031da  00000000  00000000  0003e610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c89  00000000  00000000  000417ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db4d  00000000  00000000  00056473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3fc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000518c  00000000  00000000  000f4014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f7c 	.word	0x08006f7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08006f7c 	.word	0x08006f7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96e 	b.w	80009fc <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468c      	mov	ip, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8083 	bne.w	800084e <__udivmoddi4+0x116>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d947      	bls.n	80007de <__udivmoddi4+0xa6>
 800074e:	fab2 f282 	clz	r2, r2
 8000752:	b142      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000754:	f1c2 0020 	rsb	r0, r2, #32
 8000758:	fa24 f000 	lsr.w	r0, r4, r0
 800075c:	4091      	lsls	r1, r2
 800075e:	4097      	lsls	r7, r2
 8000760:	ea40 0c01 	orr.w	ip, r0, r1
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbbc f6f8 	udiv	r6, ip, r8
 8000770:	fa1f fe87 	uxth.w	lr, r7
 8000774:	fb08 c116 	mls	r1, r8, r6, ip
 8000778:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077c:	fb06 f10e 	mul.w	r1, r6, lr
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	f106 30ff 	add.w	r0, r6, #4294967295
 800078a:	f080 8119 	bcs.w	80009c0 <__udivmoddi4+0x288>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8116 	bls.w	80009c0 <__udivmoddi4+0x288>
 8000794:	3e02      	subs	r6, #2
 8000796:	443b      	add	r3, r7
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a0:	fb08 3310 	mls	r3, r8, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	193c      	adds	r4, r7, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8105 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 80007ba:	45a6      	cmp	lr, r4
 80007bc:	f240 8102 	bls.w	80009c4 <__udivmoddi4+0x28c>
 80007c0:	3802      	subs	r0, #2
 80007c2:	443c      	add	r4, r7
 80007c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	2600      	movs	r6, #0
 80007ce:	b11d      	cbz	r5, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c5 4300 	strd	r4, r3, [r5]
 80007d8:	4631      	mov	r1, r6
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	b902      	cbnz	r2, 80007e2 <__udivmoddi4+0xaa>
 80007e0:	deff      	udf	#255	; 0xff
 80007e2:	fab2 f282 	clz	r2, r2
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d150      	bne.n	800088c <__udivmoddi4+0x154>
 80007ea:	1bcb      	subs	r3, r1, r7
 80007ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	2601      	movs	r6, #1
 80007f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007fa:	0c21      	lsrs	r1, r4, #16
 80007fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb08 f30c 	mul.w	r3, r8, ip
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0xe4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0xe2>
 8000814:	428b      	cmp	r3, r1
 8000816:	f200 80e9 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 800081a:	4684      	mov	ip, r0
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1110 	mls	r1, lr, r0, r1
 8000828:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x10c>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x10a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80d9 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e7bf      	b.n	80007ce <__udivmoddi4+0x96>
 800084e:	428b      	cmp	r3, r1
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x12e>
 8000852:	2d00      	cmp	r5, #0
 8000854:	f000 80b1 	beq.w	80009ba <__udivmoddi4+0x282>
 8000858:	2600      	movs	r6, #0
 800085a:	e9c5 0100 	strd	r0, r1, [r5]
 800085e:	4630      	mov	r0, r6
 8000860:	4631      	mov	r1, r6
 8000862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000866:	fab3 f683 	clz	r6, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d14a      	bne.n	8000904 <__udivmoddi4+0x1cc>
 800086e:	428b      	cmp	r3, r1
 8000870:	d302      	bcc.n	8000878 <__udivmoddi4+0x140>
 8000872:	4282      	cmp	r2, r0
 8000874:	f200 80b8 	bhi.w	80009e8 <__udivmoddi4+0x2b0>
 8000878:	1a84      	subs	r4, r0, r2
 800087a:	eb61 0103 	sbc.w	r1, r1, r3
 800087e:	2001      	movs	r0, #1
 8000880:	468c      	mov	ip, r1
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0a8      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000886:	e9c5 4c00 	strd	r4, ip, [r5]
 800088a:	e7a5      	b.n	80007d8 <__udivmoddi4+0xa0>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f603 	lsr.w	r6, r0, r3
 8000894:	4097      	lsls	r7, r2
 8000896:	fa01 f002 	lsl.w	r0, r1, r2
 800089a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089e:	40d9      	lsrs	r1, r3
 80008a0:	4330      	orrs	r0, r6
 80008a2:	0c03      	lsrs	r3, r0, #16
 80008a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008a8:	fa1f f887 	uxth.w	r8, r7
 80008ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80008b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b4:	fb06 f108 	mul.w	r1, r6, r8
 80008b8:	4299      	cmp	r1, r3
 80008ba:	fa04 f402 	lsl.w	r4, r4, r2
 80008be:	d909      	bls.n	80008d4 <__udivmoddi4+0x19c>
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008c6:	f080 808d 	bcs.w	80009e4 <__udivmoddi4+0x2ac>
 80008ca:	4299      	cmp	r1, r3
 80008cc:	f240 808a 	bls.w	80009e4 <__udivmoddi4+0x2ac>
 80008d0:	3e02      	subs	r6, #2
 80008d2:	443b      	add	r3, r7
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b281      	uxth	r1, r0
 80008d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e4:	fb00 f308 	mul.w	r3, r0, r8
 80008e8:	428b      	cmp	r3, r1
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x1c4>
 80008ec:	1879      	adds	r1, r7, r1
 80008ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f2:	d273      	bcs.n	80009dc <__udivmoddi4+0x2a4>
 80008f4:	428b      	cmp	r3, r1
 80008f6:	d971      	bls.n	80009dc <__udivmoddi4+0x2a4>
 80008f8:	3802      	subs	r0, #2
 80008fa:	4439      	add	r1, r7
 80008fc:	1acb      	subs	r3, r1, r3
 80008fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000902:	e778      	b.n	80007f6 <__udivmoddi4+0xbe>
 8000904:	f1c6 0c20 	rsb	ip, r6, #32
 8000908:	fa03 f406 	lsl.w	r4, r3, r6
 800090c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000910:	431c      	orrs	r4, r3
 8000912:	fa20 f70c 	lsr.w	r7, r0, ip
 8000916:	fa01 f306 	lsl.w	r3, r1, r6
 800091a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800091e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000922:	431f      	orrs	r7, r3
 8000924:	0c3b      	lsrs	r3, r7, #16
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fa1f f884 	uxth.w	r8, r4
 800092e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000932:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000936:	fb09 fa08 	mul.w	sl, r9, r8
 800093a:	458a      	cmp	sl, r1
 800093c:	fa02 f206 	lsl.w	r2, r2, r6
 8000940:	fa00 f306 	lsl.w	r3, r0, r6
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x220>
 8000946:	1861      	adds	r1, r4, r1
 8000948:	f109 30ff 	add.w	r0, r9, #4294967295
 800094c:	d248      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 800094e:	458a      	cmp	sl, r1
 8000950:	d946      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 8000952:	f1a9 0902 	sub.w	r9, r9, #2
 8000956:	4421      	add	r1, r4
 8000958:	eba1 010a 	sub.w	r1, r1, sl
 800095c:	b2bf      	uxth	r7, r7
 800095e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000962:	fb0e 1110 	mls	r1, lr, r0, r1
 8000966:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800096a:	fb00 f808 	mul.w	r8, r0, r8
 800096e:	45b8      	cmp	r8, r7
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x24a>
 8000972:	19e7      	adds	r7, r4, r7
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d22e      	bcs.n	80009d8 <__udivmoddi4+0x2a0>
 800097a:	45b8      	cmp	r8, r7
 800097c:	d92c      	bls.n	80009d8 <__udivmoddi4+0x2a0>
 800097e:	3802      	subs	r0, #2
 8000980:	4427      	add	r7, r4
 8000982:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000986:	eba7 0708 	sub.w	r7, r7, r8
 800098a:	fba0 8902 	umull	r8, r9, r0, r2
 800098e:	454f      	cmp	r7, r9
 8000990:	46c6      	mov	lr, r8
 8000992:	4649      	mov	r1, r9
 8000994:	d31a      	bcc.n	80009cc <__udivmoddi4+0x294>
 8000996:	d017      	beq.n	80009c8 <__udivmoddi4+0x290>
 8000998:	b15d      	cbz	r5, 80009b2 <__udivmoddi4+0x27a>
 800099a:	ebb3 020e 	subs.w	r2, r3, lr
 800099e:	eb67 0701 	sbc.w	r7, r7, r1
 80009a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009a6:	40f2      	lsrs	r2, r6
 80009a8:	ea4c 0202 	orr.w	r2, ip, r2
 80009ac:	40f7      	lsrs	r7, r6
 80009ae:	e9c5 2700 	strd	r2, r7, [r5]
 80009b2:	2600      	movs	r6, #0
 80009b4:	4631      	mov	r1, r6
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e70b      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0x60>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6fd      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009c8:	4543      	cmp	r3, r8
 80009ca:	d2e5      	bcs.n	8000998 <__udivmoddi4+0x260>
 80009cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009d0:	eb69 0104 	sbc.w	r1, r9, r4
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7df      	b.n	8000998 <__udivmoddi4+0x260>
 80009d8:	4608      	mov	r0, r1
 80009da:	e7d2      	b.n	8000982 <__udivmoddi4+0x24a>
 80009dc:	4660      	mov	r0, ip
 80009de:	e78d      	b.n	80008fc <__udivmoddi4+0x1c4>
 80009e0:	4681      	mov	r9, r0
 80009e2:	e7b9      	b.n	8000958 <__udivmoddi4+0x220>
 80009e4:	4666      	mov	r6, ip
 80009e6:	e775      	b.n	80008d4 <__udivmoddi4+0x19c>
 80009e8:	4630      	mov	r0, r6
 80009ea:	e74a      	b.n	8000882 <__udivmoddi4+0x14a>
 80009ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f0:	4439      	add	r1, r7
 80009f2:	e713      	b.n	800081c <__udivmoddi4+0xe4>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	e724      	b.n	8000844 <__udivmoddi4+0x10c>
 80009fa:	bf00      	nop

080009fc <__aeabi_idiv0>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <hx711_delay_us>:
/**
 * Use for delay in microsecond (Reference to clock speed) by called assembly instruction NOP
 * Credit to https://github.com/nimaltd/HX711/blob/a5a317e818fee1aa02c729257cff0308e5ac61c0/hx711.c#L10
 */

void hx711_delay_us(uint32_t delay) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	while (delay > 0) {
 8000a08:	e003      	b.n	8000a12 <hx711_delay_us+0x12>
		delay--;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
		asm("NOP");
 8000a10:	bf00      	nop
	while (delay > 0) {
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f8      	bne.n	8000a0a <hx711_delay_us+0xa>
	}
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <read_weight>:
/**
 *  All credit to
 *	- https://cdn.sparkfun.com/datasheets/Sensors/ForceFlex/hx711_english.pdf
 *	- https://github.com/nimaltd/HX711/blob/master/hx711.c
 */
uint32_t read_weight(uint8_t tuning) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	uint32_t count = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
	uint32_t startTime = HAL_GetTick();
 8000a36:	f000 fe77 	bl	8001728 <HAL_GetTick>
 8000a3a:	60b8      	str	r0, [r7, #8]
	uint8_t found = 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	74fb      	strb	r3, [r7, #19]
	while (HAL_GPIO_ReadPin(Weight_SDA_GPIO_Port, Weight_SDA_Pin)) {
 8000a40:	e00c      	b.n	8000a5c <read_weight+0x34>
		osDelay(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f003 f8b6 	bl	8003bb4 <osDelay>

		// Timeout
		if (HAL_GetTick() - startTime > 150) {
 8000a48:	f000 fe6e 	bl	8001728 <HAL_GetTick>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	2b96      	cmp	r3, #150	; 0x96
 8000a54:	d902      	bls.n	8000a5c <read_weight+0x34>
			found = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	74fb      	strb	r3, [r7, #19]
			break;
 8000a5a:	e007      	b.n	8000a6c <read_weight+0x44>
	while (HAL_GPIO_ReadPin(Weight_SDA_GPIO_Port, Weight_SDA_Pin)) {
 8000a5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a60:	4825      	ldr	r0, [pc, #148]	; (8000af8 <read_weight+0xd0>)
 8000a62:	f001 fcb9 	bl	80023d8 <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1ea      	bne.n	8000a42 <read_weight+0x1a>
		}
	}

	if (!found) {
 8000a6c:	7cfb      	ldrb	r3, [r7, #19]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <read_weight+0x4e>
		return 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e03c      	b.n	8000af0 <read_weight+0xc8>
	}

	for (int i = 0; i < 24; ++i) {
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	e022      	b.n	8000ac2 <read_weight+0x9a>
		HAL_GPIO_WritePin(Weight_SCK_GPIO_Port, Weight_SCK_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a82:	481d      	ldr	r0, [pc, #116]	; (8000af8 <read_weight+0xd0>)
 8000a84:	f001 fcc0 	bl	8002408 <HAL_GPIO_WritePin>
		hx711_delay_us(100);
 8000a88:	2064      	movs	r0, #100	; 0x64
 8000a8a:	f7ff ffb9 	bl	8000a00 <hx711_delay_us>

		count <<= 1;
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	617b      	str	r3, [r7, #20]

		HAL_GPIO_WritePin(Weight_SCK_GPIO_Port, Weight_SCK_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9a:	4817      	ldr	r0, [pc, #92]	; (8000af8 <read_weight+0xd0>)
 8000a9c:	f001 fcb4 	bl	8002408 <HAL_GPIO_WritePin>
		hx711_delay_us(100);
 8000aa0:	2064      	movs	r0, #100	; 0x64
 8000aa2:	f7ff ffad 	bl	8000a00 <hx711_delay_us>
		if (HAL_GPIO_ReadPin(Weight_SDA_GPIO_Port, Weight_SDA_Pin)
 8000aa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aaa:	4813      	ldr	r0, [pc, #76]	; (8000af8 <read_weight+0xd0>)
 8000aac:	f001 fc94 	bl	80023d8 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d102      	bne.n	8000abc <read_weight+0x94>
				== GPIO_PIN_SET)
			++count;
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 24; ++i) {
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2b17      	cmp	r3, #23
 8000ac6:	ddd9      	ble.n	8000a7c <read_weight+0x54>
	}

	count ^= 0x800000;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8000ace:	617b      	str	r3, [r7, #20]

	if (tuning == 1)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d101      	bne.n	8000ada <read_weight+0xb2>
		return count;
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	e00a      	b.n	8000af0 <read_weight+0xc8>
	if (count < base_weight)
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <read_weight+0xd4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d201      	bcs.n	8000ae8 <read_weight+0xc0>
		return 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	e003      	b.n	8000af0 <read_weight+0xc8>
	return (count - base_weight);
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <read_weight+0xd4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	1ad3      	subs	r3, r2, r3
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40020000 	.word	0x40020000
 8000afc:	200000a0 	.word	0x200000a0

08000b00 <read_weight_average>:

uint32_t read_weight_average() {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
	uint32_t now = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AVERAGE_ROUND; ++i) {
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	e00f      	b.n	8000b30 <read_weight_average+0x30>
		uint32_t nxt = read_weight(0) / divider;
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff ff89 	bl	8000a28 <read_weight>
 8000b16:	4602      	mov	r2, r0
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <read_weight_average+0x5c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b20:	607b      	str	r3, [r7, #4]

		now += nxt;
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AVERAGE_ROUND; ++i) {
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	220f      	movs	r2, #15
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d3eb      	bcc.n	8000b10 <read_weight_average+0x10>
	}

	if (now <= result_offset)
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <read_weight_average+0x60>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d801      	bhi.n	8000b46 <read_weight_average+0x46>
		return 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e006      	b.n	8000b54 <read_weight_average+0x54>
	return ((now - result_offset) / AVERAGE_ROUND);
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <read_weight_average+0x60>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	220f      	movs	r2, #15
 8000b50:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000004 	.word	0x20000004
 8000b60:	20000000 	.word	0x20000000

08000b64 <set_zero_weight>:

void set_zero_weight() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
	uint32_t now = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AVERAGE_ROUND; ++i) {
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	e011      	b.n	8000b98 <set_zero_weight+0x34>
		uint32_t nxt = read_weight(1);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff ff57 	bl	8000a28 <read_weight>
 8000b7a:	6078      	str	r0, [r7, #4]
		now += nxt;
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
		if (nxt == 0) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d103      	bne.n	8000b92 <set_zero_weight+0x2e>
			--i;
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
			continue;
 8000b90:	bf00      	nop
	for (int i = 0; i < AVERAGE_ROUND; ++i) {
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	3301      	adds	r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	220f      	movs	r2, #15
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d3e9      	bcc.n	8000b74 <set_zero_weight+0x10>
		}
	}

	now /= AVERAGE_ROUND;
 8000ba0:	220f      	movs	r2, #15
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]
	base_weight = now;
 8000baa:	4a03      	ldr	r2, [pc, #12]	; (8000bb8 <set_zero_weight+0x54>)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200000a0 	.word	0x200000a0

08000bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc2:	f000 fd4b 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc6:	f000 f891 	bl	8000cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bca:	f000 f9a1 	bl	8000f10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bce:	f000 f975 	bl	8000ebc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bd2:	f000 f945 	bl	8000e60 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000bd6:	f000 f8f1 	bl	8000dbc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	// Set zero weight
	for (int i = 0; i < 10; ++i) {
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	e004      	b.n	8000bea <main+0x2e>
		set_zero_weight();
 8000be0:	f7ff ffc0 	bl	8000b64 <set_zero_weight>
	for (int i = 0; i < 10; ++i) {
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3301      	adds	r3, #1
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b09      	cmp	r3, #9
 8000bee:	ddf7      	ble.n	8000be0 <main+0x24>
	}

	// ESP Connection Testing
	HAL_StatusTypeDef esp_check;
	while (1) {
		esp_check = HAL_I2C_Slave_Transmit(&hi2c1, "04", 2, 10000);
 8000bf0:	f242 7310 	movw	r3, #10000	; 0x2710
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	4929      	ldr	r1, [pc, #164]	; (8000c9c <main+0xe0>)
 8000bf8:	4829      	ldr	r0, [pc, #164]	; (8000ca0 <main+0xe4>)
 8000bfa:	f001 fd63 	bl	80026c4 <HAL_I2C_Slave_Transmit>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	70fb      	strb	r3, [r7, #3]
		esp_check |= HAL_I2C_Slave_Transmit(&hi2c1, "Test", 4, 10000);
 8000c02:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c06:	2204      	movs	r2, #4
 8000c08:	4926      	ldr	r1, [pc, #152]	; (8000ca4 <main+0xe8>)
 8000c0a:	4825      	ldr	r0, [pc, #148]	; (8000ca0 <main+0xe4>)
 8000c0c:	f001 fd5a 	bl	80026c4 <HAL_I2C_Slave_Transmit>
 8000c10:	4603      	mov	r3, r0
 8000c12:	461a      	mov	r2, r3
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	70fb      	strb	r3, [r7, #3]

		if (esp_check == HAL_OK)
 8000c1a:	78fb      	ldrb	r3, [r7, #3]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d00b      	beq.n	8000c38 <main+0x7c>
			break;
		HAL_UART_Transmit(&huart2, "Failed to reach esp8266. Retrying\r\n", 35,
 8000c20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c24:	2223      	movs	r2, #35	; 0x23
 8000c26:	4920      	ldr	r1, [pc, #128]	; (8000ca8 <main+0xec>)
 8000c28:	4820      	ldr	r0, [pc, #128]	; (8000cac <main+0xf0>)
 8000c2a:	f002 fbea 	bl	8003402 <HAL_UART_Transmit>
				1000);
		HAL_Delay(1000);
 8000c2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c32:	f000 fd85 	bl	8001740 <HAL_Delay>
		esp_check = HAL_I2C_Slave_Transmit(&hi2c1, "04", 2, 10000);
 8000c36:	e7db      	b.n	8000bf0 <main+0x34>
			break;
 8000c38:	bf00      	nop
	}

	// Set LED on board to tell that Program is ready
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	481c      	ldr	r0, [pc, #112]	; (8000cb0 <main+0xf4>)
 8000c40:	f001 fbe2 	bl	8002408 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c44:	f002 feda 	bl	80039fc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of WeightMutex */
  WeightMutexHandle = osMutexNew(&WeightMutex_attributes);
 8000c48:	481a      	ldr	r0, [pc, #104]	; (8000cb4 <main+0xf8>)
 8000c4a:	f002 ffce 	bl	8003bea <osMutexNew>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <main+0xfc>)
 8000c52:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c54:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <main+0x100>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4819      	ldr	r0, [pc, #100]	; (8000cc0 <main+0x104>)
 8000c5a:	f002 ff19 	bl	8003a90 <osThreadNew>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <main+0x108>)
 8000c62:	6013      	str	r3, [r2, #0]

  /* creation of weightSensing */
  weightSensingHandle = osThreadNew(StartWeightSense, NULL, &weightSensing_attributes);
 8000c64:	4a18      	ldr	r2, [pc, #96]	; (8000cc8 <main+0x10c>)
 8000c66:	2100      	movs	r1, #0
 8000c68:	4818      	ldr	r0, [pc, #96]	; (8000ccc <main+0x110>)
 8000c6a:	f002 ff11 	bl	8003a90 <osThreadNew>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <main+0x114>)
 8000c72:	6013      	str	r3, [r2, #0]

  /* creation of resetWeight */
  resetWeightHandle = osThreadNew(ResetWeightHandle, NULL, &resetWeight_attributes);
 8000c74:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <main+0x118>)
 8000c76:	2100      	movs	r1, #0
 8000c78:	4817      	ldr	r0, [pc, #92]	; (8000cd8 <main+0x11c>)
 8000c7a:	f002 ff09 	bl	8003a90 <osThreadNew>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4a16      	ldr	r2, [pc, #88]	; (8000cdc <main+0x120>)
 8000c82:	6013      	str	r3, [r2, #0]

  /* creation of ledDisplay */
  ledDisplayHandle = osThreadNew(StartWatchLDR, NULL, &ledDisplay_attributes);
 8000c84:	4a16      	ldr	r2, [pc, #88]	; (8000ce0 <main+0x124>)
 8000c86:	2100      	movs	r1, #0
 8000c88:	4816      	ldr	r0, [pc, #88]	; (8000ce4 <main+0x128>)
 8000c8a:	f002 ff01 	bl	8003a90 <osThreadNew>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <main+0x12c>)
 8000c92:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c94:	f002 fed6 	bl	8003a44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c98:	e7fe      	b.n	8000c98 <main+0xdc>
 8000c9a:	bf00      	nop
 8000c9c:	08006fd4 	.word	0x08006fd4
 8000ca0:	200049d0 	.word	0x200049d0
 8000ca4:	08006fd8 	.word	0x08006fd8
 8000ca8:	08006fe0 	.word	0x08006fe0
 8000cac:	20004a7c 	.word	0x20004a7c
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	080070b4 	.word	0x080070b4
 8000cb8:	20004a78 	.word	0x20004a78
 8000cbc:	08007024 	.word	0x08007024
 8000cc0:	08001035 	.word	0x08001035
 8000cc4:	200049cc 	.word	0x200049cc
 8000cc8:	08007048 	.word	0x08007048
 8000ccc:	08001045 	.word	0x08001045
 8000cd0:	20004a74 	.word	0x20004a74
 8000cd4:	0800706c 	.word	0x0800706c
 8000cd8:	080011b5 	.word	0x080011b5
 8000cdc:	20004a28 	.word	0x20004a28
 8000ce0:	08007090 	.word	0x08007090
 8000ce4:	08001229 	.word	0x08001229
 8000ce8:	20004a24 	.word	0x20004a24

08000cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b094      	sub	sp, #80	; 0x50
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	2230      	movs	r2, #48	; 0x30
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f005 fd16 	bl	800672c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <SystemClock_Config+0xc8>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	4a26      	ldr	r2, [pc, #152]	; (8000db4 <SystemClock_Config+0xc8>)
 8000d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <SystemClock_Config+0xc8>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <SystemClock_Config+0xcc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a20      	ldr	r2, [pc, #128]	; (8000db8 <SystemClock_Config+0xcc>)
 8000d36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <SystemClock_Config+0xcc>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d50:	2310      	movs	r3, #16
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d54:	2302      	movs	r3, #2
 8000d56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000d60:	2332      	movs	r3, #50	; 0x32
 8000d62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 fe85 	bl	8002a80 <HAL_RCC_OscConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d7c:	f000 fad2 	bl	8001324 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d80:	230f      	movs	r3, #15
 8000d82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d84:	2302      	movs	r3, #2
 8000d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 f8e7 	bl	8002f70 <HAL_RCC_ClockConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000da8:	f000 fabc 	bl	8001324 <Error_Handler>
  }
}
 8000dac:	bf00      	nop
 8000dae:	3750      	adds	r7, #80	; 0x50
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40007000 	.word	0x40007000

08000dbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000dd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dfc:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <MX_ADC1_Init+0xa0>)
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e1a:	480e      	ldr	r0, [pc, #56]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e1c:	f000 fcb4 	bl	8001788 <HAL_ADC_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e26:	f000 fa7d 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4806      	ldr	r0, [pc, #24]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e3c:	f000 fe34 	bl	8001aa8 <HAL_ADC_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e46:	f000 fa6d 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20004a2c 	.word	0x20004a2c
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	0f000001 	.word	0x0f000001

08000e60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e66:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <MX_I2C1_Init+0x54>)
 8000e68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e6c:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <MX_I2C1_Init+0x58>)
 8000e6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 2;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e9e:	f001 facd 	bl	800243c <HAL_I2C_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ea8:	f000 fa3c 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200049d0 	.word	0x200049d0
 8000eb4:	40005400 	.word	0x40005400
 8000eb8:	000186a0 	.word	0x000186a0

08000ebc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <MX_USART2_UART_Init+0x50>)
 8000ec4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ecc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	f002 fa38 	bl	8003368 <HAL_UART_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000efe:	f000 fa11 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20004a7c 	.word	0x20004a7c
 8000f0c:	40004400 	.word	0x40004400

08000f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <MX_GPIO_Init+0x118>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a3e      	ldr	r2, [pc, #248]	; (8001028 <MX_GPIO_Init+0x118>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <MX_GPIO_Init+0x118>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b38      	ldr	r3, [pc, #224]	; (8001028 <MX_GPIO_Init+0x118>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a37      	ldr	r2, [pc, #220]	; (8001028 <MX_GPIO_Init+0x118>)
 8000f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b35      	ldr	r3, [pc, #212]	; (8001028 <MX_GPIO_Init+0x118>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b31      	ldr	r3, [pc, #196]	; (8001028 <MX_GPIO_Init+0x118>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a30      	ldr	r2, [pc, #192]	; (8001028 <MX_GPIO_Init+0x118>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <MX_GPIO_Init+0x118>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <MX_GPIO_Init+0x118>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a29      	ldr	r2, [pc, #164]	; (8001028 <MX_GPIO_Init+0x118>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b27      	ldr	r3, [pc, #156]	; (8001028 <MX_GPIO_Init+0x118>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Weight_SCK_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8000f9c:	4823      	ldr	r0, [pc, #140]	; (800102c <MX_GPIO_Init+0x11c>)
 8000f9e:	f001 fa33 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa8:	4821      	ldr	r0, [pc, #132]	; (8001030 <MX_GPIO_Init+0x120>)
 8000faa:	f001 fa2d 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481a      	ldr	r0, [pc, #104]	; (8001030 <MX_GPIO_Init+0x120>)
 8000fc6:	f001 f883 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Weight_SCK_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Weight_SCK_Pin;
 8000fca:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4812      	ldr	r0, [pc, #72]	; (800102c <MX_GPIO_Init+0x11c>)
 8000fe4:	f001 f874 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	480b      	ldr	r0, [pc, #44]	; (8001030 <MX_GPIO_Init+0x120>)
 8001002:	f001 f865 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Weight_SDA_Pin */
  GPIO_InitStruct.Pin = Weight_SDA_Pin;
 8001006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Weight_SDA_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	4804      	ldr	r0, [pc, #16]	; (800102c <MX_GPIO_Init+0x11c>)
 800101c:	f001 f858 	bl	80020d0 <HAL_GPIO_Init>

}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	; 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000
 8001030:	40020800 	.word	0x40020800

08001034 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800103c:	2001      	movs	r0, #1
 800103e:	f002 fdb9 	bl	8003bb4 <osDelay>
 8001042:	e7fb      	b.n	800103c <StartDefaultTask+0x8>

08001044 <StartWeightSense>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWeightSense */
void StartWeightSense(void *argument)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	; 0x38
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;) {
		/**
		 * Weight sensing part
		 */
		now_weight = read_weight_average();
 800104c:	f7ff fd58 	bl	8000b00 <read_weight_average>
 8001050:	4603      	mov	r3, r0
 8001052:	4a53      	ldr	r2, [pc, #332]	; (80011a0 <StartWeightSense+0x15c>)
 8001054:	6013      	str	r3, [r2, #0]
		uint8_t is_transmit_data = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (now_weight > captured_weight
 800105c:	4b50      	ldr	r3, [pc, #320]	; (80011a0 <StartWeightSense+0x15c>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b50      	ldr	r3, [pc, #320]	; (80011a4 <StartWeightSense+0x160>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	429a      	cmp	r2, r3
 8001066:	d927      	bls.n	80010b8 <StartWeightSense+0x74>
				&& now_weight - captured_weight >= POSITIVE_THRESHOLD) {
 8001068:	4b4d      	ldr	r3, [pc, #308]	; (80011a0 <StartWeightSense+0x15c>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b4d      	ldr	r3, [pc, #308]	; (80011a4 <StartWeightSense+0x160>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001076:	4293      	cmp	r3, r2
 8001078:	d31e      	bcc.n	80010b8 <StartWeightSense+0x74>
			osDelay(75);
 800107a:	204b      	movs	r0, #75	; 0x4b
 800107c:	f002 fd9a 	bl	8003bb4 <osDelay>
			now_weight = read_weight_average();
 8001080:	f7ff fd3e 	bl	8000b00 <read_weight_average>
 8001084:	4603      	mov	r3, r0
 8001086:	4a46      	ldr	r2, [pc, #280]	; (80011a0 <StartWeightSense+0x15c>)
 8001088:	6013      	str	r3, [r2, #0]
			if (now_weight > captured_weight
 800108a:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <StartWeightSense+0x15c>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b45      	ldr	r3, [pc, #276]	; (80011a4 <StartWeightSense+0x160>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	429a      	cmp	r2, r3
 8001094:	d93b      	bls.n	800110e <StartWeightSense+0xca>
					&& now_weight - captured_weight >= POSITIVE_THRESHOLD) {
 8001096:	4b42      	ldr	r3, [pc, #264]	; (80011a0 <StartWeightSense+0x15c>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b42      	ldr	r3, [pc, #264]	; (80011a4 <StartWeightSense+0x160>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d332      	bcc.n	800110e <StartWeightSense+0xca>
				captured_weight = now_weight;
 80010a8:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <StartWeightSense+0x15c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a3d      	ldr	r2, [pc, #244]	; (80011a4 <StartWeightSense+0x160>)
 80010ae:	6013      	str	r3, [r2, #0]
				is_transmit_data = 1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (now_weight > captured_weight
 80010b6:	e02a      	b.n	800110e <StartWeightSense+0xca>
			}
		} else if (now_weight < captured_weight
 80010b8:	4b39      	ldr	r3, [pc, #228]	; (80011a0 <StartWeightSense+0x15c>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b39      	ldr	r3, [pc, #228]	; (80011a4 <StartWeightSense+0x160>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d225      	bcs.n	8001110 <StartWeightSense+0xcc>
				&& captured_weight - now_weight >= NEGATIVE_THRESHOLD) {
 80010c4:	4b37      	ldr	r3, [pc, #220]	; (80011a4 <StartWeightSense+0x160>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <StartWeightSense+0x15c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d31c      	bcc.n	8001110 <StartWeightSense+0xcc>
			// There may have some of measurement delay when place object
			osDelay(75);
 80010d6:	204b      	movs	r0, #75	; 0x4b
 80010d8:	f002 fd6c 	bl	8003bb4 <osDelay>
			now_weight = read_weight_average();
 80010dc:	f7ff fd10 	bl	8000b00 <read_weight_average>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a2f      	ldr	r2, [pc, #188]	; (80011a0 <StartWeightSense+0x15c>)
 80010e4:	6013      	str	r3, [r2, #0]
			if (now_weight < captured_weight
 80010e6:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <StartWeightSense+0x15c>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <StartWeightSense+0x160>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d20e      	bcs.n	8001110 <StartWeightSense+0xcc>
					&& captured_weight - now_weight >= NEGATIVE_THRESHOLD) {
 80010f2:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <StartWeightSense+0x160>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <StartWeightSense+0x15c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001100:	4293      	cmp	r3, r2
 8001102:	d305      	bcc.n	8001110 <StartWeightSense+0xcc>
				captured_weight = now_weight;
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <StartWeightSense+0x15c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a26      	ldr	r2, [pc, #152]	; (80011a4 <StartWeightSense+0x160>)
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	e000      	b.n	8001110 <StartWeightSense+0xcc>
			if (now_weight > captured_weight
 800110e:	bf00      	nop
		 * Transmit data to esp, the transfer data process has 2 steps
		 * 1) Send data length
		 * 2) Send data content
		 */

		if (is_transmit_data) {
 8001110:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001114:	2b00      	cmp	r3, #0
 8001116:	d099      	beq.n	800104c <StartWeightSense+0x8>
			uint8_t ch[30] = "";
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
 800112c:	615a      	str	r2, [r3, #20]
 800112e:	831a      	strh	r2, [r3, #24]
			uint8_t szch[2] = "";
 8001130:	2300      	movs	r3, #0
 8001132:	81bb      	strh	r3, [r7, #12]

			int sz = sprintf(ch, "%d", captured_weight);
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <StartWeightSense+0x160>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	491a      	ldr	r1, [pc, #104]	; (80011a8 <StartWeightSense+0x164>)
 800113e:	4618      	mov	r0, r3
 8001140:	f005 fafc 	bl	800673c <siprintf>
 8001144:	6338      	str	r0, [r7, #48]	; 0x30

			if (sz < 10) {
 8001146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001148:	2b09      	cmp	r3, #9
 800114a:	dc07      	bgt.n	800115c <StartWeightSense+0x118>
				sprintf(szch, "0%d", sz);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001152:	4916      	ldr	r1, [pc, #88]	; (80011ac <StartWeightSense+0x168>)
 8001154:	4618      	mov	r0, r3
 8001156:	f005 faf1 	bl	800673c <siprintf>
 800115a:	e006      	b.n	800116a <StartWeightSense+0x126>
			} else {
				sprintf(szch, "%d", sz);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001162:	4911      	ldr	r1, [pc, #68]	; (80011a8 <StartWeightSense+0x164>)
 8001164:	4618      	mov	r0, r3
 8001166:	f005 fae9 	bl	800673c <siprintf>
			}

			HAL_StatusTypeDef result_sz = HAL_I2C_Slave_Transmit(&hi2c1, szch,
 800116a:	f107 010c 	add.w	r1, r7, #12
 800116e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001172:	2202      	movs	r2, #2
 8001174:	480e      	ldr	r0, [pc, #56]	; (80011b0 <StartWeightSense+0x16c>)
 8001176:	f001 faa5 	bl	80026c4 <HAL_I2C_Slave_Transmit>
 800117a:	4603      	mov	r3, r0
 800117c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					2, 10000);
			if (result_sz == HAL_OK) {
 8001180:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001184:	2b00      	cmp	r3, #0
 8001186:	f47f af61 	bne.w	800104c <StartWeightSense+0x8>
				HAL_I2C_Slave_Transmit(&hi2c1, ch, sz, 10000);
 800118a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118c:	b29a      	uxth	r2, r3
 800118e:	f107 0110 	add.w	r1, r7, #16
 8001192:	f242 7310 	movw	r3, #10000	; 0x2710
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <StartWeightSense+0x16c>)
 8001198:	f001 fa94 	bl	80026c4 <HAL_I2C_Slave_Transmit>
	for (;;) {
 800119c:	e756      	b.n	800104c <StartWeightSense+0x8>
 800119e:	bf00      	nop
 80011a0:	200049c4 	.word	0x200049c4
 80011a4:	200000a4 	.word	0x200000a4
 80011a8:	08007004 	.word	0x08007004
 80011ac:	08007008 	.word	0x08007008
 80011b0:	200049d0 	.word	0x200049d0

080011b4 <ResetWeightHandle>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ResetWeightHandle */
void ResetWeightHandle(void *argument)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	/**
	 * Reset button (on board)
	 */
	for (;;) {
		GPIO_PinState btn = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80011bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c0:	4816      	ldr	r0, [pc, #88]	; (800121c <ResetWeightHandle+0x68>)
 80011c2:	f001 f909 	bl	80023d8 <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	72fb      	strb	r3, [r7, #11]
		if (btn == GPIO_PIN_RESET) {
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d120      	bne.n	8001212 <ResetWeightHandle+0x5e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2120      	movs	r1, #32
 80011d4:	4812      	ldr	r0, [pc, #72]	; (8001220 <ResetWeightHandle+0x6c>)
 80011d6:	f001 f917 	bl	8002408 <HAL_GPIO_WritePin>
			for (int i = 0; i < 10; ++i) {
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	e004      	b.n	80011ea <ResetWeightHandle+0x36>
				set_zero_weight();
 80011e0:	f7ff fcc0 	bl	8000b64 <set_zero_weight>
			for (int i = 0; i < 10; ++i) {
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2b09      	cmp	r3, #9
 80011ee:	ddf7      	ble.n	80011e0 <ResetWeightHandle+0x2c>
			}
			while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80011f0:	e002      	b.n	80011f8 <ResetWeightHandle+0x44>
				osDelay(50);
 80011f2:	2032      	movs	r0, #50	; 0x32
 80011f4:	f002 fcde 	bl	8003bb4 <osDelay>
			while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80011f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fc:	4807      	ldr	r0, [pc, #28]	; (800121c <ResetWeightHandle+0x68>)
 80011fe:	f001 f8eb 	bl	80023d8 <HAL_GPIO_ReadPin>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f4      	beq.n	80011f2 <ResetWeightHandle+0x3e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	2120      	movs	r1, #32
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <ResetWeightHandle+0x6c>)
 800120e:	f001 f8fb 	bl	8002408 <HAL_GPIO_WritePin>
		}
		osDelay(10);
 8001212:	200a      	movs	r0, #10
 8001214:	f002 fcce 	bl	8003bb4 <osDelay>
	for (;;) {
 8001218:	e7d0      	b.n	80011bc <ResetWeightHandle+0x8>
 800121a:	bf00      	nop
 800121c:	40020800 	.word	0x40020800
 8001220:	40020000 	.word	0x40020000
 8001224:	00000000 	.word	0x00000000

08001228 <StartWatchLDR>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWatchLDR */
void StartWatchLDR(void *argument)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	/**
	 * ADC Part (For turn on light at night)
	 */
	for (;;) {
		HAL_ADC_Start(&hadc1);
 8001230:	4837      	ldr	r0, [pc, #220]	; (8001310 <StartWatchLDR+0xe8>)
 8001232:	f000 faed 	bl	8001810 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1);
 8001236:	2101      	movs	r1, #1
 8001238:	4835      	ldr	r0, [pc, #212]	; (8001310 <StartWatchLDR+0xe8>)
 800123a:	f000 fb9d 	bl	8001978 <HAL_ADC_PollForConversion>
		AD_RES = HAL_ADC_GetValue(&hadc1);
 800123e:	4834      	ldr	r0, [pc, #208]	; (8001310 <StartWatchLDR+0xe8>)
 8001240:	f000 fc25 	bl	8001a8e <HAL_ADC_GetValue>
 8001244:	4603      	mov	r3, r0
 8001246:	4a33      	ldr	r2, [pc, #204]	; (8001314 <StartWatchLDR+0xec>)
 8001248:	6013      	str	r3, [r2, #0]

		float tmp = AD_RES;
 800124a:	4b32      	ldr	r3, [pc, #200]	; (8001314 <StartWatchLDR+0xec>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001256:	edc7 7a03 	vstr	s15, [r7, #12]
		float calC = (1.0 - (LDR_MX - tmp) / (LDR_MX - LDR_MN));
 800125a:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <StartWatchLDR+0xf0>)
 800125c:	ed93 7a00 	vldr	s14, [r3]
 8001260:	edd7 7a03 	vldr	s15, [r7, #12]
 8001264:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001268:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <StartWatchLDR+0xf0>)
 800126a:	ed93 7a00 	vldr	s14, [r3]
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <StartWatchLDR+0xf4>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800127c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001284:	edc7 7a02 	vstr	s15, [r7, #8]

		LDR_MX = tmp > LDR_MX ? tmp : LDR_MX;
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <StartWatchLDR+0xf0>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	dd01      	ble.n	80012a0 <StartWatchLDR+0x78>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	e001      	b.n	80012a4 <StartWatchLDR+0x7c>
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <StartWatchLDR+0xf0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a1c      	ldr	r2, [pc, #112]	; (8001318 <StartWatchLDR+0xf0>)
 80012a6:	6013      	str	r3, [r2, #0]
		LDR_MN = tmp < LDR_MN ? tmp : LDR_MN;
 80012a8:	4b1c      	ldr	r3, [pc, #112]	; (800131c <StartWatchLDR+0xf4>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80012b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d501      	bpl.n	80012c0 <StartWatchLDR+0x98>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	e001      	b.n	80012c4 <StartWatchLDR+0x9c>
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <StartWatchLDR+0xf4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a15      	ldr	r2, [pc, #84]	; (800131c <StartWatchLDR+0xf4>)
 80012c6:	6013      	str	r3, [r2, #0]

		if (calC < 0.3) {
 80012c8:	68b8      	ldr	r0, [r7, #8]
 80012ca:	f7ff f93d 	bl	8000548 <__aeabi_f2d>
 80012ce:	a30e      	add	r3, pc, #56	; (adr r3, 8001308 <StartWatchLDR+0xe0>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff f9f0 	bl	80006b8 <__aeabi_dcmplt>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <StartWatchLDR+0xc4>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e4:	480e      	ldr	r0, [pc, #56]	; (8001320 <StartWatchLDR+0xf8>)
 80012e6:	f001 f88f 	bl	8002408 <HAL_GPIO_WritePin>
 80012ea:	e005      	b.n	80012f8 <StartWatchLDR+0xd0>
		} else {
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f2:	480b      	ldr	r0, [pc, #44]	; (8001320 <StartWatchLDR+0xf8>)
 80012f4:	f001 f888 	bl	8002408 <HAL_GPIO_WritePin>
		}

		osDelay(3000);
 80012f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012fc:	f002 fc5a 	bl	8003bb4 <osDelay>
	for (;;) {
 8001300:	e796      	b.n	8001230 <StartWatchLDR+0x8>
 8001302:	bf00      	nop
 8001304:	f3af 8000 	nop.w
 8001308:	33333333 	.word	0x33333333
 800130c:	3fd33333 	.word	0x3fd33333
 8001310:	20004a2c 	.word	0x20004a2c
 8001314:	200049c8 	.word	0x200049c8
 8001318:	20000008 	.word	0x20000008
 800131c:	2000000c 	.word	0x2000000c
 8001320:	40020800 	.word	0x40020800

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800132c:	e7fe      	b.n	800132c <Error_Handler+0x8>
	...

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_MspInit+0x54>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a11      	ldr	r2, [pc, #68]	; (8001384 <HAL_MspInit+0x54>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_MspInit+0x54>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_MspInit+0x54>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <HAL_MspInit+0x54>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_MspInit+0x54>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	210f      	movs	r1, #15
 8001372:	f06f 0001 	mvn.w	r0, #1
 8001376:	f000 fe82 	bl	800207e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_ADC_MspInit+0x7c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d127      	bne.n	80013fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a15      	ldr	r2, [pc, #84]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013e2:	2310      	movs	r3, #16
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e6:	2303      	movs	r3, #3
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_ADC_MspInit+0x84>)
 80013f6:	f000 fe6b 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40012000 	.word	0x40012000
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a19      	ldr	r2, [pc, #100]	; (8001494 <HAL_I2C_MspInit+0x84>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d12b      	bne.n	800148a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_I2C_MspInit+0x88>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a17      	ldr	r2, [pc, #92]	; (8001498 <HAL_I2C_MspInit+0x88>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_I2C_MspInit+0x88>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800144e:	23c0      	movs	r3, #192	; 0xc0
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001452:	2312      	movs	r3, #18
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800145e:	2304      	movs	r3, #4
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	; (800149c <HAL_I2C_MspInit+0x8c>)
 800146a:	f000 fe31 	bl	80020d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_I2C_MspInit+0x88>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_I2C_MspInit+0x88>)
 8001478:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_I2C_MspInit+0x88>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40005400 	.word	0x40005400
 8001498:	40023800 	.word	0x40023800
 800149c:	40020400 	.word	0x40020400

080014a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a19      	ldr	r2, [pc, #100]	; (8001524 <HAL_UART_MspInit+0x84>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d12b      	bne.n	800151a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a17      	ldr	r2, [pc, #92]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014fa:	230c      	movs	r3, #12
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150a:	2307      	movs	r3, #7
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <HAL_UART_MspInit+0x8c>)
 8001516:	f000 fddb 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	; 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40004400 	.word	0x40004400
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001560:	f000 f8ce 	bl	8001700 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001564:	f004 f840 	bl	80055e8 <xTaskGetSchedulerState>
 8001568:	4603      	mov	r3, r0
 800156a:	2b01      	cmp	r3, #1
 800156c:	d001      	beq.n	8001572 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800156e:	f004 fe2b 	bl	80061c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <_sbrk+0x5c>)
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <_sbrk+0x60>)
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <_sbrk+0x64>)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <_sbrk+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d207      	bcs.n	80015b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a8:	f005 f888 	bl	80066bc <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	220c      	movs	r2, #12
 80015b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e009      	b.n	80015cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <_sbrk+0x64>)
 80015c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20020000 	.word	0x20020000
 80015d8:	00000400 	.word	0x00000400
 80015dc:	200000a8 	.word	0x200000a8
 80015e0:	20004b18 	.word	0x20004b18

080015e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <SystemInit+0x20>)
 80015ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <SystemInit+0x20>)
 80015f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800160e:	490e      	ldr	r1, [pc, #56]	; (8001648 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001610:	4a0e      	ldr	r2, [pc, #56]	; (800164c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001624:	4c0b      	ldr	r4, [pc, #44]	; (8001654 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001632:	f7ff ffd7 	bl	80015e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001636:	f005 f847 	bl	80066c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163a:	f7ff fabf 	bl	8000bbc <main>
  bx  lr    
 800163e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800164c:	08007120 	.word	0x08007120
  ldr r2, =_sbss
 8001650:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001654:	20004b14 	.word	0x20004b14

08001658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <HAL_Init+0x40>)
 8001666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0a      	ldr	r2, [pc, #40]	; (800169c <HAL_Init+0x40>)
 8001672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_Init+0x40>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001684:	2003      	movs	r0, #3
 8001686:	f000 fcef 	bl	8002068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168a:	200f      	movs	r0, #15
 800168c:	f000 f808 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff fe4e 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023c00 	.word	0x40023c00

080016a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_InitTick+0x54>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x58>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fcf9 	bl	80020b6 <HAL_SYSTICK_Config>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00e      	b.n	80016ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d80a      	bhi.n	80016ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f000 fccf 	bl	800207e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4a06      	ldr	r2, [pc, #24]	; (80016fc <HAL_InitTick+0x5c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000010 	.word	0x20000010
 80016f8:	20000018 	.word	0x20000018
 80016fc:	20000014 	.word	0x20000014

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000018 	.word	0x20000018
 8001724:	20004ac0 	.word	0x20004ac0

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20004ac0 	.word	0x20004ac0

08001740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d005      	beq.n	8001766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_Delay+0x44>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001766:	bf00      	nop
 8001768:	f7ff ffde 	bl	8001728 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8f7      	bhi.n	8001768 <HAL_Delay+0x28>
  {
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000018 	.word	0x20000018

08001788 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e033      	b.n	8001806 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d109      	bne.n	80017ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fdee 	bl	8001388 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d118      	bne.n	80017f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017ce:	f023 0302 	bic.w	r3, r3, #2
 80017d2:	f043 0202 	orr.w	r2, r3, #2
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fa96 	bl	8001d0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f023 0303 	bic.w	r3, r3, #3
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
 80017f6:	e001      	b.n	80017fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_ADC_Start+0x1a>
 8001826:	2302      	movs	r3, #2
 8001828:	e097      	b.n	800195a <HAL_ADC_Start+0x14a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d018      	beq.n	8001872 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001850:	4b45      	ldr	r3, [pc, #276]	; (8001968 <HAL_ADC_Start+0x158>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a45      	ldr	r2, [pc, #276]	; (800196c <HAL_ADC_Start+0x15c>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	0c9a      	lsrs	r2, r3, #18
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001864:	e002      	b.n	800186c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	3b01      	subs	r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f9      	bne.n	8001866 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b01      	cmp	r3, #1
 800187e:	d15f      	bne.n	8001940 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018be:	d106      	bne.n	80018ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	f023 0206 	bic.w	r2, r3, #6
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	645a      	str	r2, [r3, #68]	; 0x44
 80018cc:	e002      	b.n	80018d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_ADC_Start+0x160>)
 80018de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 031f 	and.w	r3, r3, #31
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10f      	bne.n	8001916 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d129      	bne.n	8001958 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	e020      	b.n	8001958 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a16      	ldr	r2, [pc, #88]	; (8001974 <HAL_ADC_Start+0x164>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d11b      	bne.n	8001958 <HAL_ADC_Start+0x148>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d114      	bne.n	8001958 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	e00b      	b.n	8001958 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f043 0210 	orr.w	r2, r3, #16
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000010 	.word	0x20000010
 800196c:	431bde83 	.word	0x431bde83
 8001970:	40012300 	.word	0x40012300
 8001974:	40012000 	.word	0x40012000

08001978 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001994:	d113      	bne.n	80019be <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a4:	d10b      	bne.n	80019be <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f043 0220 	orr.w	r2, r3, #32
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e063      	b.n	8001a86 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019be:	f7ff feb3 	bl	8001728 <HAL_GetTick>
 80019c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019c4:	e021      	b.n	8001a0a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019cc:	d01d      	beq.n	8001a0a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <HAL_ADC_PollForConversion+0x6c>
 80019d4:	f7ff fea8 	bl	8001728 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d212      	bcs.n	8001a0a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d00b      	beq.n	8001a0a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f043 0204 	orr.w	r2, r3, #4
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e03d      	b.n	8001a86 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d1d6      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f06f 0212 	mvn.w	r2, #18
 8001a20:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d123      	bne.n	8001a84 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d11f      	bne.n	8001a84 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d111      	bne.n	8001a84 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d105      	bne.n	8001a84 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f043 0201 	orr.w	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x1c>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e113      	b.n	8001cec <HAL_ADC_ConfigChannel+0x244>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b09      	cmp	r3, #9
 8001ad2:	d925      	bls.n	8001b20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68d9      	ldr	r1, [r3, #12]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3b1e      	subs	r3, #30
 8001aea:	2207      	movs	r2, #7
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43da      	mvns	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	400a      	ands	r2, r1
 8001af8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68d9      	ldr	r1, [r3, #12]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4403      	add	r3, r0
 8001b12:	3b1e      	subs	r3, #30
 8001b14:	409a      	lsls	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	e022      	b.n	8001b66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6919      	ldr	r1, [r3, #16]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	2207      	movs	r2, #7
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	400a      	ands	r2, r1
 8001b42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6919      	ldr	r1, [r3, #16]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	4618      	mov	r0, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4403      	add	r3, r0
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d824      	bhi.n	8001bb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3b05      	subs	r3, #5
 8001b80:	221f      	movs	r2, #31
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3b05      	subs	r3, #5
 8001baa:	fa00 f203 	lsl.w	r2, r0, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb6:	e04c      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	d824      	bhi.n	8001c0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	3b23      	subs	r3, #35	; 0x23
 8001bd2:	221f      	movs	r2, #31
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	400a      	ands	r2, r1
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3b23      	subs	r3, #35	; 0x23
 8001bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
 8001c08:	e023      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	3b41      	subs	r3, #65	; 0x41
 8001c1c:	221f      	movs	r2, #31
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	400a      	ands	r2, r1
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	3b41      	subs	r3, #65	; 0x41
 8001c46:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c52:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <HAL_ADC_ConfigChannel+0x250>)
 8001c54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a28      	ldr	r2, [pc, #160]	; (8001cfc <HAL_ADC_ConfigChannel+0x254>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d10f      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x1d8>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b12      	cmp	r3, #18
 8001c66:	d10b      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <HAL_ADC_ConfigChannel+0x254>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d12b      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x23a>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <HAL_ADC_ConfigChannel+0x258>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d003      	beq.n	8001c9c <HAL_ADC_ConfigChannel+0x1f4>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b11      	cmp	r3, #17
 8001c9a:	d122      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <HAL_ADC_ConfigChannel+0x258>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d111      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_ADC_ConfigChannel+0x25c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a11      	ldr	r2, [pc, #68]	; (8001d08 <HAL_ADC_ConfigChannel+0x260>)
 8001cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc8:	0c9a      	lsrs	r2, r3, #18
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cd4:	e002      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f9      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	40012300 	.word	0x40012300
 8001cfc:	40012000 	.word	0x40012000
 8001d00:	10000012 	.word	0x10000012
 8001d04:	20000010 	.word	0x20000010
 8001d08:	431bde83 	.word	0x431bde83

08001d0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d14:	4b79      	ldr	r3, [pc, #484]	; (8001efc <ADC_Init+0x1f0>)
 8001d16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	021a      	lsls	r2, r3, #8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6899      	ldr	r1, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	4a58      	ldr	r2, [pc, #352]	; (8001f00 <ADC_Init+0x1f4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d022      	beq.n	8001dea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001db2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6899      	ldr	r1, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6899      	ldr	r1, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	e00f      	b.n	8001e0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0202 	bic.w	r2, r2, #2
 8001e18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6899      	ldr	r1, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7e1b      	ldrb	r3, [r3, #24]
 8001e24:	005a      	lsls	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01b      	beq.n	8001e70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6859      	ldr	r1, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	3b01      	subs	r3, #1
 8001e64:	035a      	lsls	r2, r3, #13
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	e007      	b.n	8001e80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	051a      	lsls	r2, r3, #20
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001eb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ec2:	025a      	lsls	r2, r3, #9
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6899      	ldr	r1, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	029a      	lsls	r2, r3, #10
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	609a      	str	r2, [r3, #8]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	40012300 	.word	0x40012300
 8001f00:	0f000001 	.word	0x0f000001

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002034:	d301      	bcc.n	800203a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002036:	2301      	movs	r3, #1
 8002038:	e00f      	b.n	800205a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <SysTick_Config+0x40>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002042:	210f      	movs	r1, #15
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f7ff ff8e 	bl	8001f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <SysTick_Config+0x40>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002052:	4b04      	ldr	r3, [pc, #16]	; (8002064 <SysTick_Config+0x40>)
 8002054:	2207      	movs	r2, #7
 8002056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	e000e010 	.word	0xe000e010

08002068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff47 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002090:	f7ff ff5c 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 8002094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ff8e 	bl	8001fbc <NVIC_EncodePriority>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff5d 	bl	8001f68 <__NVIC_SetPriority>
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffb0 	bl	8002024 <SysTick_Config>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	e159      	b.n	80023a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020ec:	2201      	movs	r2, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	429a      	cmp	r2, r3
 8002106:	f040 8148 	bne.w	800239a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d005      	beq.n	8002122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211e:	2b02      	cmp	r3, #2
 8002120:	d130      	bne.n	8002184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002158:	2201      	movs	r2, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 0201 	and.w	r2, r3, #1
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b03      	cmp	r3, #3
 800218e:	d017      	beq.n	80021c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d123      	bne.n	8002214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	08da      	lsrs	r2, r3, #3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3208      	adds	r2, #8
 80021d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	220f      	movs	r2, #15
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	08da      	lsrs	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3208      	adds	r2, #8
 800220e:	69b9      	ldr	r1, [r7, #24]
 8002210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0203 	and.w	r2, r3, #3
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a2 	beq.w	800239a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b57      	ldr	r3, [pc, #348]	; (80023b8 <HAL_GPIO_Init+0x2e8>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4a56      	ldr	r2, [pc, #344]	; (80023b8 <HAL_GPIO_Init+0x2e8>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002264:	6453      	str	r3, [r2, #68]	; 0x44
 8002266:	4b54      	ldr	r3, [pc, #336]	; (80023b8 <HAL_GPIO_Init+0x2e8>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002272:	4a52      	ldr	r2, [pc, #328]	; (80023bc <HAL_GPIO_Init+0x2ec>)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3302      	adds	r3, #2
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a49      	ldr	r2, [pc, #292]	; (80023c0 <HAL_GPIO_Init+0x2f0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d019      	beq.n	80022d2 <HAL_GPIO_Init+0x202>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a48      	ldr	r2, [pc, #288]	; (80023c4 <HAL_GPIO_Init+0x2f4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_GPIO_Init+0x1fe>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a47      	ldr	r2, [pc, #284]	; (80023c8 <HAL_GPIO_Init+0x2f8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00d      	beq.n	80022ca <HAL_GPIO_Init+0x1fa>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a46      	ldr	r2, [pc, #280]	; (80023cc <HAL_GPIO_Init+0x2fc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <HAL_GPIO_Init+0x1f6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a45      	ldr	r2, [pc, #276]	; (80023d0 <HAL_GPIO_Init+0x300>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d101      	bne.n	80022c2 <HAL_GPIO_Init+0x1f2>
 80022be:	2304      	movs	r3, #4
 80022c0:	e008      	b.n	80022d4 <HAL_GPIO_Init+0x204>
 80022c2:	2307      	movs	r3, #7
 80022c4:	e006      	b.n	80022d4 <HAL_GPIO_Init+0x204>
 80022c6:	2303      	movs	r3, #3
 80022c8:	e004      	b.n	80022d4 <HAL_GPIO_Init+0x204>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e002      	b.n	80022d4 <HAL_GPIO_Init+0x204>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_GPIO_Init+0x204>
 80022d2:	2300      	movs	r3, #0
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	f002 0203 	and.w	r2, r2, #3
 80022da:	0092      	lsls	r2, r2, #2
 80022dc:	4093      	lsls	r3, r2
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e4:	4935      	ldr	r1, [pc, #212]	; (80023bc <HAL_GPIO_Init+0x2ec>)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	089b      	lsrs	r3, r3, #2
 80022ea:	3302      	adds	r3, #2
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f2:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <HAL_GPIO_Init+0x304>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002316:	4a2f      	ldr	r2, [pc, #188]	; (80023d4 <HAL_GPIO_Init+0x304>)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800231c:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <HAL_GPIO_Init+0x304>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002340:	4a24      	ldr	r2, [pc, #144]	; (80023d4 <HAL_GPIO_Init+0x304>)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002346:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <HAL_GPIO_Init+0x304>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800236a:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <HAL_GPIO_Init+0x304>)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <HAL_GPIO_Init+0x304>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002394:	4a0f      	ldr	r2, [pc, #60]	; (80023d4 <HAL_GPIO_Init+0x304>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3301      	adds	r3, #1
 800239e:	61fb      	str	r3, [r7, #28]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	2b0f      	cmp	r3, #15
 80023a4:	f67f aea2 	bls.w	80020ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3724      	adds	r7, #36	; 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40013800 	.word	0x40013800
 80023c0:	40020000 	.word	0x40020000
 80023c4:	40020400 	.word	0x40020400
 80023c8:	40020800 	.word	0x40020800
 80023cc:	40020c00 	.word	0x40020c00
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40013c00 	.word	0x40013c00

080023d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e001      	b.n	80023fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e12b      	b.n	80026a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe ffd4 	bl	8001410 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2224      	movs	r2, #36	; 0x24
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800248e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800249e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024a0:	f000 ff3a 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 80024a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4a81      	ldr	r2, [pc, #516]	; (80026b0 <HAL_I2C_Init+0x274>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d807      	bhi.n	80024c0 <HAL_I2C_Init+0x84>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4a80      	ldr	r2, [pc, #512]	; (80026b4 <HAL_I2C_Init+0x278>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	bf94      	ite	ls
 80024b8:	2301      	movls	r3, #1
 80024ba:	2300      	movhi	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	e006      	b.n	80024ce <HAL_I2C_Init+0x92>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4a7d      	ldr	r2, [pc, #500]	; (80026b8 <HAL_I2C_Init+0x27c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	bf94      	ite	ls
 80024c8:	2301      	movls	r3, #1
 80024ca:	2300      	movhi	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0e7      	b.n	80026a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4a78      	ldr	r2, [pc, #480]	; (80026bc <HAL_I2C_Init+0x280>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	0c9b      	lsrs	r3, r3, #18
 80024e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4a6a      	ldr	r2, [pc, #424]	; (80026b0 <HAL_I2C_Init+0x274>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d802      	bhi.n	8002510 <HAL_I2C_Init+0xd4>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	3301      	adds	r3, #1
 800250e:	e009      	b.n	8002524 <HAL_I2C_Init+0xe8>
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002516:	fb02 f303 	mul.w	r3, r2, r3
 800251a:	4a69      	ldr	r2, [pc, #420]	; (80026c0 <HAL_I2C_Init+0x284>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	099b      	lsrs	r3, r3, #6
 8002522:	3301      	adds	r3, #1
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	430b      	orrs	r3, r1
 800252a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002536:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	495c      	ldr	r1, [pc, #368]	; (80026b0 <HAL_I2C_Init+0x274>)
 8002540:	428b      	cmp	r3, r1
 8002542:	d819      	bhi.n	8002578 <HAL_I2C_Init+0x13c>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1e59      	subs	r1, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002552:	1c59      	adds	r1, r3, #1
 8002554:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002558:	400b      	ands	r3, r1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_I2C_Init+0x138>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1e59      	subs	r1, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	fbb1 f3f3 	udiv	r3, r1, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002572:	e051      	b.n	8002618 <HAL_I2C_Init+0x1dc>
 8002574:	2304      	movs	r3, #4
 8002576:	e04f      	b.n	8002618 <HAL_I2C_Init+0x1dc>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d111      	bne.n	80025a4 <HAL_I2C_Init+0x168>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1e58      	subs	r0, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	440b      	add	r3, r1
 800258e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002592:	3301      	adds	r3, #1
 8002594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e012      	b.n	80025ca <HAL_I2C_Init+0x18e>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1e58      	subs	r0, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	0099      	lsls	r1, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Init+0x196>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e022      	b.n	8002618 <HAL_I2C_Init+0x1dc>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10e      	bne.n	80025f8 <HAL_I2C_Init+0x1bc>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1e58      	subs	r0, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	440b      	add	r3, r1
 80025e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ec:	3301      	adds	r3, #1
 80025ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f6:	e00f      	b.n	8002618 <HAL_I2C_Init+0x1dc>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1e58      	subs	r0, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	0099      	lsls	r1, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	fbb0 f3f3 	udiv	r3, r0, r3
 800260e:	3301      	adds	r3, #1
 8002610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	6809      	ldr	r1, [r1, #0]
 800261c:	4313      	orrs	r3, r2
 800261e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69da      	ldr	r2, [r3, #28]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6911      	ldr	r1, [r2, #16]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68d2      	ldr	r2, [r2, #12]
 8002652:	4311      	orrs	r1, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	430b      	orrs	r3, r1
 800265a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	000186a0 	.word	0x000186a0
 80026b4:	001e847f 	.word	0x001e847f
 80026b8:	003d08ff 	.word	0x003d08ff
 80026bc:	431bde83 	.word	0x431bde83
 80026c0:	10624dd3 	.word	0x10624dd3

080026c4 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026d4:	f7ff f828 	bl	8001728 <HAL_GetTick>
 80026d8:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	f040 80fb 	bne.w	80028de <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_I2C_Slave_Transmit+0x30>
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0f3      	b.n	80028e0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_I2C_Slave_Transmit+0x42>
 8002702:	2302      	movs	r3, #2
 8002704:	e0ec      	b.n	80028e0 <HAL_I2C_Slave_Transmit+0x21c>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d007      	beq.n	800272c <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800273a:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2221      	movs	r2, #33	; 0x21
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	88fa      	ldrh	r2, [r7, #6]
 800275c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a5f      	ldr	r2, [pc, #380]	; (80028e8 <HAL_I2C_Slave_Transmit+0x224>)
 800276c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800277c:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2200      	movs	r2, #0
 8002786:	4959      	ldr	r1, [pc, #356]	; (80028ec <HAL_I2C_Slave_Transmit+0x228>)
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f8b1 	bl	80028f0 <I2C_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0a3      	b.n	80028e0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002798:	2300      	movs	r3, #0
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	61bb      	str	r3, [r7, #24]
 80027ac:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80027b6:	d165      	bne.n	8002884 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2200      	movs	r2, #0
 80027c0:	494a      	ldr	r1, [pc, #296]	; (80028ec <HAL_I2C_Slave_Transmit+0x228>)
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f894 	bl	80028f0 <I2C_WaitOnFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e086      	b.n	80028e0 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027e8:	e04c      	b.n	8002884 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	6839      	ldr	r1, [r7, #0]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f8d5 	bl	800299e <I2C_WaitOnTXEFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002808:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e068      	b.n	80028e0 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d11b      	bne.n	8002884 <HAL_I2C_Slave_Transmit+0x1c0>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002850:	2b00      	cmp	r3, #0
 8002852:	d017      	beq.n	8002884 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ae      	bne.n	80027ea <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2200      	movs	r2, #0
 8002894:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f829 	bl	80028f0 <I2C_WaitOnFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e01b      	b.n	80028e0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028b0:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	e000      	b.n	80028e0 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80028de:	2302      	movs	r3, #2
  }
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3720      	adds	r7, #32
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	ffff0000 	.word	0xffff0000
 80028ec:	00010002 	.word	0x00010002

080028f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	4613      	mov	r3, r2
 80028fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002900:	e025      	b.n	800294e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d021      	beq.n	800294e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290a:	f7fe ff0d 	bl	8001728 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d302      	bcc.n	8002920 <I2C_WaitOnFlagUntilTimeout+0x30>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d116      	bne.n	800294e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f043 0220 	orr.w	r2, r3, #32
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e023      	b.n	8002996 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d10d      	bne.n	8002974 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4013      	ands	r3, r2
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf0c      	ite	eq
 800296a:	2301      	moveq	r3, #1
 800296c:	2300      	movne	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	e00c      	b.n	800298e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	43da      	mvns	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4013      	ands	r3, r2
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	429a      	cmp	r2, r3
 8002992:	d0b6      	beq.n	8002902 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029aa:	e02d      	b.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f837 	bl	8002a20 <I2C_IsAcknowledgeFailed>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e02d      	b.n	8002a18 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c2:	d021      	beq.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c4:	f7fe feb0 	bl	8001728 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d302      	bcc.n	80029da <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d116      	bne.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e007      	b.n	8002a18 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a12:	2b80      	cmp	r3, #128	; 0x80
 8002a14:	d1ca      	bne.n	80029ac <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a36:	d11b      	bne.n	8002a70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f043 0204 	orr.w	r2, r3, #4
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e264      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d075      	beq.n	8002b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a9e:	4ba3      	ldr	r3, [pc, #652]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d00c      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aaa:	4ba0      	ldr	r3, [pc, #640]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d112      	bne.n	8002adc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ab6:	4b9d      	ldr	r3, [pc, #628]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac2:	d10b      	bne.n	8002adc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	4b99      	ldr	r3, [pc, #612]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d05b      	beq.n	8002b88 <HAL_RCC_OscConfig+0x108>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d157      	bne.n	8002b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e23f      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae4:	d106      	bne.n	8002af4 <HAL_RCC_OscConfig+0x74>
 8002ae6:	4b91      	ldr	r3, [pc, #580]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a90      	ldr	r2, [pc, #576]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e01d      	b.n	8002b30 <HAL_RCC_OscConfig+0xb0>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x98>
 8002afe:	4b8b      	ldr	r3, [pc, #556]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a8a      	ldr	r2, [pc, #552]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4b88      	ldr	r3, [pc, #544]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a87      	ldr	r2, [pc, #540]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0xb0>
 8002b18:	4b84      	ldr	r3, [pc, #528]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a83      	ldr	r2, [pc, #524]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b81      	ldr	r3, [pc, #516]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a80      	ldr	r2, [pc, #512]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d013      	beq.n	8002b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7fe fdf6 	bl	8001728 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b40:	f7fe fdf2 	bl	8001728 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	; 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e204      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0xc0>
 8002b5e:	e014      	b.n	8002b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe fde2 	bl	8001728 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fe fdde 	bl	8001728 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	; 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e1f0      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	4b6c      	ldr	r3, [pc, #432]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0xe8>
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d063      	beq.n	8002c5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b96:	4b65      	ldr	r3, [pc, #404]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00b      	beq.n	8002bba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ba2:	4b62      	ldr	r3, [pc, #392]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d11c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bae:	4b5f      	ldr	r3, [pc, #380]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d116      	bne.n	8002be8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bba:	4b5c      	ldr	r3, [pc, #368]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x152>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e1c4      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd2:	4b56      	ldr	r3, [pc, #344]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4952      	ldr	r1, [pc, #328]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be6:	e03a      	b.n	8002c5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf0:	4b4f      	ldr	r3, [pc, #316]	; (8002d30 <HAL_RCC_OscConfig+0x2b0>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf6:	f7fe fd97 	bl	8001728 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bfe:	f7fe fd93 	bl	8001728 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e1a5      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	4b46      	ldr	r3, [pc, #280]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1c:	4b43      	ldr	r3, [pc, #268]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4940      	ldr	r1, [pc, #256]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]
 8002c30:	e015      	b.n	8002c5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c32:	4b3f      	ldr	r3, [pc, #252]	; (8002d30 <HAL_RCC_OscConfig+0x2b0>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe fd76 	bl	8001728 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c40:	f7fe fd72 	bl	8001728 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e184      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d030      	beq.n	8002ccc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d016      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c72:	4b30      	ldr	r3, [pc, #192]	; (8002d34 <HAL_RCC_OscConfig+0x2b4>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7fe fd56 	bl	8001728 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c80:	f7fe fd52 	bl	8001728 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e164      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x200>
 8002c9e:	e015      	b.n	8002ccc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca0:	4b24      	ldr	r3, [pc, #144]	; (8002d34 <HAL_RCC_OscConfig+0x2b4>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca6:	f7fe fd3f 	bl	8001728 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cae:	f7fe fd3b 	bl	8001728 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e14d      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f0      	bne.n	8002cae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80a0 	beq.w	8002e1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cde:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10f      	bne.n	8002d0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d06:	2301      	movs	r3, #1
 8002d08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_OscConfig+0x2b8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d121      	bne.n	8002d5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_RCC_OscConfig+0x2b8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <HAL_RCC_OscConfig+0x2b8>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d22:	f7fe fd01 	bl	8001728 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d28:	e011      	b.n	8002d4e <HAL_RCC_OscConfig+0x2ce>
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	42470000 	.word	0x42470000
 8002d34:	42470e80 	.word	0x42470e80
 8002d38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3c:	f7fe fcf4 	bl	8001728 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e106      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4e:	4b85      	ldr	r3, [pc, #532]	; (8002f64 <HAL_RCC_OscConfig+0x4e4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d106      	bne.n	8002d70 <HAL_RCC_OscConfig+0x2f0>
 8002d62:	4b81      	ldr	r3, [pc, #516]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d66:	4a80      	ldr	r2, [pc, #512]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6e:	e01c      	b.n	8002daa <HAL_RCC_OscConfig+0x32a>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d10c      	bne.n	8002d92 <HAL_RCC_OscConfig+0x312>
 8002d78:	4b7b      	ldr	r3, [pc, #492]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7c:	4a7a      	ldr	r2, [pc, #488]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	6713      	str	r3, [r2, #112]	; 0x70
 8002d84:	4b78      	ldr	r3, [pc, #480]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d88:	4a77      	ldr	r2, [pc, #476]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d90:	e00b      	b.n	8002daa <HAL_RCC_OscConfig+0x32a>
 8002d92:	4b75      	ldr	r3, [pc, #468]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	4a74      	ldr	r2, [pc, #464]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002d98:	f023 0301 	bic.w	r3, r3, #1
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9e:	4b72      	ldr	r3, [pc, #456]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	4a71      	ldr	r2, [pc, #452]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002da4:	f023 0304 	bic.w	r3, r3, #4
 8002da8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d015      	beq.n	8002dde <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db2:	f7fe fcb9 	bl	8001728 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe fcb5 	bl	8001728 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e0c5      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd0:	4b65      	ldr	r3, [pc, #404]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0ee      	beq.n	8002dba <HAL_RCC_OscConfig+0x33a>
 8002ddc:	e014      	b.n	8002e08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dde:	f7fe fca3 	bl	8001728 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de6:	f7fe fc9f 	bl	8001728 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e0af      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfc:	4b5a      	ldr	r3, [pc, #360]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1ee      	bne.n	8002de6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0e:	4b56      	ldr	r3, [pc, #344]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a55      	ldr	r2, [pc, #340]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 809b 	beq.w	8002f5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e24:	4b50      	ldr	r3, [pc, #320]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d05c      	beq.n	8002eea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d141      	bne.n	8002ebc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e38:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <HAL_RCC_OscConfig+0x4ec>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe fc73 	bl	8001728 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e46:	f7fe fc6f 	bl	8001728 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e081      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e58:	4b43      	ldr	r3, [pc, #268]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f0      	bne.n	8002e46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69da      	ldr	r2, [r3, #28]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	019b      	lsls	r3, r3, #6
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	085b      	lsrs	r3, r3, #1
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	041b      	lsls	r3, r3, #16
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	061b      	lsls	r3, r3, #24
 8002e88:	4937      	ldr	r1, [pc, #220]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e8e:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <HAL_RCC_OscConfig+0x4ec>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fe fc48 	bl	8001728 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fe fc44 	bl	8001728 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e056      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eae:	4b2e      	ldr	r3, [pc, #184]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x41c>
 8002eba:	e04e      	b.n	8002f5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <HAL_RCC_OscConfig+0x4ec>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec2:	f7fe fc31 	bl	8001728 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eca:	f7fe fc2d 	bl	8001728 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e03f      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002edc:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1f0      	bne.n	8002eca <HAL_RCC_OscConfig+0x44a>
 8002ee8:	e037      	b.n	8002f5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e032      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_RCC_OscConfig+0x4e8>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d028      	beq.n	8002f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d121      	bne.n	8002f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d11a      	bne.n	8002f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f26:	4013      	ands	r3, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d111      	bne.n	8002f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d001      	beq.n	8002f5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40007000 	.word	0x40007000
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	42470060 	.word	0x42470060

08002f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0cc      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f84:	4b68      	ldr	r3, [pc, #416]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d90c      	bls.n	8002fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b65      	ldr	r3, [pc, #404]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b63      	ldr	r3, [pc, #396]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0b8      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d020      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc4:	4b59      	ldr	r3, [pc, #356]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fdc:	4b53      	ldr	r3, [pc, #332]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4a52      	ldr	r2, [pc, #328]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe8:	4b50      	ldr	r3, [pc, #320]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	494d      	ldr	r1, [pc, #308]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d044      	beq.n	8003090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	4b47      	ldr	r3, [pc, #284]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d119      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e07f      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d003      	beq.n	800302e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800302a:	2b03      	cmp	r3, #3
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302e:	4b3f      	ldr	r3, [pc, #252]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e06f      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303e:	4b3b      	ldr	r3, [pc, #236]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e067      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304e:	4b37      	ldr	r3, [pc, #220]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4934      	ldr	r1, [pc, #208]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	4313      	orrs	r3, r2
 800305e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003060:	f7fe fb62 	bl	8001728 <HAL_GetTick>
 8003064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	e00a      	b.n	800307e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003068:	f7fe fb5e 	bl	8001728 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e04f      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	4b2b      	ldr	r3, [pc, #172]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 020c 	and.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	429a      	cmp	r2, r3
 800308e:	d1eb      	bne.n	8003068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003090:	4b25      	ldr	r3, [pc, #148]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d20c      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b22      	ldr	r3, [pc, #136]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e032      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4916      	ldr	r1, [pc, #88]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	490e      	ldr	r1, [pc, #56]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030f6:	f000 f821 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	490a      	ldr	r1, [pc, #40]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	5ccb      	ldrb	r3, [r1, r3]
 800310a:	fa22 f303 	lsr.w	r3, r2, r3
 800310e:	4a09      	ldr	r2, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe fac2 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023c00 	.word	0x40023c00
 800312c:	40023800 	.word	0x40023800
 8003130:	080070c4 	.word	0x080070c4
 8003134:	20000010 	.word	0x20000010
 8003138:	20000014 	.word	0x20000014

0800313c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800313c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	607b      	str	r3, [r7, #4]
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	2300      	movs	r3, #0
 800314e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003154:	4b67      	ldr	r3, [pc, #412]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b08      	cmp	r3, #8
 800315e:	d00d      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x40>
 8003160:	2b08      	cmp	r3, #8
 8003162:	f200 80bd 	bhi.w	80032e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x34>
 800316a:	2b04      	cmp	r3, #4
 800316c:	d003      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0x3a>
 800316e:	e0b7      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003170:	4b61      	ldr	r3, [pc, #388]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003172:	60bb      	str	r3, [r7, #8]
       break;
 8003174:	e0b7      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003176:	4b61      	ldr	r3, [pc, #388]	; (80032fc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003178:	60bb      	str	r3, [r7, #8]
      break;
 800317a:	e0b4      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800317c:	4b5d      	ldr	r3, [pc, #372]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003184:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003186:	4b5b      	ldr	r3, [pc, #364]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d04d      	beq.n	800322e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003192:	4b58      	ldr	r3, [pc, #352]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	461a      	mov	r2, r3
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	ea02 0800 	and.w	r8, r2, r0
 80031aa:	ea03 0901 	and.w	r9, r3, r1
 80031ae:	4640      	mov	r0, r8
 80031b0:	4649      	mov	r1, r9
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	014b      	lsls	r3, r1, #5
 80031bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031c0:	0142      	lsls	r2, r0, #5
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	ebb0 0008 	subs.w	r0, r0, r8
 80031ca:	eb61 0109 	sbc.w	r1, r1, r9
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	018b      	lsls	r3, r1, #6
 80031d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031dc:	0182      	lsls	r2, r0, #6
 80031de:	1a12      	subs	r2, r2, r0
 80031e0:	eb63 0301 	sbc.w	r3, r3, r1
 80031e4:	f04f 0000 	mov.w	r0, #0
 80031e8:	f04f 0100 	mov.w	r1, #0
 80031ec:	00d9      	lsls	r1, r3, #3
 80031ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031f2:	00d0      	lsls	r0, r2, #3
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	eb12 0208 	adds.w	r2, r2, r8
 80031fc:	eb43 0309 	adc.w	r3, r3, r9
 8003200:	f04f 0000 	mov.w	r0, #0
 8003204:	f04f 0100 	mov.w	r1, #0
 8003208:	0259      	lsls	r1, r3, #9
 800320a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800320e:	0250      	lsls	r0, r2, #9
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	461a      	mov	r2, r3
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	f7fd fa72 	bl	8000708 <__aeabi_uldivmod>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4613      	mov	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	e04a      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322e:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	099b      	lsrs	r3, r3, #6
 8003234:	461a      	mov	r2, r3
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800323e:	f04f 0100 	mov.w	r1, #0
 8003242:	ea02 0400 	and.w	r4, r2, r0
 8003246:	ea03 0501 	and.w	r5, r3, r1
 800324a:	4620      	mov	r0, r4
 800324c:	4629      	mov	r1, r5
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	014b      	lsls	r3, r1, #5
 8003258:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800325c:	0142      	lsls	r2, r0, #5
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	1b00      	subs	r0, r0, r4
 8003264:	eb61 0105 	sbc.w	r1, r1, r5
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	018b      	lsls	r3, r1, #6
 8003272:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003276:	0182      	lsls	r2, r0, #6
 8003278:	1a12      	subs	r2, r2, r0
 800327a:	eb63 0301 	sbc.w	r3, r3, r1
 800327e:	f04f 0000 	mov.w	r0, #0
 8003282:	f04f 0100 	mov.w	r1, #0
 8003286:	00d9      	lsls	r1, r3, #3
 8003288:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800328c:	00d0      	lsls	r0, r2, #3
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	1912      	adds	r2, r2, r4
 8003294:	eb45 0303 	adc.w	r3, r5, r3
 8003298:	f04f 0000 	mov.w	r0, #0
 800329c:	f04f 0100 	mov.w	r1, #0
 80032a0:	0299      	lsls	r1, r3, #10
 80032a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032a6:	0290      	lsls	r0, r2, #10
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4610      	mov	r0, r2
 80032ae:	4619      	mov	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	461a      	mov	r2, r3
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	f7fd fa26 	bl	8000708 <__aeabi_uldivmod>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4613      	mov	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	0c1b      	lsrs	r3, r3, #16
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	3301      	adds	r3, #1
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	60bb      	str	r3, [r7, #8]
      break;
 80032de:	e002      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032e2:	60bb      	str	r3, [r7, #8]
      break;
 80032e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e6:	68bb      	ldr	r3, [r7, #8]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	00f42400 	.word	0x00f42400
 80032fc:	007a1200 	.word	0x007a1200

08003300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_RCC_GetHCLKFreq+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000010 	.word	0x20000010

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800331c:	f7ff fff0 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	0a9b      	lsrs	r3, r3, #10
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4903      	ldr	r1, [pc, #12]	; (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	080070d4 	.word	0x080070d4

08003340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003344:	f7ff ffdc 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	0b5b      	lsrs	r3, r3, #13
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4903      	ldr	r1, [pc, #12]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40023800 	.word	0x40023800
 8003364:	080070d4 	.word	0x080070d4

08003368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e03f      	b.n	80033fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fe f886 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2224      	movs	r2, #36	; 0x24
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f929 	bl	8003604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b08a      	sub	sp, #40	; 0x28
 8003406:	af02      	add	r7, sp, #8
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b20      	cmp	r3, #32
 8003420:	d17c      	bne.n	800351c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_UART_Transmit+0x2c>
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e075      	b.n	800351e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_UART_Transmit+0x3e>
 800343c:	2302      	movs	r3, #2
 800343e:	e06e      	b.n	800351e <HAL_UART_Transmit+0x11c>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2221      	movs	r2, #33	; 0x21
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003456:	f7fe f967 	bl	8001728 <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	88fa      	ldrh	r2, [r7, #6]
 8003466:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003470:	d108      	bne.n	8003484 <HAL_UART_Transmit+0x82>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	e003      	b.n	800348c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003494:	e02a      	b.n	80034ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2200      	movs	r2, #0
 800349e:	2180      	movs	r1, #128	; 0x80
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 f840 	bl	8003526 <UART_WaitOnFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e036      	b.n	800351e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	3302      	adds	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	e007      	b.n	80034de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	3301      	adds	r3, #1
 80034dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1cf      	bne.n	8003496 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2200      	movs	r2, #0
 80034fe:	2140      	movs	r1, #64	; 0x40
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f810 	bl	8003526 <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e006      	b.n	800351e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b090      	sub	sp, #64	; 0x40
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003536:	e050      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d04c      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <UART_WaitOnFlagUntilTimeout+0x30>
 8003546:	f7fe f8ef 	bl	8001728 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003552:	429a      	cmp	r2, r3
 8003554:	d241      	bcs.n	80035da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	330c      	adds	r3, #12
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800356c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003576:	637a      	str	r2, [r7, #52]	; 0x34
 8003578:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800357c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800357e:	e841 2300 	strex	r3, r2, [r1]
 8003582:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e5      	bne.n	8003556 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3314      	adds	r3, #20
 8003590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	613b      	str	r3, [r7, #16]
   return(result);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035aa:	623a      	str	r2, [r7, #32]
 80035ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	69f9      	ldr	r1, [r7, #28]
 80035b0:	6a3a      	ldr	r2, [r7, #32]
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e5      	bne.n	800358a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d09f      	beq.n	8003538 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3740      	adds	r7, #64	; 0x40
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003608:	b09f      	sub	sp, #124	; 0x7c
 800360a:	af00      	add	r7, sp, #0
 800360c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800360e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361a:	68d9      	ldr	r1, [r3, #12]
 800361c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	ea40 0301 	orr.w	r3, r0, r1
 8003624:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	431a      	orrs	r2, r3
 8003630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	431a      	orrs	r2, r3
 8003636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	4313      	orrs	r3, r2
 800363c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800363e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003648:	f021 010c 	bic.w	r1, r1, #12
 800364c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003652:	430b      	orrs	r3, r1
 8003654:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003662:	6999      	ldr	r1, [r3, #24]
 8003664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	ea40 0301 	orr.w	r3, r0, r1
 800366c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800366e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4bc5      	ldr	r3, [pc, #788]	; (8003988 <UART_SetConfig+0x384>)
 8003674:	429a      	cmp	r2, r3
 8003676:	d004      	beq.n	8003682 <UART_SetConfig+0x7e>
 8003678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4bc3      	ldr	r3, [pc, #780]	; (800398c <UART_SetConfig+0x388>)
 800367e:	429a      	cmp	r2, r3
 8003680:	d103      	bne.n	800368a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003682:	f7ff fe5d 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 8003686:	6778      	str	r0, [r7, #116]	; 0x74
 8003688:	e002      	b.n	8003690 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800368a:	f7ff fe45 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 800368e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003698:	f040 80b6 	bne.w	8003808 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800369c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800369e:	461c      	mov	r4, r3
 80036a0:	f04f 0500 	mov.w	r5, #0
 80036a4:	4622      	mov	r2, r4
 80036a6:	462b      	mov	r3, r5
 80036a8:	1891      	adds	r1, r2, r2
 80036aa:	6439      	str	r1, [r7, #64]	; 0x40
 80036ac:	415b      	adcs	r3, r3
 80036ae:	647b      	str	r3, [r7, #68]	; 0x44
 80036b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036b4:	1912      	adds	r2, r2, r4
 80036b6:	eb45 0303 	adc.w	r3, r5, r3
 80036ba:	f04f 0000 	mov.w	r0, #0
 80036be:	f04f 0100 	mov.w	r1, #0
 80036c2:	00d9      	lsls	r1, r3, #3
 80036c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036c8:	00d0      	lsls	r0, r2, #3
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	1911      	adds	r1, r2, r4
 80036d0:	6639      	str	r1, [r7, #96]	; 0x60
 80036d2:	416b      	adcs	r3, r5
 80036d4:	667b      	str	r3, [r7, #100]	; 0x64
 80036d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	461a      	mov	r2, r3
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	1891      	adds	r1, r2, r2
 80036e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80036e4:	415b      	adcs	r3, r3
 80036e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80036f0:	f7fd f80a 	bl	8000708 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4ba5      	ldr	r3, [pc, #660]	; (8003990 <UART_SetConfig+0x38c>)
 80036fa:	fba3 2302 	umull	r2, r3, r3, r2
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	011e      	lsls	r6, r3, #4
 8003702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003704:	461c      	mov	r4, r3
 8003706:	f04f 0500 	mov.w	r5, #0
 800370a:	4622      	mov	r2, r4
 800370c:	462b      	mov	r3, r5
 800370e:	1891      	adds	r1, r2, r2
 8003710:	6339      	str	r1, [r7, #48]	; 0x30
 8003712:	415b      	adcs	r3, r3
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
 8003716:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800371a:	1912      	adds	r2, r2, r4
 800371c:	eb45 0303 	adc.w	r3, r5, r3
 8003720:	f04f 0000 	mov.w	r0, #0
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	00d9      	lsls	r1, r3, #3
 800372a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800372e:	00d0      	lsls	r0, r2, #3
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	1911      	adds	r1, r2, r4
 8003736:	65b9      	str	r1, [r7, #88]	; 0x58
 8003738:	416b      	adcs	r3, r5
 800373a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800373c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	461a      	mov	r2, r3
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	1891      	adds	r1, r2, r2
 8003748:	62b9      	str	r1, [r7, #40]	; 0x28
 800374a:	415b      	adcs	r3, r3
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003752:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003756:	f7fc ffd7 	bl	8000708 <__aeabi_uldivmod>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4b8c      	ldr	r3, [pc, #560]	; (8003990 <UART_SetConfig+0x38c>)
 8003760:	fba3 1302 	umull	r1, r3, r3, r2
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	2164      	movs	r1, #100	; 0x64
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	3332      	adds	r3, #50	; 0x32
 8003772:	4a87      	ldr	r2, [pc, #540]	; (8003990 <UART_SetConfig+0x38c>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003780:	441e      	add	r6, r3
 8003782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003784:	4618      	mov	r0, r3
 8003786:	f04f 0100 	mov.w	r1, #0
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	1894      	adds	r4, r2, r2
 8003790:	623c      	str	r4, [r7, #32]
 8003792:	415b      	adcs	r3, r3
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
 8003796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800379a:	1812      	adds	r2, r2, r0
 800379c:	eb41 0303 	adc.w	r3, r1, r3
 80037a0:	f04f 0400 	mov.w	r4, #0
 80037a4:	f04f 0500 	mov.w	r5, #0
 80037a8:	00dd      	lsls	r5, r3, #3
 80037aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037ae:	00d4      	lsls	r4, r2, #3
 80037b0:	4622      	mov	r2, r4
 80037b2:	462b      	mov	r3, r5
 80037b4:	1814      	adds	r4, r2, r0
 80037b6:	653c      	str	r4, [r7, #80]	; 0x50
 80037b8:	414b      	adcs	r3, r1
 80037ba:	657b      	str	r3, [r7, #84]	; 0x54
 80037bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	461a      	mov	r2, r3
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	1891      	adds	r1, r2, r2
 80037c8:	61b9      	str	r1, [r7, #24]
 80037ca:	415b      	adcs	r3, r3
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80037d6:	f7fc ff97 	bl	8000708 <__aeabi_uldivmod>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4b6c      	ldr	r3, [pc, #432]	; (8003990 <UART_SetConfig+0x38c>)
 80037e0:	fba3 1302 	umull	r1, r3, r3, r2
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	2164      	movs	r1, #100	; 0x64
 80037e8:	fb01 f303 	mul.w	r3, r1, r3
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	3332      	adds	r3, #50	; 0x32
 80037f2:	4a67      	ldr	r2, [pc, #412]	; (8003990 <UART_SetConfig+0x38c>)
 80037f4:	fba2 2303 	umull	r2, r3, r2, r3
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	f003 0207 	and.w	r2, r3, #7
 80037fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4432      	add	r2, r6
 8003804:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003806:	e0b9      	b.n	800397c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380a:	461c      	mov	r4, r3
 800380c:	f04f 0500 	mov.w	r5, #0
 8003810:	4622      	mov	r2, r4
 8003812:	462b      	mov	r3, r5
 8003814:	1891      	adds	r1, r2, r2
 8003816:	6139      	str	r1, [r7, #16]
 8003818:	415b      	adcs	r3, r3
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003820:	1912      	adds	r2, r2, r4
 8003822:	eb45 0303 	adc.w	r3, r5, r3
 8003826:	f04f 0000 	mov.w	r0, #0
 800382a:	f04f 0100 	mov.w	r1, #0
 800382e:	00d9      	lsls	r1, r3, #3
 8003830:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003834:	00d0      	lsls	r0, r2, #3
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	eb12 0804 	adds.w	r8, r2, r4
 800383e:	eb43 0905 	adc.w	r9, r3, r5
 8003842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4618      	mov	r0, r3
 8003848:	f04f 0100 	mov.w	r1, #0
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	008b      	lsls	r3, r1, #2
 8003856:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800385a:	0082      	lsls	r2, r0, #2
 800385c:	4640      	mov	r0, r8
 800385e:	4649      	mov	r1, r9
 8003860:	f7fc ff52 	bl	8000708 <__aeabi_uldivmod>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4b49      	ldr	r3, [pc, #292]	; (8003990 <UART_SetConfig+0x38c>)
 800386a:	fba3 2302 	umull	r2, r3, r3, r2
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	011e      	lsls	r6, r3, #4
 8003872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003874:	4618      	mov	r0, r3
 8003876:	f04f 0100 	mov.w	r1, #0
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	1894      	adds	r4, r2, r2
 8003880:	60bc      	str	r4, [r7, #8]
 8003882:	415b      	adcs	r3, r3
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800388a:	1812      	adds	r2, r2, r0
 800388c:	eb41 0303 	adc.w	r3, r1, r3
 8003890:	f04f 0400 	mov.w	r4, #0
 8003894:	f04f 0500 	mov.w	r5, #0
 8003898:	00dd      	lsls	r5, r3, #3
 800389a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800389e:	00d4      	lsls	r4, r2, #3
 80038a0:	4622      	mov	r2, r4
 80038a2:	462b      	mov	r3, r5
 80038a4:	1814      	adds	r4, r2, r0
 80038a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80038a8:	414b      	adcs	r3, r1
 80038aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	008b      	lsls	r3, r1, #2
 80038c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038c4:	0082      	lsls	r2, r0, #2
 80038c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80038ca:	f7fc ff1d 	bl	8000708 <__aeabi_uldivmod>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4b2f      	ldr	r3, [pc, #188]	; (8003990 <UART_SetConfig+0x38c>)
 80038d4:	fba3 1302 	umull	r1, r3, r3, r2
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	2164      	movs	r1, #100	; 0x64
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	3332      	adds	r3, #50	; 0x32
 80038e6:	4a2a      	ldr	r2, [pc, #168]	; (8003990 <UART_SetConfig+0x38c>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f2:	441e      	add	r6, r3
 80038f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038f6:	4618      	mov	r0, r3
 80038f8:	f04f 0100 	mov.w	r1, #0
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	1894      	adds	r4, r2, r2
 8003902:	603c      	str	r4, [r7, #0]
 8003904:	415b      	adcs	r3, r3
 8003906:	607b      	str	r3, [r7, #4]
 8003908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800390c:	1812      	adds	r2, r2, r0
 800390e:	eb41 0303 	adc.w	r3, r1, r3
 8003912:	f04f 0400 	mov.w	r4, #0
 8003916:	f04f 0500 	mov.w	r5, #0
 800391a:	00dd      	lsls	r5, r3, #3
 800391c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003920:	00d4      	lsls	r4, r2, #3
 8003922:	4622      	mov	r2, r4
 8003924:	462b      	mov	r3, r5
 8003926:	eb12 0a00 	adds.w	sl, r2, r0
 800392a:	eb43 0b01 	adc.w	fp, r3, r1
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4618      	mov	r0, r3
 8003934:	f04f 0100 	mov.w	r1, #0
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	008b      	lsls	r3, r1, #2
 8003942:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003946:	0082      	lsls	r2, r0, #2
 8003948:	4650      	mov	r0, sl
 800394a:	4659      	mov	r1, fp
 800394c:	f7fc fedc 	bl	8000708 <__aeabi_uldivmod>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <UART_SetConfig+0x38c>)
 8003956:	fba3 1302 	umull	r1, r3, r3, r2
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	2164      	movs	r1, #100	; 0x64
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	3332      	adds	r3, #50	; 0x32
 8003968:	4a09      	ldr	r2, [pc, #36]	; (8003990 <UART_SetConfig+0x38c>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	f003 020f 	and.w	r2, r3, #15
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4432      	add	r2, r6
 800397a:	609a      	str	r2, [r3, #8]
}
 800397c:	bf00      	nop
 800397e:	377c      	adds	r7, #124	; 0x7c
 8003980:	46bd      	mov	sp, r7
 8003982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003986:	bf00      	nop
 8003988:	40011000 	.word	0x40011000
 800398c:	40011400 	.word	0x40011400
 8003990:	51eb851f 	.word	0x51eb851f

08003994 <__NVIC_SetPriority>:
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	6039      	str	r1, [r7, #0]
 800399e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	db0a      	blt.n	80039be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	490c      	ldr	r1, [pc, #48]	; (80039e0 <__NVIC_SetPriority+0x4c>)
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	0112      	lsls	r2, r2, #4
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	440b      	add	r3, r1
 80039b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039bc:	e00a      	b.n	80039d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	4908      	ldr	r1, [pc, #32]	; (80039e4 <__NVIC_SetPriority+0x50>)
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	3b04      	subs	r3, #4
 80039cc:	0112      	lsls	r2, r2, #4
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	440b      	add	r3, r1
 80039d2:	761a      	strb	r2, [r3, #24]
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000e100 	.word	0xe000e100
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80039ec:	2100      	movs	r1, #0
 80039ee:	f06f 0004 	mvn.w	r0, #4
 80039f2:	f7ff ffcf 	bl	8003994 <__NVIC_SetPriority>
#endif
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a02:	f3ef 8305 	mrs	r3, IPSR
 8003a06:	603b      	str	r3, [r7, #0]
  return(result);
 8003a08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a0e:	f06f 0305 	mvn.w	r3, #5
 8003a12:	607b      	str	r3, [r7, #4]
 8003a14:	e00c      	b.n	8003a30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a16:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <osKernelInitialize+0x44>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d105      	bne.n	8003a2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <osKernelInitialize+0x44>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	607b      	str	r3, [r7, #4]
 8003a28:	e002      	b.n	8003a30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a30:	687b      	ldr	r3, [r7, #4]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	200000ac 	.word	0x200000ac

08003a44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a4a:	f3ef 8305 	mrs	r3, IPSR
 8003a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a56:	f06f 0305 	mvn.w	r3, #5
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	e010      	b.n	8003a80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <osKernelStart+0x48>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d109      	bne.n	8003a7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a66:	f7ff ffbf 	bl	80039e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <osKernelStart+0x48>)
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a70:	f001 f972 	bl	8004d58 <vTaskStartScheduler>
      stat = osOK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	e002      	b.n	8003a80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a80:	687b      	ldr	r3, [r7, #4]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200000ac 	.word	0x200000ac

08003a90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08e      	sub	sp, #56	; 0x38
 8003a94:	af04      	add	r7, sp, #16
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aa0:	f3ef 8305 	mrs	r3, IPSR
 8003aa4:	617b      	str	r3, [r7, #20]
  return(result);
 8003aa6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d17e      	bne.n	8003baa <osThreadNew+0x11a>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d07b      	beq.n	8003baa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ab6:	2318      	movs	r3, #24
 8003ab8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d045      	beq.n	8003b56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <osThreadNew+0x48>
        name = attr->name;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <osThreadNew+0x6e>
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b38      	cmp	r3, #56	; 0x38
 8003af0:	d805      	bhi.n	8003afe <osThreadNew+0x6e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <osThreadNew+0x72>
        return (NULL);
 8003afe:	2300      	movs	r3, #0
 8003b00:	e054      	b.n	8003bac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00e      	beq.n	8003b38 <osThreadNew+0xa8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2b5b      	cmp	r3, #91	; 0x5b
 8003b20:	d90a      	bls.n	8003b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d006      	beq.n	8003b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <osThreadNew+0xa8>
        mem = 1;
 8003b32:	2301      	movs	r3, #1
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	e010      	b.n	8003b5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10c      	bne.n	8003b5a <osThreadNew+0xca>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d108      	bne.n	8003b5a <osThreadNew+0xca>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d104      	bne.n	8003b5a <osThreadNew+0xca>
          mem = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	e001      	b.n	8003b5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d110      	bne.n	8003b82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b68:	9202      	str	r2, [sp, #8]
 8003b6a:	9301      	str	r3, [sp, #4]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6a3a      	ldr	r2, [r7, #32]
 8003b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 ff18 	bl	80049ac <xTaskCreateStatic>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	e013      	b.n	8003baa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d110      	bne.n	8003baa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	f107 0310 	add.w	r3, r7, #16
 8003b90:	9301      	str	r3, [sp, #4]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 ff63 	bl	8004a66 <xTaskCreate>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d001      	beq.n	8003baa <osThreadNew+0x11a>
            hTask = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003baa:	693b      	ldr	r3, [r7, #16]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3728      	adds	r7, #40	; 0x28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bbc:	f3ef 8305 	mrs	r3, IPSR
 8003bc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <osDelay+0x1c>
    stat = osErrorISR;
 8003bc8:	f06f 0305 	mvn.w	r3, #5
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	e007      	b.n	8003be0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f001 f888 	bl	8004cf0 <vTaskDelay>
    }
  }

  return (stat);
 8003be0:	68fb      	ldr	r3, [r7, #12]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b088      	sub	sp, #32
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bf6:	f3ef 8305 	mrs	r3, IPSR
 8003bfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bfc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d174      	bne.n	8003cec <osMutexNew+0x102>
    if (attr != NULL) {
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	e001      	b.n	8003c14 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <osMutexNew+0x3a>
      rmtx = 1U;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	e001      	b.n	8003c28 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d15c      	bne.n	8003cec <osMutexNew+0x102>
      mem = -1;
 8003c32:	f04f 33ff 	mov.w	r3, #4294967295
 8003c36:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d015      	beq.n	8003c6a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d006      	beq.n	8003c54 <osMutexNew+0x6a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	2b4f      	cmp	r3, #79	; 0x4f
 8003c4c:	d902      	bls.n	8003c54 <osMutexNew+0x6a>
          mem = 1;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	e00c      	b.n	8003c6e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d108      	bne.n	8003c6e <osMutexNew+0x84>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d104      	bne.n	8003c6e <osMutexNew+0x84>
            mem = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	e001      	b.n	8003c6e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d112      	bne.n	8003c9a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	2004      	movs	r0, #4
 8003c82:	f000 fa90 	bl	80041a6 <xQueueCreateMutexStatic>
 8003c86:	61f8      	str	r0, [r7, #28]
 8003c88:	e016      	b.n	8003cb8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	4619      	mov	r1, r3
 8003c90:	2001      	movs	r0, #1
 8003c92:	f000 fa88 	bl	80041a6 <xQueueCreateMutexStatic>
 8003c96:	61f8      	str	r0, [r7, #28]
 8003c98:	e00e      	b.n	8003cb8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10b      	bne.n	8003cb8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d004      	beq.n	8003cb0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003ca6:	2004      	movs	r0, #4
 8003ca8:	f000 fa65 	bl	8004176 <xQueueCreateMutex>
 8003cac:	61f8      	str	r0, [r7, #28]
 8003cae:	e003      	b.n	8003cb8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	f000 fa60 	bl	8004176 <xQueueCreateMutex>
 8003cb6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00c      	beq.n	8003cd8 <osMutexNew+0xee>
        if (attr != NULL) {
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <osMutexNew+0xe2>
          name = attr->name;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e001      	b.n	8003cd0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003cd0:	68f9      	ldr	r1, [r7, #12]
 8003cd2:	69f8      	ldr	r0, [r7, #28]
 8003cd4:	f000 fe0c 	bl	80048f0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d006      	beq.n	8003cec <osMutexNew+0x102>
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003cec:	69fb      	ldr	r3, [r7, #28]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4a07      	ldr	r2, [pc, #28]	; (8003d24 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4a06      	ldr	r2, [pc, #24]	; (8003d28 <vApplicationGetIdleTaskMemory+0x30>)
 8003d0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	601a      	str	r2, [r3, #0]
}
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	200000b0 	.word	0x200000b0
 8003d28:	2000010c 	.word	0x2000010c

08003d2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a07      	ldr	r2, [pc, #28]	; (8003d58 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4a06      	ldr	r2, [pc, #24]	; (8003d5c <vApplicationGetTimerTaskMemory+0x30>)
 8003d42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d4a:	601a      	str	r2, [r3, #0]
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	2000030c 	.word	0x2000030c
 8003d5c:	20000368 	.word	0x20000368

08003d60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f103 0208 	add.w	r2, r3, #8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f04f 32ff 	mov.w	r2, #4294967295
 8003d78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f103 0208 	add.w	r2, r3, #8
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f103 0208 	add.w	r2, r3, #8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	601a      	str	r2, [r3, #0]
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e02:	b480      	push	{r7}
 8003e04:	b085      	sub	sp, #20
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d103      	bne.n	8003e22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	e00c      	b.n	8003e3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3308      	adds	r3, #8
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e002      	b.n	8003e30 <vListInsert+0x2e>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d2f6      	bcs.n	8003e2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	601a      	str	r2, [r3, #0]
}
 8003e68:	bf00      	nop
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6892      	ldr	r2, [r2, #8]
 8003e8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6852      	ldr	r2, [r2, #4]
 8003e94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d103      	bne.n	8003ea8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	1e5a      	subs	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003eee:	bf00      	nop
 8003ef0:	e7fe      	b.n	8003ef0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ef2:	f002 f8d7 	bl	80060a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	441a      	add	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	3b01      	subs	r3, #1
 8003f24:	68f9      	ldr	r1, [r7, #12]
 8003f26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	441a      	add	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	22ff      	movs	r2, #255	; 0xff
 8003f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	22ff      	movs	r2, #255	; 0xff
 8003f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d114      	bne.n	8003f72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01a      	beq.n	8003f86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3310      	adds	r3, #16
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 f989 	bl	800526c <xTaskRemoveFromEventList>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d012      	beq.n	8003f86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <xQueueGenericReset+0xcc>)
 8003f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	e009      	b.n	8003f86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3310      	adds	r3, #16
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fef2 	bl	8003d60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3324      	adds	r3, #36	; 0x24
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff feed 	bl	8003d60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f86:	f002 f8bd 	bl	8006104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f8a:	2301      	movs	r3, #1
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08e      	sub	sp, #56	; 0x38
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10a      	bne.n	8003fc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fbe:	bf00      	nop
 8003fc0:	e7fe      	b.n	8003fc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fda:	bf00      	nop
 8003fdc:	e7fe      	b.n	8003fdc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <xQueueGenericCreateStatic+0x52>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <xQueueGenericCreateStatic+0x56>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <xQueueGenericCreateStatic+0x58>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	623b      	str	r3, [r7, #32]
}
 8004006:	bf00      	nop
 8004008:	e7fe      	b.n	8004008 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d102      	bne.n	8004016 <xQueueGenericCreateStatic+0x7e>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <xQueueGenericCreateStatic+0x82>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <xQueueGenericCreateStatic+0x84>
 800401a:	2300      	movs	r3, #0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	61fb      	str	r3, [r7, #28]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004036:	2350      	movs	r3, #80	; 0x50
 8004038:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b50      	cmp	r3, #80	; 0x50
 800403e:	d00a      	beq.n	8004056 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	61bb      	str	r3, [r7, #24]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004056:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00d      	beq.n	800407e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800406a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800406e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	4613      	mov	r3, r2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	68b9      	ldr	r1, [r7, #8]
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f83f 	bl	80040fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004080:	4618      	mov	r0, r3
 8004082:	3730      	adds	r7, #48	; 0x30
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	; 0x28
 800408c:	af02      	add	r7, sp, #8
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	4613      	mov	r3, r2
 8004094:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	613b      	str	r3, [r7, #16]
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	3350      	adds	r3, #80	; 0x50
 80040c0:	4618      	mov	r0, r3
 80040c2:	f002 f911 	bl	80062e8 <pvPortMalloc>
 80040c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d011      	beq.n	80040f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	3350      	adds	r3, #80	; 0x50
 80040d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040e0:	79fa      	ldrb	r2, [r7, #7]
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	4613      	mov	r3, r2
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f805 	bl	80040fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040f2:	69bb      	ldr	r3, [r7, #24]
	}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d103      	bne.n	8004118 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	e002      	b.n	800411e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800412a:	2101      	movs	r1, #1
 800412c:	69b8      	ldr	r0, [r7, #24]
 800412e:	f7ff fecb 	bl	8003ec8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	78fa      	ldrb	r2, [r7, #3]
 8004136:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00e      	beq.n	800416e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004162:	2300      	movs	r3, #0
 8004164:	2200      	movs	r2, #0
 8004166:	2100      	movs	r1, #0
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f837 	bl	80041dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004176:	b580      	push	{r7, lr}
 8004178:	b086      	sub	sp, #24
 800417a:	af00      	add	r7, sp, #0
 800417c:	4603      	mov	r3, r0
 800417e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004180:	2301      	movs	r3, #1
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	2300      	movs	r3, #0
 8004186:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	461a      	mov	r2, r3
 800418c:	6939      	ldr	r1, [r7, #16]
 800418e:	6978      	ldr	r0, [r7, #20]
 8004190:	f7ff ff7a 	bl	8004088 <xQueueGenericCreate>
 8004194:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f7ff ffd3 	bl	8004142 <prvInitialiseMutex>

		return xNewQueue;
 800419c:	68fb      	ldr	r3, [r7, #12]
	}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b088      	sub	sp, #32
 80041aa:	af02      	add	r7, sp, #8
 80041ac:	4603      	mov	r3, r0
 80041ae:	6039      	str	r1, [r7, #0]
 80041b0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80041b2:	2301      	movs	r3, #1
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	2300      	movs	r3, #0
 80041b8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2200      	movs	r2, #0
 80041c2:	6939      	ldr	r1, [r7, #16]
 80041c4:	6978      	ldr	r0, [r7, #20]
 80041c6:	f7ff fee7 	bl	8003f98 <xQueueGenericCreateStatic>
 80041ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f7ff ffb8 	bl	8004142 <prvInitialiseMutex>

		return xNewQueue;
 80041d2:	68fb      	ldr	r3, [r7, #12]
	}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08e      	sub	sp, #56	; 0x38
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041ea:	2300      	movs	r3, #0
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <xQueueGenericSend+0x32>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d103      	bne.n	800421c <xQueueGenericSend+0x40>
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <xQueueGenericSend+0x44>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <xQueueGenericSend+0x46>
 8004220:	2300      	movs	r3, #0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <xQueueGenericSend+0x60>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004238:	bf00      	nop
 800423a:	e7fe      	b.n	800423a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d103      	bne.n	800424a <xQueueGenericSend+0x6e>
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <xQueueGenericSend+0x72>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <xQueueGenericSend+0x74>
 800424e:	2300      	movs	r3, #0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10a      	bne.n	800426a <xQueueGenericSend+0x8e>
	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	623b      	str	r3, [r7, #32]
}
 8004266:	bf00      	nop
 8004268:	e7fe      	b.n	8004268 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800426a:	f001 f9bd 	bl	80055e8 <xTaskGetSchedulerState>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d102      	bne.n	800427a <xQueueGenericSend+0x9e>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <xQueueGenericSend+0xa2>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <xQueueGenericSend+0xa4>
 800427e:	2300      	movs	r3, #0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <xQueueGenericSend+0xbe>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	61fb      	str	r3, [r7, #28]
}
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800429a:	f001 ff03 	bl	80060a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d302      	bcc.n	80042b0 <xQueueGenericSend+0xd4>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d129      	bne.n	8004304 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042b6:	f000 fa0b 	bl	80046d0 <prvCopyDataToQueue>
 80042ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d010      	beq.n	80042e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	3324      	adds	r3, #36	; 0x24
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 ffcf 	bl	800526c <xTaskRemoveFromEventList>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d013      	beq.n	80042fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042d4:	4b3f      	ldr	r3, [pc, #252]	; (80043d4 <xQueueGenericSend+0x1f8>)
 80042d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	e00a      	b.n	80042fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042ec:	4b39      	ldr	r3, [pc, #228]	; (80043d4 <xQueueGenericSend+0x1f8>)
 80042ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042fc:	f001 ff02 	bl	8006104 <vPortExitCritical>
				return pdPASS;
 8004300:	2301      	movs	r3, #1
 8004302:	e063      	b.n	80043cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d103      	bne.n	8004312 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800430a:	f001 fefb 	bl	8006104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800430e:	2300      	movs	r3, #0
 8004310:	e05c      	b.n	80043cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	4618      	mov	r0, r3
 800431e:	f001 f809 	bl	8005334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004322:	2301      	movs	r3, #1
 8004324:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004326:	f001 feed 	bl	8006104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800432a:	f000 fd7b 	bl	8004e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800432e:	f001 feb9 	bl	80060a4 <vPortEnterCritical>
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004338:	b25b      	sxtb	r3, r3
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d103      	bne.n	8004348 <xQueueGenericSend+0x16c>
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800434e:	b25b      	sxtb	r3, r3
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d103      	bne.n	800435e <xQueueGenericSend+0x182>
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800435e:	f001 fed1 	bl	8006104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004362:	1d3a      	adds	r2, r7, #4
 8004364:	f107 0314 	add.w	r3, r7, #20
 8004368:	4611      	mov	r1, r2
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fff8 	bl	8005360 <xTaskCheckForTimeOut>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d124      	bne.n	80043c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004376:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004378:	f000 faa2 	bl	80048c0 <prvIsQueueFull>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d018      	beq.n	80043b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	3310      	adds	r3, #16
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	4611      	mov	r1, r2
 800438a:	4618      	mov	r0, r3
 800438c:	f000 ff1e 	bl	80051cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004392:	f000 fa2d 	bl	80047f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004396:	f000 fd53 	bl	8004e40 <xTaskResumeAll>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	f47f af7c 	bne.w	800429a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80043a2:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <xQueueGenericSend+0x1f8>)
 80043a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	e772      	b.n	800429a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043b6:	f000 fa1b 	bl	80047f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043ba:	f000 fd41 	bl	8004e40 <xTaskResumeAll>
 80043be:	e76c      	b.n	800429a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043c2:	f000 fa15 	bl	80047f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043c6:	f000 fd3b 	bl	8004e40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3738      	adds	r7, #56	; 0x38
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	e000ed04 	.word	0xe000ed04

080043d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b090      	sub	sp, #64	; 0x40
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80043ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004402:	bf00      	nop
 8004404:	e7fe      	b.n	8004404 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d103      	bne.n	8004414 <xQueueGenericSendFromISR+0x3c>
 800440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <xQueueGenericSendFromISR+0x40>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <xQueueGenericSendFromISR+0x42>
 8004418:	2300      	movs	r3, #0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10a      	bne.n	8004434 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004430:	bf00      	nop
 8004432:	e7fe      	b.n	8004432 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d103      	bne.n	8004442 <xQueueGenericSendFromISR+0x6a>
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <xQueueGenericSendFromISR+0x6e>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <xQueueGenericSendFromISR+0x70>
 8004446:	2300      	movs	r3, #0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800444c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004450:	f383 8811 	msr	BASEPRI, r3
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	623b      	str	r3, [r7, #32]
}
 800445e:	bf00      	nop
 8004460:	e7fe      	b.n	8004460 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004462:	f001 ff01 	bl	8006268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004466:	f3ef 8211 	mrs	r2, BASEPRI
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	61fa      	str	r2, [r7, #28]
 800447c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800447e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004480:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <xQueueGenericSendFromISR+0xbc>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d12f      	bne.n	80044f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004496:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800449a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800449e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80044aa:	f000 f911 	bl	80046d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80044b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b6:	d112      	bne.n	80044de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d016      	beq.n	80044ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c2:	3324      	adds	r3, #36	; 0x24
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fed1 	bl	800526c <xTaskRemoveFromEventList>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00e      	beq.n	80044ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	e007      	b.n	80044ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044e2:	3301      	adds	r3, #1
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	b25a      	sxtb	r2, r3
 80044e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044ee:	2301      	movs	r3, #1
 80044f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80044f2:	e001      	b.n	80044f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004502:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004506:	4618      	mov	r0, r3
 8004508:	3740      	adds	r7, #64	; 0x40
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08c      	sub	sp, #48	; 0x30
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800451c:	2300      	movs	r3, #0
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10a      	bne.n	8004540 <xQueueReceive+0x30>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	623b      	str	r3, [r7, #32]
}
 800453c:	bf00      	nop
 800453e:	e7fe      	b.n	800453e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d103      	bne.n	800454e <xQueueReceive+0x3e>
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <xQueueReceive+0x42>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <xQueueReceive+0x44>
 8004552:	2300      	movs	r3, #0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <xQueueReceive+0x5e>
	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	61fb      	str	r3, [r7, #28]
}
 800456a:	bf00      	nop
 800456c:	e7fe      	b.n	800456c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800456e:	f001 f83b 	bl	80055e8 <xTaskGetSchedulerState>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d102      	bne.n	800457e <xQueueReceive+0x6e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <xQueueReceive+0x72>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <xQueueReceive+0x74>
 8004582:	2300      	movs	r3, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <xQueueReceive+0x8e>
	__asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	61bb      	str	r3, [r7, #24]
}
 800459a:	bf00      	nop
 800459c:	e7fe      	b.n	800459c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800459e:	f001 fd81 	bl	80060a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d01f      	beq.n	80045ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045b2:	f000 f8f7 	bl	80047a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	1e5a      	subs	r2, r3, #1
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00f      	beq.n	80045e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	3310      	adds	r3, #16
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fe4e 	bl	800526c <xTaskRemoveFromEventList>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d007      	beq.n	80045e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045d6:	4b3d      	ldr	r3, [pc, #244]	; (80046cc <xQueueReceive+0x1bc>)
 80045d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045e6:	f001 fd8d 	bl	8006104 <vPortExitCritical>
				return pdPASS;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e069      	b.n	80046c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d103      	bne.n	80045fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045f4:	f001 fd86 	bl	8006104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e062      	b.n	80046c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004602:	f107 0310 	add.w	r3, r7, #16
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fe94 	bl	8005334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800460c:	2301      	movs	r3, #1
 800460e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004610:	f001 fd78 	bl	8006104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004614:	f000 fc06 	bl	8004e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004618:	f001 fd44 	bl	80060a4 <vPortEnterCritical>
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004622:	b25b      	sxtb	r3, r3
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d103      	bne.n	8004632 <xQueueReceive+0x122>
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004638:	b25b      	sxtb	r3, r3
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463e:	d103      	bne.n	8004648 <xQueueReceive+0x138>
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004648:	f001 fd5c 	bl	8006104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800464c:	1d3a      	adds	r2, r7, #4
 800464e:	f107 0310 	add.w	r3, r7, #16
 8004652:	4611      	mov	r1, r2
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fe83 	bl	8005360 <xTaskCheckForTimeOut>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d123      	bne.n	80046a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004662:	f000 f917 	bl	8004894 <prvIsQueueEmpty>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d017      	beq.n	800469c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	3324      	adds	r3, #36	; 0x24
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4611      	mov	r1, r2
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fda9 	bl	80051cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800467a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800467c:	f000 f8b8 	bl	80047f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004680:	f000 fbde 	bl	8004e40 <xTaskResumeAll>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d189      	bne.n	800459e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800468a:	4b10      	ldr	r3, [pc, #64]	; (80046cc <xQueueReceive+0x1bc>)
 800468c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	e780      	b.n	800459e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800469c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800469e:	f000 f8a7 	bl	80047f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046a2:	f000 fbcd 	bl	8004e40 <xTaskResumeAll>
 80046a6:	e77a      	b.n	800459e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046aa:	f000 f8a1 	bl	80047f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046ae:	f000 fbc7 	bl	8004e40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046b4:	f000 f8ee 	bl	8004894 <prvIsQueueEmpty>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f43f af6f 	beq.w	800459e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3730      	adds	r7, #48	; 0x30
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	e000ed04 	.word	0xe000ed04

080046d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10d      	bne.n	800470a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d14d      	bne.n	8004792 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 ff92 	bl	8005624 <xTaskPriorityDisinherit>
 8004700:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	e043      	b.n	8004792 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d119      	bne.n	8004744 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6858      	ldr	r0, [r3, #4]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	461a      	mov	r2, r3
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	f001 fff8 	bl	8006710 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	441a      	add	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	429a      	cmp	r2, r3
 8004738:	d32b      	bcc.n	8004792 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	e026      	b.n	8004792 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	68d8      	ldr	r0, [r3, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	461a      	mov	r2, r3
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	f001 ffde 	bl	8006710 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	425b      	negs	r3, r3
 800475e:	441a      	add	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d207      	bcs.n	8004780 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	425b      	negs	r3, r3
 800477a:	441a      	add	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d105      	bne.n	8004792 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	3b01      	subs	r3, #1
 8004790:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800479a:	697b      	ldr	r3, [r7, #20]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d018      	beq.n	80047e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	441a      	add	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d303      	bcc.n	80047d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68d9      	ldr	r1, [r3, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	461a      	mov	r2, r3
 80047e2:	6838      	ldr	r0, [r7, #0]
 80047e4:	f001 ff94 	bl	8006710 <memcpy>
	}
}
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80047f8:	f001 fc54 	bl	80060a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004802:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004804:	e011      	b.n	800482a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	2b00      	cmp	r3, #0
 800480c:	d012      	beq.n	8004834 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3324      	adds	r3, #36	; 0x24
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fd2a 	bl	800526c <xTaskRemoveFromEventList>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800481e:	f000 fe01 	bl	8005424 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	3b01      	subs	r3, #1
 8004826:	b2db      	uxtb	r3, r3
 8004828:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800482a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800482e:	2b00      	cmp	r3, #0
 8004830:	dce9      	bgt.n	8004806 <prvUnlockQueue+0x16>
 8004832:	e000      	b.n	8004836 <prvUnlockQueue+0x46>
					break;
 8004834:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	22ff      	movs	r2, #255	; 0xff
 800483a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800483e:	f001 fc61 	bl	8006104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004842:	f001 fc2f 	bl	80060a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800484c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800484e:	e011      	b.n	8004874 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d012      	beq.n	800487e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3310      	adds	r3, #16
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fd05 	bl	800526c <xTaskRemoveFromEventList>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004868:	f000 fddc 	bl	8005424 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800486c:	7bbb      	ldrb	r3, [r7, #14]
 800486e:	3b01      	subs	r3, #1
 8004870:	b2db      	uxtb	r3, r3
 8004872:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004878:	2b00      	cmp	r3, #0
 800487a:	dce9      	bgt.n	8004850 <prvUnlockQueue+0x60>
 800487c:	e000      	b.n	8004880 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800487e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	22ff      	movs	r2, #255	; 0xff
 8004884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004888:	f001 fc3c 	bl	8006104 <vPortExitCritical>
}
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800489c:	f001 fc02 	bl	80060a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d102      	bne.n	80048ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048a8:	2301      	movs	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e001      	b.n	80048b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048b2:	f001 fc27 	bl	8006104 <vPortExitCritical>

	return xReturn;
 80048b6:	68fb      	ldr	r3, [r7, #12]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048c8:	f001 fbec 	bl	80060a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d102      	bne.n	80048de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80048d8:	2301      	movs	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e001      	b.n	80048e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048e2:	f001 fc0f 	bl	8006104 <vPortExitCritical>

	return xReturn;
 80048e6:	68fb      	ldr	r3, [r7, #12]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	e014      	b.n	800492a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004900:	4a0f      	ldr	r2, [pc, #60]	; (8004940 <vQueueAddToRegistry+0x50>)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10b      	bne.n	8004924 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800490c:	490c      	ldr	r1, [pc, #48]	; (8004940 <vQueueAddToRegistry+0x50>)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004916:	4a0a      	ldr	r2, [pc, #40]	; (8004940 <vQueueAddToRegistry+0x50>)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4413      	add	r3, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004922:	e006      	b.n	8004932 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3301      	adds	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b07      	cmp	r3, #7
 800492e:	d9e7      	bls.n	8004900 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20004ac4 	.word	0x20004ac4

08004944 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004954:	f001 fba6 	bl	80060a4 <vPortEnterCritical>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800495e:	b25b      	sxtb	r3, r3
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d103      	bne.n	800496e <vQueueWaitForMessageRestricted+0x2a>
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004974:	b25b      	sxtb	r3, r3
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497a:	d103      	bne.n	8004984 <vQueueWaitForMessageRestricted+0x40>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004984:	f001 fbbe 	bl	8006104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	2b00      	cmp	r3, #0
 800498e:	d106      	bne.n	800499e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	3324      	adds	r3, #36	; 0x24
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fc3b 	bl	8005214 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800499e:	6978      	ldr	r0, [r7, #20]
 80049a0:	f7ff ff26 	bl	80047f0 <prvUnlockQueue>
	}
 80049a4:	bf00      	nop
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08e      	sub	sp, #56	; 0x38
 80049b0:	af04      	add	r7, sp, #16
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	623b      	str	r3, [r7, #32]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10a      	bne.n	80049f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	61fb      	str	r3, [r7, #28]
}
 80049ee:	bf00      	nop
 80049f0:	e7fe      	b.n	80049f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049f2:	235c      	movs	r3, #92	; 0x5c
 80049f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	2b5c      	cmp	r3, #92	; 0x5c
 80049fa:	d00a      	beq.n	8004a12 <xTaskCreateStatic+0x66>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	61bb      	str	r3, [r7, #24]
}
 8004a0e:	bf00      	nop
 8004a10:	e7fe      	b.n	8004a10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01e      	beq.n	8004a58 <xTaskCreateStatic+0xac>
 8004a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01b      	beq.n	8004a58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a32:	2300      	movs	r3, #0
 8004a34:	9303      	str	r3, [sp, #12]
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	9302      	str	r3, [sp, #8]
 8004a3a:	f107 0314 	add.w	r3, r7, #20
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f850 	bl	8004af0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a52:	f000 f8dd 	bl	8004c10 <prvAddNewTaskToReadyList>
 8004a56:	e001      	b.n	8004a5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a5c:	697b      	ldr	r3, [r7, #20]
	}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3728      	adds	r7, #40	; 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b08c      	sub	sp, #48	; 0x30
 8004a6a:	af04      	add	r7, sp, #16
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	603b      	str	r3, [r7, #0]
 8004a72:	4613      	mov	r3, r2
 8004a74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f001 fc34 	bl	80062e8 <pvPortMalloc>
 8004a80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00e      	beq.n	8004aa6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a88:	205c      	movs	r0, #92	; 0x5c
 8004a8a:	f001 fc2d 	bl	80062e8 <pvPortMalloc>
 8004a8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a9c:	e005      	b.n	8004aaa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a9e:	6978      	ldr	r0, [r7, #20]
 8004aa0:	f001 fcee 	bl	8006480 <vPortFree>
 8004aa4:	e001      	b.n	8004aaa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d017      	beq.n	8004ae0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ab8:	88fa      	ldrh	r2, [r7, #6]
 8004aba:	2300      	movs	r3, #0
 8004abc:	9303      	str	r3, [sp, #12]
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	9302      	str	r3, [sp, #8]
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f80e 	bl	8004af0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ad4:	69f8      	ldr	r0, [r7, #28]
 8004ad6:	f000 f89b 	bl	8004c10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ada:	2301      	movs	r3, #1
 8004adc:	61bb      	str	r3, [r7, #24]
 8004ade:	e002      	b.n	8004ae6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
	}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	461a      	mov	r2, r3
 8004b08:	21a5      	movs	r1, #165	; 0xa5
 8004b0a:	f001 fe0f 	bl	800672c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f023 0307 	bic.w	r3, r3, #7
 8004b26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	617b      	str	r3, [r7, #20]
}
 8004b44:	bf00      	nop
 8004b46:	e7fe      	b.n	8004b46 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01f      	beq.n	8004b8e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	e012      	b.n	8004b7a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	7819      	ldrb	r1, [r3, #0]
 8004b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	4413      	add	r3, r2
 8004b62:	3334      	adds	r3, #52	; 0x34
 8004b64:	460a      	mov	r2, r1
 8004b66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d006      	beq.n	8004b82 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	3301      	adds	r3, #1
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2b0f      	cmp	r3, #15
 8004b7e:	d9e9      	bls.n	8004b54 <prvInitialiseNewTask+0x64>
 8004b80:	e000      	b.n	8004b84 <prvInitialiseNewTask+0x94>
			{
				break;
 8004b82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b8c:	e003      	b.n	8004b96 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	2b37      	cmp	r3, #55	; 0x37
 8004b9a:	d901      	bls.n	8004ba0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b9c:	2337      	movs	r3, #55	; 0x37
 8004b9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ba4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004baa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	2200      	movs	r2, #0
 8004bb0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff f8f2 	bl	8003da0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	3318      	adds	r3, #24
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff f8ed 	bl	8003da0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	2200      	movs	r2, #0
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	68f9      	ldr	r1, [r7, #12]
 8004bee:	69b8      	ldr	r0, [r7, #24]
 8004bf0:	f001 f928 	bl	8005e44 <pxPortInitialiseStack>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c06:	bf00      	nop
 8004c08:	3720      	adds	r7, #32
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c18:	f001 fa44 	bl	80060a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c1c:	4b2d      	ldr	r3, [pc, #180]	; (8004cd4 <prvAddNewTaskToReadyList+0xc4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3301      	adds	r3, #1
 8004c22:	4a2c      	ldr	r2, [pc, #176]	; (8004cd4 <prvAddNewTaskToReadyList+0xc4>)
 8004c24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c26:	4b2c      	ldr	r3, [pc, #176]	; (8004cd8 <prvAddNewTaskToReadyList+0xc8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c2e:	4a2a      	ldr	r2, [pc, #168]	; (8004cd8 <prvAddNewTaskToReadyList+0xc8>)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c34:	4b27      	ldr	r3, [pc, #156]	; (8004cd4 <prvAddNewTaskToReadyList+0xc4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d110      	bne.n	8004c5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c3c:	f000 fc16 	bl	800546c <prvInitialiseTaskLists>
 8004c40:	e00d      	b.n	8004c5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c42:	4b26      	ldr	r3, [pc, #152]	; (8004cdc <prvAddNewTaskToReadyList+0xcc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c4a:	4b23      	ldr	r3, [pc, #140]	; (8004cd8 <prvAddNewTaskToReadyList+0xc8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d802      	bhi.n	8004c5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c58:	4a1f      	ldr	r2, [pc, #124]	; (8004cd8 <prvAddNewTaskToReadyList+0xc8>)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c5e:	4b20      	ldr	r3, [pc, #128]	; (8004ce0 <prvAddNewTaskToReadyList+0xd0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	4a1e      	ldr	r2, [pc, #120]	; (8004ce0 <prvAddNewTaskToReadyList+0xd0>)
 8004c66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c68:	4b1d      	ldr	r3, [pc, #116]	; (8004ce0 <prvAddNewTaskToReadyList+0xd0>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c74:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <prvAddNewTaskToReadyList+0xd4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d903      	bls.n	8004c84 <prvAddNewTaskToReadyList+0x74>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	4a18      	ldr	r2, [pc, #96]	; (8004ce4 <prvAddNewTaskToReadyList+0xd4>)
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4a15      	ldr	r2, [pc, #84]	; (8004ce8 <prvAddNewTaskToReadyList+0xd8>)
 8004c92:	441a      	add	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3304      	adds	r3, #4
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f7ff f88d 	bl	8003dba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ca0:	f001 fa30 	bl	8006104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ca4:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <prvAddNewTaskToReadyList+0xcc>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00e      	beq.n	8004cca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <prvAddNewTaskToReadyList+0xc8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d207      	bcs.n	8004cca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cba:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <prvAddNewTaskToReadyList+0xdc>)
 8004cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000c3c 	.word	0x20000c3c
 8004cd8:	20000768 	.word	0x20000768
 8004cdc:	20000c48 	.word	0x20000c48
 8004ce0:	20000c58 	.word	0x20000c58
 8004ce4:	20000c44 	.word	0x20000c44
 8004ce8:	2000076c 	.word	0x2000076c
 8004cec:	e000ed04 	.word	0xe000ed04

08004cf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d017      	beq.n	8004d32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d02:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <vTaskDelay+0x60>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <vTaskDelay+0x30>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	60bb      	str	r3, [r7, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	e7fe      	b.n	8004d1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d20:	f000 f880 	bl	8004e24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d24:	2100      	movs	r1, #0
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fcea 	bl	8005700 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d2c:	f000 f888 	bl	8004e40 <xTaskResumeAll>
 8004d30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d107      	bne.n	8004d48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <vTaskDelay+0x64>)
 8004d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20000c64 	.word	0x20000c64
 8004d54:	e000ed04 	.word	0xe000ed04

08004d58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08a      	sub	sp, #40	; 0x28
 8004d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d66:	463a      	mov	r2, r7
 8004d68:	1d39      	adds	r1, r7, #4
 8004d6a:	f107 0308 	add.w	r3, r7, #8
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe ffc2 	bl	8003cf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d74:	6839      	ldr	r1, [r7, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	9202      	str	r2, [sp, #8]
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	2300      	movs	r3, #0
 8004d84:	460a      	mov	r2, r1
 8004d86:	4921      	ldr	r1, [pc, #132]	; (8004e0c <vTaskStartScheduler+0xb4>)
 8004d88:	4821      	ldr	r0, [pc, #132]	; (8004e10 <vTaskStartScheduler+0xb8>)
 8004d8a:	f7ff fe0f 	bl	80049ac <xTaskCreateStatic>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <vTaskStartScheduler+0xbc>)
 8004d92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d94:	4b1f      	ldr	r3, [pc, #124]	; (8004e14 <vTaskStartScheduler+0xbc>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e001      	b.n	8004da6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d102      	bne.n	8004db2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004dac:	f000 fcfc 	bl	80057a8 <xTimerCreateTimerTask>
 8004db0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d116      	bne.n	8004de6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	613b      	str	r3, [r7, #16]
}
 8004dca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004dcc:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <vTaskStartScheduler+0xc0>)
 8004dce:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dd4:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <vTaskStartScheduler+0xc4>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004dda:	4b11      	ldr	r3, [pc, #68]	; (8004e20 <vTaskStartScheduler+0xc8>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004de0:	f001 f8be 	bl	8005f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004de4:	e00e      	b.n	8004e04 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d10a      	bne.n	8004e04 <vTaskStartScheduler+0xac>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	60fb      	str	r3, [r7, #12]
}
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <vTaskStartScheduler+0xaa>
}
 8004e04:	bf00      	nop
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	0800700c 	.word	0x0800700c
 8004e10:	0800543d 	.word	0x0800543d
 8004e14:	20000c60 	.word	0x20000c60
 8004e18:	20000c5c 	.word	0x20000c5c
 8004e1c:	20000c48 	.word	0x20000c48
 8004e20:	20000c40 	.word	0x20000c40

08004e24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e28:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <vTaskSuspendAll+0x18>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	4a03      	ldr	r2, [pc, #12]	; (8004e3c <vTaskSuspendAll+0x18>)
 8004e30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e32:	bf00      	nop
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	20000c64 	.word	0x20000c64

08004e40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e4e:	4b42      	ldr	r3, [pc, #264]	; (8004f58 <xTaskResumeAll+0x118>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10a      	bne.n	8004e6c <xTaskResumeAll+0x2c>
	__asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	603b      	str	r3, [r7, #0]
}
 8004e68:	bf00      	nop
 8004e6a:	e7fe      	b.n	8004e6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e6c:	f001 f91a 	bl	80060a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e70:	4b39      	ldr	r3, [pc, #228]	; (8004f58 <xTaskResumeAll+0x118>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	4a38      	ldr	r2, [pc, #224]	; (8004f58 <xTaskResumeAll+0x118>)
 8004e78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e7a:	4b37      	ldr	r3, [pc, #220]	; (8004f58 <xTaskResumeAll+0x118>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d162      	bne.n	8004f48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e82:	4b36      	ldr	r3, [pc, #216]	; (8004f5c <xTaskResumeAll+0x11c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d05e      	beq.n	8004f48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e8a:	e02f      	b.n	8004eec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e8c:	4b34      	ldr	r3, [pc, #208]	; (8004f60 <xTaskResumeAll+0x120>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3318      	adds	r3, #24
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fe ffeb 	bl	8003e74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe ffe6 	bl	8003e74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eac:	4b2d      	ldr	r3, [pc, #180]	; (8004f64 <xTaskResumeAll+0x124>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d903      	bls.n	8004ebc <xTaskResumeAll+0x7c>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	4a2a      	ldr	r2, [pc, #168]	; (8004f64 <xTaskResumeAll+0x124>)
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4a27      	ldr	r2, [pc, #156]	; (8004f68 <xTaskResumeAll+0x128>)
 8004eca:	441a      	add	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f7fe ff71 	bl	8003dba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004edc:	4b23      	ldr	r3, [pc, #140]	; (8004f6c <xTaskResumeAll+0x12c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d302      	bcc.n	8004eec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004ee6:	4b22      	ldr	r3, [pc, #136]	; (8004f70 <xTaskResumeAll+0x130>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004eec:	4b1c      	ldr	r3, [pc, #112]	; (8004f60 <xTaskResumeAll+0x120>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1cb      	bne.n	8004e8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004efa:	f000 fb55 	bl	80055a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004efe:	4b1d      	ldr	r3, [pc, #116]	; (8004f74 <xTaskResumeAll+0x134>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d010      	beq.n	8004f2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f0a:	f000 f847 	bl	8004f9c <xTaskIncrementTick>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f14:	4b16      	ldr	r3, [pc, #88]	; (8004f70 <xTaskResumeAll+0x130>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f1      	bne.n	8004f0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004f26:	4b13      	ldr	r3, [pc, #76]	; (8004f74 <xTaskResumeAll+0x134>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f2c:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <xTaskResumeAll+0x130>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f34:	2301      	movs	r3, #1
 8004f36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f38:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <xTaskResumeAll+0x138>)
 8004f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f48:	f001 f8dc 	bl	8006104 <vPortExitCritical>

	return xAlreadyYielded;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000c64 	.word	0x20000c64
 8004f5c:	20000c3c 	.word	0x20000c3c
 8004f60:	20000bfc 	.word	0x20000bfc
 8004f64:	20000c44 	.word	0x20000c44
 8004f68:	2000076c 	.word	0x2000076c
 8004f6c:	20000768 	.word	0x20000768
 8004f70:	20000c50 	.word	0x20000c50
 8004f74:	20000c4c 	.word	0x20000c4c
 8004f78:	e000ed04 	.word	0xe000ed04

08004f7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f82:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <xTaskGetTickCount+0x1c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f88:	687b      	ldr	r3, [r7, #4]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	20000c40 	.word	0x20000c40

08004f9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fa6:	4b4f      	ldr	r3, [pc, #316]	; (80050e4 <xTaskIncrementTick+0x148>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f040 808f 	bne.w	80050ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fb0:	4b4d      	ldr	r3, [pc, #308]	; (80050e8 <xTaskIncrementTick+0x14c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004fb8:	4a4b      	ldr	r2, [pc, #300]	; (80050e8 <xTaskIncrementTick+0x14c>)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d120      	bne.n	8005006 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fc4:	4b49      	ldr	r3, [pc, #292]	; (80050ec <xTaskIncrementTick+0x150>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	603b      	str	r3, [r7, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	e7fe      	b.n	8004fe2 <xTaskIncrementTick+0x46>
 8004fe4:	4b41      	ldr	r3, [pc, #260]	; (80050ec <xTaskIncrementTick+0x150>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	4b41      	ldr	r3, [pc, #260]	; (80050f0 <xTaskIncrementTick+0x154>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a3f      	ldr	r2, [pc, #252]	; (80050ec <xTaskIncrementTick+0x150>)
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	4a3f      	ldr	r2, [pc, #252]	; (80050f0 <xTaskIncrementTick+0x154>)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4b3e      	ldr	r3, [pc, #248]	; (80050f4 <xTaskIncrementTick+0x158>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	4a3d      	ldr	r2, [pc, #244]	; (80050f4 <xTaskIncrementTick+0x158>)
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	f000 fad1 	bl	80055a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005006:	4b3c      	ldr	r3, [pc, #240]	; (80050f8 <xTaskIncrementTick+0x15c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	429a      	cmp	r2, r3
 800500e:	d349      	bcc.n	80050a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005010:	4b36      	ldr	r3, [pc, #216]	; (80050ec <xTaskIncrementTick+0x150>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d104      	bne.n	8005024 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800501a:	4b37      	ldr	r3, [pc, #220]	; (80050f8 <xTaskIncrementTick+0x15c>)
 800501c:	f04f 32ff 	mov.w	r2, #4294967295
 8005020:	601a      	str	r2, [r3, #0]
					break;
 8005022:	e03f      	b.n	80050a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005024:	4b31      	ldr	r3, [pc, #196]	; (80050ec <xTaskIncrementTick+0x150>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	429a      	cmp	r2, r3
 800503a:	d203      	bcs.n	8005044 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800503c:	4a2e      	ldr	r2, [pc, #184]	; (80050f8 <xTaskIncrementTick+0x15c>)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005042:	e02f      	b.n	80050a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	3304      	adds	r3, #4
 8005048:	4618      	mov	r0, r3
 800504a:	f7fe ff13 	bl	8003e74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	2b00      	cmp	r3, #0
 8005054:	d004      	beq.n	8005060 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	3318      	adds	r3, #24
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe ff0a 	bl	8003e74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005064:	4b25      	ldr	r3, [pc, #148]	; (80050fc <xTaskIncrementTick+0x160>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d903      	bls.n	8005074 <xTaskIncrementTick+0xd8>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	4a22      	ldr	r2, [pc, #136]	; (80050fc <xTaskIncrementTick+0x160>)
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4a1f      	ldr	r2, [pc, #124]	; (8005100 <xTaskIncrementTick+0x164>)
 8005082:	441a      	add	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f7fe fe95 	bl	8003dba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <xTaskIncrementTick+0x168>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	429a      	cmp	r2, r3
 800509c:	d3b8      	bcc.n	8005010 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800509e:	2301      	movs	r3, #1
 80050a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050a2:	e7b5      	b.n	8005010 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050a4:	4b17      	ldr	r3, [pc, #92]	; (8005104 <xTaskIncrementTick+0x168>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050aa:	4915      	ldr	r1, [pc, #84]	; (8005100 <xTaskIncrementTick+0x164>)
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d901      	bls.n	80050c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80050bc:	2301      	movs	r3, #1
 80050be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80050c0:	4b11      	ldr	r3, [pc, #68]	; (8005108 <xTaskIncrementTick+0x16c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80050c8:	2301      	movs	r3, #1
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	e004      	b.n	80050d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80050ce:	4b0f      	ldr	r3, [pc, #60]	; (800510c <xTaskIncrementTick+0x170>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3301      	adds	r3, #1
 80050d4:	4a0d      	ldr	r2, [pc, #52]	; (800510c <xTaskIncrementTick+0x170>)
 80050d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80050d8:	697b      	ldr	r3, [r7, #20]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20000c64 	.word	0x20000c64
 80050e8:	20000c40 	.word	0x20000c40
 80050ec:	20000bf4 	.word	0x20000bf4
 80050f0:	20000bf8 	.word	0x20000bf8
 80050f4:	20000c54 	.word	0x20000c54
 80050f8:	20000c5c 	.word	0x20000c5c
 80050fc:	20000c44 	.word	0x20000c44
 8005100:	2000076c 	.word	0x2000076c
 8005104:	20000768 	.word	0x20000768
 8005108:	20000c50 	.word	0x20000c50
 800510c:	20000c4c 	.word	0x20000c4c

08005110 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005116:	4b28      	ldr	r3, [pc, #160]	; (80051b8 <vTaskSwitchContext+0xa8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800511e:	4b27      	ldr	r3, [pc, #156]	; (80051bc <vTaskSwitchContext+0xac>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005124:	e041      	b.n	80051aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005126:	4b25      	ldr	r3, [pc, #148]	; (80051bc <vTaskSwitchContext+0xac>)
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800512c:	4b24      	ldr	r3, [pc, #144]	; (80051c0 <vTaskSwitchContext+0xb0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	e010      	b.n	8005156 <vTaskSwitchContext+0x46>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <vTaskSwitchContext+0x40>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	607b      	str	r3, [r7, #4]
}
 800514c:	bf00      	nop
 800514e:	e7fe      	b.n	800514e <vTaskSwitchContext+0x3e>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3b01      	subs	r3, #1
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	491b      	ldr	r1, [pc, #108]	; (80051c4 <vTaskSwitchContext+0xb4>)
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4613      	mov	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0e4      	beq.n	8005134 <vTaskSwitchContext+0x24>
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <vTaskSwitchContext+0xb4>)
 8005176:	4413      	add	r3, r2
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	605a      	str	r2, [r3, #4]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	3308      	adds	r3, #8
 800518c:	429a      	cmp	r2, r3
 800518e:	d104      	bne.n	800519a <vTaskSwitchContext+0x8a>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	605a      	str	r2, [r3, #4]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4a09      	ldr	r2, [pc, #36]	; (80051c8 <vTaskSwitchContext+0xb8>)
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	4a06      	ldr	r2, [pc, #24]	; (80051c0 <vTaskSwitchContext+0xb0>)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6013      	str	r3, [r2, #0]
}
 80051aa:	bf00      	nop
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20000c64 	.word	0x20000c64
 80051bc:	20000c50 	.word	0x20000c50
 80051c0:	20000c44 	.word	0x20000c44
 80051c4:	2000076c 	.word	0x2000076c
 80051c8:	20000768 	.word	0x20000768

080051cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	60fb      	str	r3, [r7, #12]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051f2:	4b07      	ldr	r3, [pc, #28]	; (8005210 <vTaskPlaceOnEventList+0x44>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3318      	adds	r3, #24
 80051f8:	4619      	mov	r1, r3
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fe fe01 	bl	8003e02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005200:	2101      	movs	r1, #1
 8005202:	6838      	ldr	r0, [r7, #0]
 8005204:	f000 fa7c 	bl	8005700 <prvAddCurrentTaskToDelayedList>
}
 8005208:	bf00      	nop
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20000768 	.word	0x20000768

08005214 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	617b      	str	r3, [r7, #20]
}
 8005238:	bf00      	nop
 800523a:	e7fe      	b.n	800523a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800523c:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <vTaskPlaceOnEventListRestricted+0x54>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3318      	adds	r3, #24
 8005242:	4619      	mov	r1, r3
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7fe fdb8 	bl	8003dba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005250:	f04f 33ff 	mov.w	r3, #4294967295
 8005254:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	68b8      	ldr	r0, [r7, #8]
 800525a:	f000 fa51 	bl	8005700 <prvAddCurrentTaskToDelayedList>
	}
 800525e:	bf00      	nop
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000768 	.word	0x20000768

0800526c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	60fb      	str	r3, [r7, #12]
}
 8005294:	bf00      	nop
 8005296:	e7fe      	b.n	8005296 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	3318      	adds	r3, #24
 800529c:	4618      	mov	r0, r3
 800529e:	f7fe fde9 	bl	8003e74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052a2:	4b1e      	ldr	r3, [pc, #120]	; (800531c <xTaskRemoveFromEventList+0xb0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d11d      	bne.n	80052e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	3304      	adds	r3, #4
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fe fde0 	bl	8003e74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b8:	4b19      	ldr	r3, [pc, #100]	; (8005320 <xTaskRemoveFromEventList+0xb4>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d903      	bls.n	80052c8 <xTaskRemoveFromEventList+0x5c>
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	4a16      	ldr	r2, [pc, #88]	; (8005320 <xTaskRemoveFromEventList+0xb4>)
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4a13      	ldr	r2, [pc, #76]	; (8005324 <xTaskRemoveFromEventList+0xb8>)
 80052d6:	441a      	add	r2, r3
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f7fe fd6b 	bl	8003dba <vListInsertEnd>
 80052e4:	e005      	b.n	80052f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	3318      	adds	r3, #24
 80052ea:	4619      	mov	r1, r3
 80052ec:	480e      	ldr	r0, [pc, #56]	; (8005328 <xTaskRemoveFromEventList+0xbc>)
 80052ee:	f7fe fd64 	bl	8003dba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f6:	4b0d      	ldr	r3, [pc, #52]	; (800532c <xTaskRemoveFromEventList+0xc0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d905      	bls.n	800530c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005300:	2301      	movs	r3, #1
 8005302:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005304:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <xTaskRemoveFromEventList+0xc4>)
 8005306:	2201      	movs	r2, #1
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e001      	b.n	8005310 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005310:	697b      	ldr	r3, [r7, #20]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20000c64 	.word	0x20000c64
 8005320:	20000c44 	.word	0x20000c44
 8005324:	2000076c 	.word	0x2000076c
 8005328:	20000bfc 	.word	0x20000bfc
 800532c:	20000768 	.word	0x20000768
 8005330:	20000c50 	.word	0x20000c50

08005334 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800533c:	4b06      	ldr	r3, [pc, #24]	; (8005358 <vTaskInternalSetTimeOutState+0x24>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <vTaskInternalSetTimeOutState+0x28>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	605a      	str	r2, [r3, #4]
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	20000c54 	.word	0x20000c54
 800535c:	20000c40 	.word	0x20000c40

08005360 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	613b      	str	r3, [r7, #16]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	60fb      	str	r3, [r7, #12]
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80053a2:	f000 fe7f 	bl	80060a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053a6:	4b1d      	ldr	r3, [pc, #116]	; (800541c <xTaskCheckForTimeOut+0xbc>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053be:	d102      	bne.n	80053c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	61fb      	str	r3, [r7, #28]
 80053c4:	e023      	b.n	800540e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4b15      	ldr	r3, [pc, #84]	; (8005420 <xTaskCheckForTimeOut+0xc0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d007      	beq.n	80053e2 <xTaskCheckForTimeOut+0x82>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d302      	bcc.n	80053e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80053dc:	2301      	movs	r3, #1
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	e015      	b.n	800540e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d20b      	bcs.n	8005404 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	1ad2      	subs	r2, r2, r3
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff ff9b 	bl	8005334 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80053fe:	2300      	movs	r3, #0
 8005400:	61fb      	str	r3, [r7, #28]
 8005402:	e004      	b.n	800540e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800540a:	2301      	movs	r3, #1
 800540c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800540e:	f000 fe79 	bl	8006104 <vPortExitCritical>

	return xReturn;
 8005412:	69fb      	ldr	r3, [r7, #28]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000c40 	.word	0x20000c40
 8005420:	20000c54 	.word	0x20000c54

08005424 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005428:	4b03      	ldr	r3, [pc, #12]	; (8005438 <vTaskMissedYield+0x14>)
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]
}
 800542e:	bf00      	nop
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	20000c50 	.word	0x20000c50

0800543c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005444:	f000 f852 	bl	80054ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005448:	4b06      	ldr	r3, [pc, #24]	; (8005464 <prvIdleTask+0x28>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d9f9      	bls.n	8005444 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005450:	4b05      	ldr	r3, [pc, #20]	; (8005468 <prvIdleTask+0x2c>)
 8005452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005460:	e7f0      	b.n	8005444 <prvIdleTask+0x8>
 8005462:	bf00      	nop
 8005464:	2000076c 	.word	0x2000076c
 8005468:	e000ed04 	.word	0xe000ed04

0800546c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005472:	2300      	movs	r3, #0
 8005474:	607b      	str	r3, [r7, #4]
 8005476:	e00c      	b.n	8005492 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4a12      	ldr	r2, [pc, #72]	; (80054cc <prvInitialiseTaskLists+0x60>)
 8005484:	4413      	add	r3, r2
 8005486:	4618      	mov	r0, r3
 8005488:	f7fe fc6a 	bl	8003d60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3301      	adds	r3, #1
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b37      	cmp	r3, #55	; 0x37
 8005496:	d9ef      	bls.n	8005478 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005498:	480d      	ldr	r0, [pc, #52]	; (80054d0 <prvInitialiseTaskLists+0x64>)
 800549a:	f7fe fc61 	bl	8003d60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800549e:	480d      	ldr	r0, [pc, #52]	; (80054d4 <prvInitialiseTaskLists+0x68>)
 80054a0:	f7fe fc5e 	bl	8003d60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054a4:	480c      	ldr	r0, [pc, #48]	; (80054d8 <prvInitialiseTaskLists+0x6c>)
 80054a6:	f7fe fc5b 	bl	8003d60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054aa:	480c      	ldr	r0, [pc, #48]	; (80054dc <prvInitialiseTaskLists+0x70>)
 80054ac:	f7fe fc58 	bl	8003d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054b0:	480b      	ldr	r0, [pc, #44]	; (80054e0 <prvInitialiseTaskLists+0x74>)
 80054b2:	f7fe fc55 	bl	8003d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054b6:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <prvInitialiseTaskLists+0x78>)
 80054b8:	4a05      	ldr	r2, [pc, #20]	; (80054d0 <prvInitialiseTaskLists+0x64>)
 80054ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054bc:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <prvInitialiseTaskLists+0x7c>)
 80054be:	4a05      	ldr	r2, [pc, #20]	; (80054d4 <prvInitialiseTaskLists+0x68>)
 80054c0:	601a      	str	r2, [r3, #0]
}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	2000076c 	.word	0x2000076c
 80054d0:	20000bcc 	.word	0x20000bcc
 80054d4:	20000be0 	.word	0x20000be0
 80054d8:	20000bfc 	.word	0x20000bfc
 80054dc:	20000c10 	.word	0x20000c10
 80054e0:	20000c28 	.word	0x20000c28
 80054e4:	20000bf4 	.word	0x20000bf4
 80054e8:	20000bf8 	.word	0x20000bf8

080054ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054f2:	e019      	b.n	8005528 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054f4:	f000 fdd6 	bl	80060a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f8:	4b10      	ldr	r3, [pc, #64]	; (800553c <prvCheckTasksWaitingTermination+0x50>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3304      	adds	r3, #4
 8005504:	4618      	mov	r0, r3
 8005506:	f7fe fcb5 	bl	8003e74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800550a:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <prvCheckTasksWaitingTermination+0x54>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3b01      	subs	r3, #1
 8005510:	4a0b      	ldr	r2, [pc, #44]	; (8005540 <prvCheckTasksWaitingTermination+0x54>)
 8005512:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <prvCheckTasksWaitingTermination+0x58>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3b01      	subs	r3, #1
 800551a:	4a0a      	ldr	r2, [pc, #40]	; (8005544 <prvCheckTasksWaitingTermination+0x58>)
 800551c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800551e:	f000 fdf1 	bl	8006104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f810 	bl	8005548 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <prvCheckTasksWaitingTermination+0x58>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e1      	bne.n	80054f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20000c10 	.word	0x20000c10
 8005540:	20000c3c 	.word	0x20000c3c
 8005544:	20000c24 	.word	0x20000c24

08005548 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005556:	2b00      	cmp	r3, #0
 8005558:	d108      	bne.n	800556c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	4618      	mov	r0, r3
 8005560:	f000 ff8e 	bl	8006480 <vPortFree>
				vPortFree( pxTCB );
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 ff8b 	bl	8006480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800556a:	e018      	b.n	800559e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005572:	2b01      	cmp	r3, #1
 8005574:	d103      	bne.n	800557e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 ff82 	bl	8006480 <vPortFree>
	}
 800557c:	e00f      	b.n	800559e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005584:	2b02      	cmp	r3, #2
 8005586:	d00a      	beq.n	800559e <prvDeleteTCB+0x56>
	__asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	60fb      	str	r3, [r7, #12]
}
 800559a:	bf00      	nop
 800559c:	e7fe      	b.n	800559c <prvDeleteTCB+0x54>
	}
 800559e:	bf00      	nop
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ae:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <prvResetNextTaskUnblockTime+0x38>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d104      	bne.n	80055c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <prvResetNextTaskUnblockTime+0x3c>)
 80055ba:	f04f 32ff 	mov.w	r2, #4294967295
 80055be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055c0:	e008      	b.n	80055d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c2:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <prvResetNextTaskUnblockTime+0x38>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	4a04      	ldr	r2, [pc, #16]	; (80055e4 <prvResetNextTaskUnblockTime+0x3c>)
 80055d2:	6013      	str	r3, [r2, #0]
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	20000bf4 	.word	0x20000bf4
 80055e4:	20000c5c 	.word	0x20000c5c

080055e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <xTaskGetSchedulerState+0x34>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055f6:	2301      	movs	r3, #1
 80055f8:	607b      	str	r3, [r7, #4]
 80055fa:	e008      	b.n	800560e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055fc:	4b08      	ldr	r3, [pc, #32]	; (8005620 <xTaskGetSchedulerState+0x38>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005604:	2302      	movs	r3, #2
 8005606:	607b      	str	r3, [r7, #4]
 8005608:	e001      	b.n	800560e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800560a:	2300      	movs	r3, #0
 800560c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800560e:	687b      	ldr	r3, [r7, #4]
	}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	20000c48 	.word	0x20000c48
 8005620:	20000c64 	.word	0x20000c64

08005624 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d056      	beq.n	80056e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800563a:	4b2e      	ldr	r3, [pc, #184]	; (80056f4 <xTaskPriorityDisinherit+0xd0>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	429a      	cmp	r2, r3
 8005642:	d00a      	beq.n	800565a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	60fb      	str	r3, [r7, #12]
}
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	60bb      	str	r3, [r7, #8]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567c:	1e5a      	subs	r2, r3, #1
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800568a:	429a      	cmp	r2, r3
 800568c:	d02c      	beq.n	80056e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005692:	2b00      	cmp	r3, #0
 8005694:	d128      	bne.n	80056e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	3304      	adds	r3, #4
 800569a:	4618      	mov	r0, r3
 800569c:	f7fe fbea 	bl	8003e74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b8:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <xTaskPriorityDisinherit+0xd4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d903      	bls.n	80056c8 <xTaskPriorityDisinherit+0xa4>
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	4a0c      	ldr	r2, [pc, #48]	; (80056f8 <xTaskPriorityDisinherit+0xd4>)
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4a09      	ldr	r2, [pc, #36]	; (80056fc <xTaskPriorityDisinherit+0xd8>)
 80056d6:	441a      	add	r2, r3
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	3304      	adds	r3, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4610      	mov	r0, r2
 80056e0:	f7fe fb6b 	bl	8003dba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056e4:	2301      	movs	r3, #1
 80056e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056e8:	697b      	ldr	r3, [r7, #20]
	}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000768 	.word	0x20000768
 80056f8:	20000c44 	.word	0x20000c44
 80056fc:	2000076c 	.word	0x2000076c

08005700 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800570a:	4b21      	ldr	r3, [pc, #132]	; (8005790 <prvAddCurrentTaskToDelayedList+0x90>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005710:	4b20      	ldr	r3, [pc, #128]	; (8005794 <prvAddCurrentTaskToDelayedList+0x94>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3304      	adds	r3, #4
 8005716:	4618      	mov	r0, r3
 8005718:	f7fe fbac 	bl	8003e74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005722:	d10a      	bne.n	800573a <prvAddCurrentTaskToDelayedList+0x3a>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d007      	beq.n	800573a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800572a:	4b1a      	ldr	r3, [pc, #104]	; (8005794 <prvAddCurrentTaskToDelayedList+0x94>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4819      	ldr	r0, [pc, #100]	; (8005798 <prvAddCurrentTaskToDelayedList+0x98>)
 8005734:	f7fe fb41 	bl	8003dba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005738:	e026      	b.n	8005788 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4413      	add	r3, r2
 8005740:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005742:	4b14      	ldr	r3, [pc, #80]	; (8005794 <prvAddCurrentTaskToDelayedList+0x94>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	429a      	cmp	r2, r3
 8005750:	d209      	bcs.n	8005766 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005752:	4b12      	ldr	r3, [pc, #72]	; (800579c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	4b0f      	ldr	r3, [pc, #60]	; (8005794 <prvAddCurrentTaskToDelayedList+0x94>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3304      	adds	r3, #4
 800575c:	4619      	mov	r1, r3
 800575e:	4610      	mov	r0, r2
 8005760:	f7fe fb4f 	bl	8003e02 <vListInsert>
}
 8005764:	e010      	b.n	8005788 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005766:	4b0e      	ldr	r3, [pc, #56]	; (80057a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <prvAddCurrentTaskToDelayedList+0x94>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3304      	adds	r3, #4
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f7fe fb45 	bl	8003e02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005778:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	429a      	cmp	r2, r3
 8005780:	d202      	bcs.n	8005788 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005782:	4a08      	ldr	r2, [pc, #32]	; (80057a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	6013      	str	r3, [r2, #0]
}
 8005788:	bf00      	nop
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	20000c40 	.word	0x20000c40
 8005794:	20000768 	.word	0x20000768
 8005798:	20000c28 	.word	0x20000c28
 800579c:	20000bf8 	.word	0x20000bf8
 80057a0:	20000bf4 	.word	0x20000bf4
 80057a4:	20000c5c 	.word	0x20000c5c

080057a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	; 0x28
 80057ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80057b2:	f000 fb07 	bl	8005dc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80057b6:	4b1c      	ldr	r3, [pc, #112]	; (8005828 <xTimerCreateTimerTask+0x80>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d021      	beq.n	8005802 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80057c6:	1d3a      	adds	r2, r7, #4
 80057c8:	f107 0108 	add.w	r1, r7, #8
 80057cc:	f107 030c 	add.w	r3, r7, #12
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fe faab 	bl	8003d2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	9202      	str	r2, [sp, #8]
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	2302      	movs	r3, #2
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	2300      	movs	r3, #0
 80057e6:	460a      	mov	r2, r1
 80057e8:	4910      	ldr	r1, [pc, #64]	; (800582c <xTimerCreateTimerTask+0x84>)
 80057ea:	4811      	ldr	r0, [pc, #68]	; (8005830 <xTimerCreateTimerTask+0x88>)
 80057ec:	f7ff f8de 	bl	80049ac <xTaskCreateStatic>
 80057f0:	4603      	mov	r3, r0
 80057f2:	4a10      	ldr	r2, [pc, #64]	; (8005834 <xTimerCreateTimerTask+0x8c>)
 80057f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80057f6:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <xTimerCreateTimerTask+0x8c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80057fe:	2301      	movs	r3, #1
 8005800:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	613b      	str	r3, [r7, #16]
}
 800581a:	bf00      	nop
 800581c:	e7fe      	b.n	800581c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800581e:	697b      	ldr	r3, [r7, #20]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000c98 	.word	0x20000c98
 800582c:	08007014 	.word	0x08007014
 8005830:	0800596d 	.word	0x0800596d
 8005834:	20000c9c 	.word	0x20000c9c

08005838 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	; 0x28
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005846:	2300      	movs	r3, #0
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	623b      	str	r3, [r7, #32]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005866:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <xTimerGenericCommand+0x98>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d02a      	beq.n	80058c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b05      	cmp	r3, #5
 800587e:	dc18      	bgt.n	80058b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005880:	f7ff feb2 	bl	80055e8 <xTaskGetSchedulerState>
 8005884:	4603      	mov	r3, r0
 8005886:	2b02      	cmp	r3, #2
 8005888:	d109      	bne.n	800589e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800588a:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <xTimerGenericCommand+0x98>)
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	f107 0110 	add.w	r1, r7, #16
 8005892:	2300      	movs	r3, #0
 8005894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005896:	f7fe fca1 	bl	80041dc <xQueueGenericSend>
 800589a:	6278      	str	r0, [r7, #36]	; 0x24
 800589c:	e012      	b.n	80058c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800589e:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <xTimerGenericCommand+0x98>)
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	f107 0110 	add.w	r1, r7, #16
 80058a6:	2300      	movs	r3, #0
 80058a8:	2200      	movs	r2, #0
 80058aa:	f7fe fc97 	bl	80041dc <xQueueGenericSend>
 80058ae:	6278      	str	r0, [r7, #36]	; 0x24
 80058b0:	e008      	b.n	80058c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058b2:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <xTimerGenericCommand+0x98>)
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	f107 0110 	add.w	r1, r7, #16
 80058ba:	2300      	movs	r3, #0
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	f7fe fd8b 	bl	80043d8 <xQueueGenericSendFromISR>
 80058c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3728      	adds	r7, #40	; 0x28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000c98 	.word	0x20000c98

080058d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af02      	add	r7, sp, #8
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058de:	4b22      	ldr	r3, [pc, #136]	; (8005968 <prvProcessExpiredTimer+0x94>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fe fac1 	bl	8003e74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d022      	beq.n	8005946 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	699a      	ldr	r2, [r3, #24]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	18d1      	adds	r1, r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	6978      	ldr	r0, [r7, #20]
 800590e:	f000 f8d1 	bl	8005ab4 <prvInsertTimerInActiveList>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01f      	beq.n	8005958 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005918:	2300      	movs	r3, #0
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	2300      	movs	r3, #0
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	2100      	movs	r1, #0
 8005922:	6978      	ldr	r0, [r7, #20]
 8005924:	f7ff ff88 	bl	8005838 <xTimerGenericCommand>
 8005928:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d113      	bne.n	8005958 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	60fb      	str	r3, [r7, #12]
}
 8005942:	bf00      	nop
 8005944:	e7fe      	b.n	8005944 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800594c:	f023 0301 	bic.w	r3, r3, #1
 8005950:	b2da      	uxtb	r2, r3
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	6978      	ldr	r0, [r7, #20]
 800595e:	4798      	blx	r3
}
 8005960:	bf00      	nop
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20000c90 	.word	0x20000c90

0800596c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005974:	f107 0308 	add.w	r3, r7, #8
 8005978:	4618      	mov	r0, r3
 800597a:	f000 f857 	bl	8005a2c <prvGetNextExpireTime>
 800597e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4619      	mov	r1, r3
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 f803 	bl	8005990 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800598a:	f000 f8d5 	bl	8005b38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800598e:	e7f1      	b.n	8005974 <prvTimerTask+0x8>

08005990 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800599a:	f7ff fa43 	bl	8004e24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800599e:	f107 0308 	add.w	r3, r7, #8
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 f866 	bl	8005a74 <prvSampleTimeNow>
 80059a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d130      	bne.n	8005a12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10a      	bne.n	80059cc <prvProcessTimerOrBlockTask+0x3c>
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d806      	bhi.n	80059cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80059be:	f7ff fa3f 	bl	8004e40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80059c2:	68f9      	ldr	r1, [r7, #12]
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff ff85 	bl	80058d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80059ca:	e024      	b.n	8005a16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d008      	beq.n	80059e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80059d2:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <prvProcessTimerOrBlockTask+0x90>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <prvProcessTimerOrBlockTask+0x50>
 80059dc:	2301      	movs	r3, #1
 80059de:	e000      	b.n	80059e2 <prvProcessTimerOrBlockTask+0x52>
 80059e0:	2300      	movs	r3, #0
 80059e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80059e4:	4b0f      	ldr	r3, [pc, #60]	; (8005a24 <prvProcessTimerOrBlockTask+0x94>)
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	4619      	mov	r1, r3
 80059f2:	f7fe ffa7 	bl	8004944 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80059f6:	f7ff fa23 	bl	8004e40 <xTaskResumeAll>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a00:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <prvProcessTimerOrBlockTask+0x98>)
 8005a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	f3bf 8f6f 	isb	sy
}
 8005a10:	e001      	b.n	8005a16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a12:	f7ff fa15 	bl	8004e40 <xTaskResumeAll>
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000c94 	.word	0x20000c94
 8005a24:	20000c98 	.word	0x20000c98
 8005a28:	e000ed04 	.word	0xe000ed04

08005a2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a34:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <prvGetNextExpireTime+0x44>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <prvGetNextExpireTime+0x16>
 8005a3e:	2201      	movs	r2, #1
 8005a40:	e000      	b.n	8005a44 <prvGetNextExpireTime+0x18>
 8005a42:	2200      	movs	r2, #0
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d105      	bne.n	8005a5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a50:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <prvGetNextExpireTime+0x44>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	e001      	b.n	8005a60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a60:	68fb      	ldr	r3, [r7, #12]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	20000c90 	.word	0x20000c90

08005a74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a7c:	f7ff fa7e 	bl	8004f7c <xTaskGetTickCount>
 8005a80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a82:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <prvSampleTimeNow+0x3c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d205      	bcs.n	8005a98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a8c:	f000 f936 	bl	8005cfc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	e002      	b.n	8005a9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a9e:	4a04      	ldr	r2, [pc, #16]	; (8005ab0 <prvSampleTimeNow+0x3c>)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20000ca0 	.word	0x20000ca0

08005ab4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d812      	bhi.n	8005b00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	1ad2      	subs	r2, r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d302      	bcc.n	8005aee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	e01b      	b.n	8005b26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005aee:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <prvInsertTimerInActiveList+0x7c>)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3304      	adds	r3, #4
 8005af6:	4619      	mov	r1, r3
 8005af8:	4610      	mov	r0, r2
 8005afa:	f7fe f982 	bl	8003e02 <vListInsert>
 8005afe:	e012      	b.n	8005b26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d206      	bcs.n	8005b16 <prvInsertTimerInActiveList+0x62>
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d302      	bcc.n	8005b16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b10:	2301      	movs	r3, #1
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	e007      	b.n	8005b26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b16:	4b07      	ldr	r3, [pc, #28]	; (8005b34 <prvInsertTimerInActiveList+0x80>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4610      	mov	r0, r2
 8005b22:	f7fe f96e 	bl	8003e02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b26:	697b      	ldr	r3, [r7, #20]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	20000c94 	.word	0x20000c94
 8005b34:	20000c90 	.word	0x20000c90

08005b38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08e      	sub	sp, #56	; 0x38
 8005b3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b3e:	e0ca      	b.n	8005cd6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	da18      	bge.n	8005b78 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b46:	1d3b      	adds	r3, r7, #4
 8005b48:	3304      	adds	r3, #4
 8005b4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	61fb      	str	r3, [r7, #28]
}
 8005b64:	bf00      	nop
 8005b66:	e7fe      	b.n	8005b66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b6e:	6850      	ldr	r0, [r2, #4]
 8005b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b72:	6892      	ldr	r2, [r2, #8]
 8005b74:	4611      	mov	r1, r2
 8005b76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f2c0 80aa 	blt.w	8005cd4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d004      	beq.n	8005b96 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	3304      	adds	r3, #4
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fe f96f 	bl	8003e74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b96:	463b      	mov	r3, r7
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff ff6b 	bl	8005a74 <prvSampleTimeNow>
 8005b9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b09      	cmp	r3, #9
 8005ba4:	f200 8097 	bhi.w	8005cd6 <prvProcessReceivedCommands+0x19e>
 8005ba8:	a201      	add	r2, pc, #4	; (adr r2, 8005bb0 <prvProcessReceivedCommands+0x78>)
 8005baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bae:	bf00      	nop
 8005bb0:	08005bd9 	.word	0x08005bd9
 8005bb4:	08005bd9 	.word	0x08005bd9
 8005bb8:	08005bd9 	.word	0x08005bd9
 8005bbc:	08005c4d 	.word	0x08005c4d
 8005bc0:	08005c61 	.word	0x08005c61
 8005bc4:	08005cab 	.word	0x08005cab
 8005bc8:	08005bd9 	.word	0x08005bd9
 8005bcc:	08005bd9 	.word	0x08005bd9
 8005bd0:	08005c4d 	.word	0x08005c4d
 8005bd4:	08005c61 	.word	0x08005c61
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bde:	f043 0301 	orr.w	r3, r3, #1
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	18d1      	adds	r1, r2, r3
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bf8:	f7ff ff5c 	bl	8005ab4 <prvInsertTimerInActiveList>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d069      	beq.n	8005cd6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d05e      	beq.n	8005cd6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	441a      	add	r2, r3
 8005c20:	2300      	movs	r3, #0
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	2300      	movs	r3, #0
 8005c26:	2100      	movs	r1, #0
 8005c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c2a:	f7ff fe05 	bl	8005838 <xTimerGenericCommand>
 8005c2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d14f      	bne.n	8005cd6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	61bb      	str	r3, [r7, #24]
}
 8005c48:	bf00      	nop
 8005c4a:	e7fe      	b.n	8005c4a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005c5e:	e03a      	b.n	8005cd6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10a      	bne.n	8005c96 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	617b      	str	r3, [r7, #20]
}
 8005c92:	bf00      	nop
 8005c94:	e7fe      	b.n	8005c94 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	18d1      	adds	r1, r2, r3
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca4:	f7ff ff06 	bl	8005ab4 <prvInsertTimerInActiveList>
					break;
 8005ca8:	e015      	b.n	8005cd6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d103      	bne.n	8005cc0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cba:	f000 fbe1 	bl	8006480 <vPortFree>
 8005cbe:	e00a      	b.n	8005cd6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005cd2:	e000      	b.n	8005cd6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005cd4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cd6:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <prvProcessReceivedCommands+0x1c0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	1d39      	adds	r1, r7, #4
 8005cdc:	2200      	movs	r2, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fe fc16 	bl	8004510 <xQueueReceive>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f47f af2a 	bne.w	8005b40 <prvProcessReceivedCommands+0x8>
	}
}
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	3730      	adds	r7, #48	; 0x30
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000c98 	.word	0x20000c98

08005cfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d02:	e048      	b.n	8005d96 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d04:	4b2d      	ldr	r3, [pc, #180]	; (8005dbc <prvSwitchTimerLists+0xc0>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d0e:	4b2b      	ldr	r3, [pc, #172]	; (8005dbc <prvSwitchTimerLists+0xc0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fe f8a9 	bl	8003e74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d02e      	beq.n	8005d96 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4413      	add	r3, r2
 8005d40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d90e      	bls.n	8005d68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d56:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <prvSwitchTimerLists+0xc0>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4610      	mov	r0, r2
 8005d62:	f7fe f84e 	bl	8003e02 <vListInsert>
 8005d66:	e016      	b.n	8005d96 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d68:	2300      	movs	r3, #0
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	2100      	movs	r1, #0
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f7ff fd60 	bl	8005838 <xTimerGenericCommand>
 8005d78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	603b      	str	r3, [r7, #0]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d96:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <prvSwitchTimerLists+0xc0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1b1      	bne.n	8005d04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005da0:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <prvSwitchTimerLists+0xc0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005da6:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <prvSwitchTimerLists+0xc4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a04      	ldr	r2, [pc, #16]	; (8005dbc <prvSwitchTimerLists+0xc0>)
 8005dac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005dae:	4a04      	ldr	r2, [pc, #16]	; (8005dc0 <prvSwitchTimerLists+0xc4>)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	6013      	str	r3, [r2, #0]
}
 8005db4:	bf00      	nop
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20000c90 	.word	0x20000c90
 8005dc0:	20000c94 	.word	0x20000c94

08005dc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005dca:	f000 f96b 	bl	80060a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005dce:	4b15      	ldr	r3, [pc, #84]	; (8005e24 <prvCheckForValidListAndQueue+0x60>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d120      	bne.n	8005e18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005dd6:	4814      	ldr	r0, [pc, #80]	; (8005e28 <prvCheckForValidListAndQueue+0x64>)
 8005dd8:	f7fd ffc2 	bl	8003d60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ddc:	4813      	ldr	r0, [pc, #76]	; (8005e2c <prvCheckForValidListAndQueue+0x68>)
 8005dde:	f7fd ffbf 	bl	8003d60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005de2:	4b13      	ldr	r3, [pc, #76]	; (8005e30 <prvCheckForValidListAndQueue+0x6c>)
 8005de4:	4a10      	ldr	r2, [pc, #64]	; (8005e28 <prvCheckForValidListAndQueue+0x64>)
 8005de6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005de8:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <prvCheckForValidListAndQueue+0x70>)
 8005dea:	4a10      	ldr	r2, [pc, #64]	; (8005e2c <prvCheckForValidListAndQueue+0x68>)
 8005dec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005dee:	2300      	movs	r3, #0
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	4b11      	ldr	r3, [pc, #68]	; (8005e38 <prvCheckForValidListAndQueue+0x74>)
 8005df4:	4a11      	ldr	r2, [pc, #68]	; (8005e3c <prvCheckForValidListAndQueue+0x78>)
 8005df6:	2110      	movs	r1, #16
 8005df8:	200a      	movs	r0, #10
 8005dfa:	f7fe f8cd 	bl	8003f98 <xQueueGenericCreateStatic>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	4a08      	ldr	r2, [pc, #32]	; (8005e24 <prvCheckForValidListAndQueue+0x60>)
 8005e02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e04:	4b07      	ldr	r3, [pc, #28]	; (8005e24 <prvCheckForValidListAndQueue+0x60>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e0c:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <prvCheckForValidListAndQueue+0x60>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	490b      	ldr	r1, [pc, #44]	; (8005e40 <prvCheckForValidListAndQueue+0x7c>)
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe fd6c 	bl	80048f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e18:	f000 f974 	bl	8006104 <vPortExitCritical>
}
 8005e1c:	bf00      	nop
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000c98 	.word	0x20000c98
 8005e28:	20000c68 	.word	0x20000c68
 8005e2c:	20000c7c 	.word	0x20000c7c
 8005e30:	20000c90 	.word	0x20000c90
 8005e34:	20000c94 	.word	0x20000c94
 8005e38:	20000d44 	.word	0x20000d44
 8005e3c:	20000ca4 	.word	0x20000ca4
 8005e40:	0800701c 	.word	0x0800701c

08005e44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3b04      	subs	r3, #4
 8005e54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3b04      	subs	r3, #4
 8005e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f023 0201 	bic.w	r2, r3, #1
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3b04      	subs	r3, #4
 8005e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e74:	4a0c      	ldr	r2, [pc, #48]	; (8005ea8 <pxPortInitialiseStack+0x64>)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3b14      	subs	r3, #20
 8005e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3b04      	subs	r3, #4
 8005e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f06f 0202 	mvn.w	r2, #2
 8005e92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3b20      	subs	r3, #32
 8005e98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	08005ead 	.word	0x08005ead

08005eac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005eb6:	4b12      	ldr	r3, [pc, #72]	; (8005f00 <prvTaskExitError+0x54>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebe:	d00a      	beq.n	8005ed6 <prvTaskExitError+0x2a>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	60fb      	str	r3, [r7, #12]
}
 8005ed2:	bf00      	nop
 8005ed4:	e7fe      	b.n	8005ed4 <prvTaskExitError+0x28>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	60bb      	str	r3, [r7, #8]
}
 8005ee8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005eea:	bf00      	nop
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0fc      	beq.n	8005eec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	2000001c 	.word	0x2000001c
	...

08005f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f10:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <pxCurrentTCBConst2>)
 8005f12:	6819      	ldr	r1, [r3, #0]
 8005f14:	6808      	ldr	r0, [r1, #0]
 8005f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1a:	f380 8809 	msr	PSP, r0
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	f380 8811 	msr	BASEPRI, r0
 8005f2a:	4770      	bx	lr
 8005f2c:	f3af 8000 	nop.w

08005f30 <pxCurrentTCBConst2>:
 8005f30:	20000768 	.word	0x20000768
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop

08005f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f38:	4808      	ldr	r0, [pc, #32]	; (8005f5c <prvPortStartFirstTask+0x24>)
 8005f3a:	6800      	ldr	r0, [r0, #0]
 8005f3c:	6800      	ldr	r0, [r0, #0]
 8005f3e:	f380 8808 	msr	MSP, r0
 8005f42:	f04f 0000 	mov.w	r0, #0
 8005f46:	f380 8814 	msr	CONTROL, r0
 8005f4a:	b662      	cpsie	i
 8005f4c:	b661      	cpsie	f
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	df00      	svc	0
 8005f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f5a:	bf00      	nop
 8005f5c:	e000ed08 	.word	0xe000ed08

08005f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f66:	4b46      	ldr	r3, [pc, #280]	; (8006080 <xPortStartScheduler+0x120>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a46      	ldr	r2, [pc, #280]	; (8006084 <xPortStartScheduler+0x124>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10a      	bne.n	8005f86 <xPortStartScheduler+0x26>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	613b      	str	r3, [r7, #16]
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f86:	4b3e      	ldr	r3, [pc, #248]	; (8006080 <xPortStartScheduler+0x120>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a3f      	ldr	r2, [pc, #252]	; (8006088 <xPortStartScheduler+0x128>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d10a      	bne.n	8005fa6 <xPortStartScheduler+0x46>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	60fb      	str	r3, [r7, #12]
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fa6:	4b39      	ldr	r3, [pc, #228]	; (800608c <xPortStartScheduler+0x12c>)
 8005fa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	22ff      	movs	r2, #255	; 0xff
 8005fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	4b31      	ldr	r3, [pc, #196]	; (8006090 <xPortStartScheduler+0x130>)
 8005fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fce:	4b31      	ldr	r3, [pc, #196]	; (8006094 <xPortStartScheduler+0x134>)
 8005fd0:	2207      	movs	r2, #7
 8005fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fd4:	e009      	b.n	8005fea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005fd6:	4b2f      	ldr	r3, [pc, #188]	; (8006094 <xPortStartScheduler+0x134>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	4a2d      	ldr	r2, [pc, #180]	; (8006094 <xPortStartScheduler+0x134>)
 8005fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fea:	78fb      	ldrb	r3, [r7, #3]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff2:	2b80      	cmp	r3, #128	; 0x80
 8005ff4:	d0ef      	beq.n	8005fd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ff6:	4b27      	ldr	r3, [pc, #156]	; (8006094 <xPortStartScheduler+0x134>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f1c3 0307 	rsb	r3, r3, #7
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d00a      	beq.n	8006018 <xPortStartScheduler+0xb8>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	60bb      	str	r3, [r7, #8]
}
 8006014:	bf00      	nop
 8006016:	e7fe      	b.n	8006016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006018:	4b1e      	ldr	r3, [pc, #120]	; (8006094 <xPortStartScheduler+0x134>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	021b      	lsls	r3, r3, #8
 800601e:	4a1d      	ldr	r2, [pc, #116]	; (8006094 <xPortStartScheduler+0x134>)
 8006020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006022:	4b1c      	ldr	r3, [pc, #112]	; (8006094 <xPortStartScheduler+0x134>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800602a:	4a1a      	ldr	r2, [pc, #104]	; (8006094 <xPortStartScheduler+0x134>)
 800602c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	b2da      	uxtb	r2, r3
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006036:	4b18      	ldr	r3, [pc, #96]	; (8006098 <xPortStartScheduler+0x138>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a17      	ldr	r2, [pc, #92]	; (8006098 <xPortStartScheduler+0x138>)
 800603c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006042:	4b15      	ldr	r3, [pc, #84]	; (8006098 <xPortStartScheduler+0x138>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a14      	ldr	r2, [pc, #80]	; (8006098 <xPortStartScheduler+0x138>)
 8006048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800604c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800604e:	f000 f8dd 	bl	800620c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006052:	4b12      	ldr	r3, [pc, #72]	; (800609c <xPortStartScheduler+0x13c>)
 8006054:	2200      	movs	r2, #0
 8006056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006058:	f000 f8fc 	bl	8006254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800605c:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <xPortStartScheduler+0x140>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a0f      	ldr	r2, [pc, #60]	; (80060a0 <xPortStartScheduler+0x140>)
 8006062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006068:	f7ff ff66 	bl	8005f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800606c:	f7ff f850 	bl	8005110 <vTaskSwitchContext>
	prvTaskExitError();
 8006070:	f7ff ff1c 	bl	8005eac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	e000ed00 	.word	0xe000ed00
 8006084:	410fc271 	.word	0x410fc271
 8006088:	410fc270 	.word	0x410fc270
 800608c:	e000e400 	.word	0xe000e400
 8006090:	20000d94 	.word	0x20000d94
 8006094:	20000d98 	.word	0x20000d98
 8006098:	e000ed20 	.word	0xe000ed20
 800609c:	2000001c 	.word	0x2000001c
 80060a0:	e000ef34 	.word	0xe000ef34

080060a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	607b      	str	r3, [r7, #4]
}
 80060bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060be:	4b0f      	ldr	r3, [pc, #60]	; (80060fc <vPortEnterCritical+0x58>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	4a0d      	ldr	r2, [pc, #52]	; (80060fc <vPortEnterCritical+0x58>)
 80060c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060c8:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <vPortEnterCritical+0x58>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d10f      	bne.n	80060f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060d0:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <vPortEnterCritical+0x5c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	603b      	str	r3, [r7, #0]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <vPortEnterCritical+0x4a>
	}
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	2000001c 	.word	0x2000001c
 8006100:	e000ed04 	.word	0xe000ed04

08006104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <vPortExitCritical+0x50>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10a      	bne.n	8006128 <vPortExitCritical+0x24>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	607b      	str	r3, [r7, #4]
}
 8006124:	bf00      	nop
 8006126:	e7fe      	b.n	8006126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006128:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <vPortExitCritical+0x50>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3b01      	subs	r3, #1
 800612e:	4a09      	ldr	r2, [pc, #36]	; (8006154 <vPortExitCritical+0x50>)
 8006130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006132:	4b08      	ldr	r3, [pc, #32]	; (8006154 <vPortExitCritical+0x50>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d105      	bne.n	8006146 <vPortExitCritical+0x42>
 800613a:	2300      	movs	r3, #0
 800613c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	f383 8811 	msr	BASEPRI, r3
}
 8006144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	2000001c 	.word	0x2000001c
	...

08006160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006160:	f3ef 8009 	mrs	r0, PSP
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <pxCurrentTCBConst>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	f01e 0f10 	tst.w	lr, #16
 8006170:	bf08      	it	eq
 8006172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617a:	6010      	str	r0, [r2, #0]
 800617c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006184:	f380 8811 	msr	BASEPRI, r0
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f7fe ffbe 	bl	8005110 <vTaskSwitchContext>
 8006194:	f04f 0000 	mov.w	r0, #0
 8006198:	f380 8811 	msr	BASEPRI, r0
 800619c:	bc09      	pop	{r0, r3}
 800619e:	6819      	ldr	r1, [r3, #0]
 80061a0:	6808      	ldr	r0, [r1, #0]
 80061a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a6:	f01e 0f10 	tst.w	lr, #16
 80061aa:	bf08      	it	eq
 80061ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061b0:	f380 8809 	msr	PSP, r0
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	f3af 8000 	nop.w

080061c0 <pxCurrentTCBConst>:
 80061c0:	20000768 	.word	0x20000768
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop

080061c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	607b      	str	r3, [r7, #4]
}
 80061e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061e2:	f7fe fedb 	bl	8004f9c <xTaskIncrementTick>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061ec:	4b06      	ldr	r3, [pc, #24]	; (8006208 <xPortSysTickHandler+0x40>)
 80061ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	2300      	movs	r3, #0
 80061f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f383 8811 	msr	BASEPRI, r3
}
 80061fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006200:	bf00      	nop
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	e000ed04 	.word	0xe000ed04

0800620c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <vPortSetupTimerInterrupt+0x34>)
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006216:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <vPortSetupTimerInterrupt+0x38>)
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800621c:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <vPortSetupTimerInterrupt+0x3c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a0a      	ldr	r2, [pc, #40]	; (800624c <vPortSetupTimerInterrupt+0x40>)
 8006222:	fba2 2303 	umull	r2, r3, r2, r3
 8006226:	099b      	lsrs	r3, r3, #6
 8006228:	4a09      	ldr	r2, [pc, #36]	; (8006250 <vPortSetupTimerInterrupt+0x44>)
 800622a:	3b01      	subs	r3, #1
 800622c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800622e:	4b04      	ldr	r3, [pc, #16]	; (8006240 <vPortSetupTimerInterrupt+0x34>)
 8006230:	2207      	movs	r2, #7
 8006232:	601a      	str	r2, [r3, #0]
}
 8006234:	bf00      	nop
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	e000e010 	.word	0xe000e010
 8006244:	e000e018 	.word	0xe000e018
 8006248:	20000010 	.word	0x20000010
 800624c:	10624dd3 	.word	0x10624dd3
 8006250:	e000e014 	.word	0xe000e014

08006254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006264 <vPortEnableVFP+0x10>
 8006258:	6801      	ldr	r1, [r0, #0]
 800625a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800625e:	6001      	str	r1, [r0, #0]
 8006260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006262:	bf00      	nop
 8006264:	e000ed88 	.word	0xe000ed88

08006268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800626e:	f3ef 8305 	mrs	r3, IPSR
 8006272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b0f      	cmp	r3, #15
 8006278:	d914      	bls.n	80062a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800627a:	4a17      	ldr	r2, [pc, #92]	; (80062d8 <vPortValidateInterruptPriority+0x70>)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006284:	4b15      	ldr	r3, [pc, #84]	; (80062dc <vPortValidateInterruptPriority+0x74>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	7afa      	ldrb	r2, [r7, #11]
 800628a:	429a      	cmp	r2, r3
 800628c:	d20a      	bcs.n	80062a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	607b      	str	r3, [r7, #4]
}
 80062a0:	bf00      	nop
 80062a2:	e7fe      	b.n	80062a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062a4:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <vPortValidateInterruptPriority+0x78>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062ac:	4b0d      	ldr	r3, [pc, #52]	; (80062e4 <vPortValidateInterruptPriority+0x7c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d90a      	bls.n	80062ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	603b      	str	r3, [r7, #0]
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <vPortValidateInterruptPriority+0x60>
	}
 80062ca:	bf00      	nop
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	e000e3f0 	.word	0xe000e3f0
 80062dc:	20000d94 	.word	0x20000d94
 80062e0:	e000ed0c 	.word	0xe000ed0c
 80062e4:	20000d98 	.word	0x20000d98

080062e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08a      	sub	sp, #40	; 0x28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062f0:	2300      	movs	r3, #0
 80062f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062f4:	f7fe fd96 	bl	8004e24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062f8:	4b5b      	ldr	r3, [pc, #364]	; (8006468 <pvPortMalloc+0x180>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006300:	f000 f920 	bl	8006544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006304:	4b59      	ldr	r3, [pc, #356]	; (800646c <pvPortMalloc+0x184>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4013      	ands	r3, r2
 800630c:	2b00      	cmp	r3, #0
 800630e:	f040 8093 	bne.w	8006438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01d      	beq.n	8006354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006318:	2208      	movs	r2, #8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4413      	add	r3, r2
 800631e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	2b00      	cmp	r3, #0
 8006328:	d014      	beq.n	8006354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f023 0307 	bic.w	r3, r3, #7
 8006330:	3308      	adds	r3, #8
 8006332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <pvPortMalloc+0x6c>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	617b      	str	r3, [r7, #20]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d06e      	beq.n	8006438 <pvPortMalloc+0x150>
 800635a:	4b45      	ldr	r3, [pc, #276]	; (8006470 <pvPortMalloc+0x188>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	429a      	cmp	r2, r3
 8006362:	d869      	bhi.n	8006438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006364:	4b43      	ldr	r3, [pc, #268]	; (8006474 <pvPortMalloc+0x18c>)
 8006366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006368:	4b42      	ldr	r3, [pc, #264]	; (8006474 <pvPortMalloc+0x18c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800636e:	e004      	b.n	800637a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	429a      	cmp	r2, r3
 8006382:	d903      	bls.n	800638c <pvPortMalloc+0xa4>
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1f1      	bne.n	8006370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800638c:	4b36      	ldr	r3, [pc, #216]	; (8006468 <pvPortMalloc+0x180>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006392:	429a      	cmp	r2, r3
 8006394:	d050      	beq.n	8006438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2208      	movs	r2, #8
 800639c:	4413      	add	r3, r2
 800639e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	1ad2      	subs	r2, r2, r3
 80063b0:	2308      	movs	r3, #8
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d91f      	bls.n	80063f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4413      	add	r3, r2
 80063be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <pvPortMalloc+0xf8>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	613b      	str	r3, [r7, #16]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	1ad2      	subs	r2, r2, r3
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063f2:	69b8      	ldr	r0, [r7, #24]
 80063f4:	f000 f908 	bl	8006608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063f8:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <pvPortMalloc+0x188>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	4a1b      	ldr	r2, [pc, #108]	; (8006470 <pvPortMalloc+0x188>)
 8006404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006406:	4b1a      	ldr	r3, [pc, #104]	; (8006470 <pvPortMalloc+0x188>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4b1b      	ldr	r3, [pc, #108]	; (8006478 <pvPortMalloc+0x190>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d203      	bcs.n	800641a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006412:	4b17      	ldr	r3, [pc, #92]	; (8006470 <pvPortMalloc+0x188>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a18      	ldr	r2, [pc, #96]	; (8006478 <pvPortMalloc+0x190>)
 8006418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	4b13      	ldr	r3, [pc, #76]	; (800646c <pvPortMalloc+0x184>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	431a      	orrs	r2, r3
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800642e:	4b13      	ldr	r3, [pc, #76]	; (800647c <pvPortMalloc+0x194>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3301      	adds	r3, #1
 8006434:	4a11      	ldr	r2, [pc, #68]	; (800647c <pvPortMalloc+0x194>)
 8006436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006438:	f7fe fd02 	bl	8004e40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <pvPortMalloc+0x174>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	60fb      	str	r3, [r7, #12]
}
 8006458:	bf00      	nop
 800645a:	e7fe      	b.n	800645a <pvPortMalloc+0x172>
	return pvReturn;
 800645c:	69fb      	ldr	r3, [r7, #28]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3728      	adds	r7, #40	; 0x28
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	200049a4 	.word	0x200049a4
 800646c:	200049b8 	.word	0x200049b8
 8006470:	200049a8 	.word	0x200049a8
 8006474:	2000499c 	.word	0x2000499c
 8006478:	200049ac 	.word	0x200049ac
 800647c:	200049b0 	.word	0x200049b0

08006480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d04d      	beq.n	800652e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006492:	2308      	movs	r3, #8
 8006494:	425b      	negs	r3, r3
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4413      	add	r3, r2
 800649a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	4b24      	ldr	r3, [pc, #144]	; (8006538 <vPortFree+0xb8>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4013      	ands	r3, r2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <vPortFree+0x44>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	60fb      	str	r3, [r7, #12]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <vPortFree+0x62>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	60bb      	str	r3, [r7, #8]
}
 80064de:	bf00      	nop
 80064e0:	e7fe      	b.n	80064e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	4b14      	ldr	r3, [pc, #80]	; (8006538 <vPortFree+0xb8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4013      	ands	r3, r2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01e      	beq.n	800652e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d11a      	bne.n	800652e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	4b0e      	ldr	r3, [pc, #56]	; (8006538 <vPortFree+0xb8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	43db      	mvns	r3, r3
 8006502:	401a      	ands	r2, r3
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006508:	f7fe fc8c 	bl	8004e24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	4b0a      	ldr	r3, [pc, #40]	; (800653c <vPortFree+0xbc>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4413      	add	r3, r2
 8006516:	4a09      	ldr	r2, [pc, #36]	; (800653c <vPortFree+0xbc>)
 8006518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800651a:	6938      	ldr	r0, [r7, #16]
 800651c:	f000 f874 	bl	8006608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006520:	4b07      	ldr	r3, [pc, #28]	; (8006540 <vPortFree+0xc0>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3301      	adds	r3, #1
 8006526:	4a06      	ldr	r2, [pc, #24]	; (8006540 <vPortFree+0xc0>)
 8006528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800652a:	f7fe fc89 	bl	8004e40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800652e:	bf00      	nop
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	200049b8 	.word	0x200049b8
 800653c:	200049a8 	.word	0x200049a8
 8006540:	200049b4 	.word	0x200049b4

08006544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800654a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800654e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006550:	4b27      	ldr	r3, [pc, #156]	; (80065f0 <prvHeapInit+0xac>)
 8006552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00c      	beq.n	8006578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3307      	adds	r3, #7
 8006562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0307 	bic.w	r3, r3, #7
 800656a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	4a1f      	ldr	r2, [pc, #124]	; (80065f0 <prvHeapInit+0xac>)
 8006574:	4413      	add	r3, r2
 8006576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800657c:	4a1d      	ldr	r2, [pc, #116]	; (80065f4 <prvHeapInit+0xb0>)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006582:	4b1c      	ldr	r3, [pc, #112]	; (80065f4 <prvHeapInit+0xb0>)
 8006584:	2200      	movs	r2, #0
 8006586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	4413      	add	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006590:	2208      	movs	r2, #8
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0307 	bic.w	r3, r3, #7
 800659e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4a15      	ldr	r2, [pc, #84]	; (80065f8 <prvHeapInit+0xb4>)
 80065a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065a6:	4b14      	ldr	r3, [pc, #80]	; (80065f8 <prvHeapInit+0xb4>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2200      	movs	r2, #0
 80065ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065ae:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <prvHeapInit+0xb4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	1ad2      	subs	r2, r2, r3
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065c4:	4b0c      	ldr	r3, [pc, #48]	; (80065f8 <prvHeapInit+0xb4>)
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	4a0a      	ldr	r2, [pc, #40]	; (80065fc <prvHeapInit+0xb8>)
 80065d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	4a09      	ldr	r2, [pc, #36]	; (8006600 <prvHeapInit+0xbc>)
 80065da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065dc:	4b09      	ldr	r3, [pc, #36]	; (8006604 <prvHeapInit+0xc0>)
 80065de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065e2:	601a      	str	r2, [r3, #0]
}
 80065e4:	bf00      	nop
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	20000d9c 	.word	0x20000d9c
 80065f4:	2000499c 	.word	0x2000499c
 80065f8:	200049a4 	.word	0x200049a4
 80065fc:	200049ac 	.word	0x200049ac
 8006600:	200049a8 	.word	0x200049a8
 8006604:	200049b8 	.word	0x200049b8

08006608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006610:	4b28      	ldr	r3, [pc, #160]	; (80066b4 <prvInsertBlockIntoFreeList+0xac>)
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	e002      	b.n	800661c <prvInsertBlockIntoFreeList+0x14>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	429a      	cmp	r2, r3
 8006624:	d8f7      	bhi.n	8006616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	4413      	add	r3, r2
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	429a      	cmp	r2, r3
 8006636:	d108      	bne.n	800664a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	441a      	add	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	441a      	add	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d118      	bne.n	8006690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b15      	ldr	r3, [pc, #84]	; (80066b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d00d      	beq.n	8006686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	441a      	add	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	e008      	b.n	8006698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006686:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	e003      	b.n	8006698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	429a      	cmp	r2, r3
 800669e:	d002      	beq.n	80066a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	2000499c 	.word	0x2000499c
 80066b8:	200049a4 	.word	0x200049a4

080066bc <__errno>:
 80066bc:	4b01      	ldr	r3, [pc, #4]	; (80066c4 <__errno+0x8>)
 80066be:	6818      	ldr	r0, [r3, #0]
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	20000020 	.word	0x20000020

080066c8 <__libc_init_array>:
 80066c8:	b570      	push	{r4, r5, r6, lr}
 80066ca:	4d0d      	ldr	r5, [pc, #52]	; (8006700 <__libc_init_array+0x38>)
 80066cc:	4c0d      	ldr	r4, [pc, #52]	; (8006704 <__libc_init_array+0x3c>)
 80066ce:	1b64      	subs	r4, r4, r5
 80066d0:	10a4      	asrs	r4, r4, #2
 80066d2:	2600      	movs	r6, #0
 80066d4:	42a6      	cmp	r6, r4
 80066d6:	d109      	bne.n	80066ec <__libc_init_array+0x24>
 80066d8:	4d0b      	ldr	r5, [pc, #44]	; (8006708 <__libc_init_array+0x40>)
 80066da:	4c0c      	ldr	r4, [pc, #48]	; (800670c <__libc_init_array+0x44>)
 80066dc:	f000 fc4e 	bl	8006f7c <_init>
 80066e0:	1b64      	subs	r4, r4, r5
 80066e2:	10a4      	asrs	r4, r4, #2
 80066e4:	2600      	movs	r6, #0
 80066e6:	42a6      	cmp	r6, r4
 80066e8:	d105      	bne.n	80066f6 <__libc_init_array+0x2e>
 80066ea:	bd70      	pop	{r4, r5, r6, pc}
 80066ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f0:	4798      	blx	r3
 80066f2:	3601      	adds	r6, #1
 80066f4:	e7ee      	b.n	80066d4 <__libc_init_array+0xc>
 80066f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066fa:	4798      	blx	r3
 80066fc:	3601      	adds	r6, #1
 80066fe:	e7f2      	b.n	80066e6 <__libc_init_array+0x1e>
 8006700:	08007118 	.word	0x08007118
 8006704:	08007118 	.word	0x08007118
 8006708:	08007118 	.word	0x08007118
 800670c:	0800711c 	.word	0x0800711c

08006710 <memcpy>:
 8006710:	440a      	add	r2, r1
 8006712:	4291      	cmp	r1, r2
 8006714:	f100 33ff 	add.w	r3, r0, #4294967295
 8006718:	d100      	bne.n	800671c <memcpy+0xc>
 800671a:	4770      	bx	lr
 800671c:	b510      	push	{r4, lr}
 800671e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006726:	4291      	cmp	r1, r2
 8006728:	d1f9      	bne.n	800671e <memcpy+0xe>
 800672a:	bd10      	pop	{r4, pc}

0800672c <memset>:
 800672c:	4402      	add	r2, r0
 800672e:	4603      	mov	r3, r0
 8006730:	4293      	cmp	r3, r2
 8006732:	d100      	bne.n	8006736 <memset+0xa>
 8006734:	4770      	bx	lr
 8006736:	f803 1b01 	strb.w	r1, [r3], #1
 800673a:	e7f9      	b.n	8006730 <memset+0x4>

0800673c <siprintf>:
 800673c:	b40e      	push	{r1, r2, r3}
 800673e:	b500      	push	{lr}
 8006740:	b09c      	sub	sp, #112	; 0x70
 8006742:	ab1d      	add	r3, sp, #116	; 0x74
 8006744:	9002      	str	r0, [sp, #8]
 8006746:	9006      	str	r0, [sp, #24]
 8006748:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800674c:	4809      	ldr	r0, [pc, #36]	; (8006774 <siprintf+0x38>)
 800674e:	9107      	str	r1, [sp, #28]
 8006750:	9104      	str	r1, [sp, #16]
 8006752:	4909      	ldr	r1, [pc, #36]	; (8006778 <siprintf+0x3c>)
 8006754:	f853 2b04 	ldr.w	r2, [r3], #4
 8006758:	9105      	str	r1, [sp, #20]
 800675a:	6800      	ldr	r0, [r0, #0]
 800675c:	9301      	str	r3, [sp, #4]
 800675e:	a902      	add	r1, sp, #8
 8006760:	f000 f868 	bl	8006834 <_svfiprintf_r>
 8006764:	9b02      	ldr	r3, [sp, #8]
 8006766:	2200      	movs	r2, #0
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	b01c      	add	sp, #112	; 0x70
 800676c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006770:	b003      	add	sp, #12
 8006772:	4770      	bx	lr
 8006774:	20000020 	.word	0x20000020
 8006778:	ffff0208 	.word	0xffff0208

0800677c <__ssputs_r>:
 800677c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006780:	688e      	ldr	r6, [r1, #8]
 8006782:	429e      	cmp	r6, r3
 8006784:	4682      	mov	sl, r0
 8006786:	460c      	mov	r4, r1
 8006788:	4690      	mov	r8, r2
 800678a:	461f      	mov	r7, r3
 800678c:	d838      	bhi.n	8006800 <__ssputs_r+0x84>
 800678e:	898a      	ldrh	r2, [r1, #12]
 8006790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006794:	d032      	beq.n	80067fc <__ssputs_r+0x80>
 8006796:	6825      	ldr	r5, [r4, #0]
 8006798:	6909      	ldr	r1, [r1, #16]
 800679a:	eba5 0901 	sub.w	r9, r5, r1
 800679e:	6965      	ldr	r5, [r4, #20]
 80067a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067a8:	3301      	adds	r3, #1
 80067aa:	444b      	add	r3, r9
 80067ac:	106d      	asrs	r5, r5, #1
 80067ae:	429d      	cmp	r5, r3
 80067b0:	bf38      	it	cc
 80067b2:	461d      	movcc	r5, r3
 80067b4:	0553      	lsls	r3, r2, #21
 80067b6:	d531      	bpl.n	800681c <__ssputs_r+0xa0>
 80067b8:	4629      	mov	r1, r5
 80067ba:	f000 fb39 	bl	8006e30 <_malloc_r>
 80067be:	4606      	mov	r6, r0
 80067c0:	b950      	cbnz	r0, 80067d8 <__ssputs_r+0x5c>
 80067c2:	230c      	movs	r3, #12
 80067c4:	f8ca 3000 	str.w	r3, [sl]
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ce:	81a3      	strh	r3, [r4, #12]
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d8:	6921      	ldr	r1, [r4, #16]
 80067da:	464a      	mov	r2, r9
 80067dc:	f7ff ff98 	bl	8006710 <memcpy>
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ea:	81a3      	strh	r3, [r4, #12]
 80067ec:	6126      	str	r6, [r4, #16]
 80067ee:	6165      	str	r5, [r4, #20]
 80067f0:	444e      	add	r6, r9
 80067f2:	eba5 0509 	sub.w	r5, r5, r9
 80067f6:	6026      	str	r6, [r4, #0]
 80067f8:	60a5      	str	r5, [r4, #8]
 80067fa:	463e      	mov	r6, r7
 80067fc:	42be      	cmp	r6, r7
 80067fe:	d900      	bls.n	8006802 <__ssputs_r+0x86>
 8006800:	463e      	mov	r6, r7
 8006802:	4632      	mov	r2, r6
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	4641      	mov	r1, r8
 8006808:	f000 faa8 	bl	8006d5c <memmove>
 800680c:	68a3      	ldr	r3, [r4, #8]
 800680e:	6822      	ldr	r2, [r4, #0]
 8006810:	1b9b      	subs	r3, r3, r6
 8006812:	4432      	add	r2, r6
 8006814:	60a3      	str	r3, [r4, #8]
 8006816:	6022      	str	r2, [r4, #0]
 8006818:	2000      	movs	r0, #0
 800681a:	e7db      	b.n	80067d4 <__ssputs_r+0x58>
 800681c:	462a      	mov	r2, r5
 800681e:	f000 fb61 	bl	8006ee4 <_realloc_r>
 8006822:	4606      	mov	r6, r0
 8006824:	2800      	cmp	r0, #0
 8006826:	d1e1      	bne.n	80067ec <__ssputs_r+0x70>
 8006828:	6921      	ldr	r1, [r4, #16]
 800682a:	4650      	mov	r0, sl
 800682c:	f000 fab0 	bl	8006d90 <_free_r>
 8006830:	e7c7      	b.n	80067c2 <__ssputs_r+0x46>
	...

08006834 <_svfiprintf_r>:
 8006834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006838:	4698      	mov	r8, r3
 800683a:	898b      	ldrh	r3, [r1, #12]
 800683c:	061b      	lsls	r3, r3, #24
 800683e:	b09d      	sub	sp, #116	; 0x74
 8006840:	4607      	mov	r7, r0
 8006842:	460d      	mov	r5, r1
 8006844:	4614      	mov	r4, r2
 8006846:	d50e      	bpl.n	8006866 <_svfiprintf_r+0x32>
 8006848:	690b      	ldr	r3, [r1, #16]
 800684a:	b963      	cbnz	r3, 8006866 <_svfiprintf_r+0x32>
 800684c:	2140      	movs	r1, #64	; 0x40
 800684e:	f000 faef 	bl	8006e30 <_malloc_r>
 8006852:	6028      	str	r0, [r5, #0]
 8006854:	6128      	str	r0, [r5, #16]
 8006856:	b920      	cbnz	r0, 8006862 <_svfiprintf_r+0x2e>
 8006858:	230c      	movs	r3, #12
 800685a:	603b      	str	r3, [r7, #0]
 800685c:	f04f 30ff 	mov.w	r0, #4294967295
 8006860:	e0d1      	b.n	8006a06 <_svfiprintf_r+0x1d2>
 8006862:	2340      	movs	r3, #64	; 0x40
 8006864:	616b      	str	r3, [r5, #20]
 8006866:	2300      	movs	r3, #0
 8006868:	9309      	str	r3, [sp, #36]	; 0x24
 800686a:	2320      	movs	r3, #32
 800686c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006870:	f8cd 800c 	str.w	r8, [sp, #12]
 8006874:	2330      	movs	r3, #48	; 0x30
 8006876:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a20 <_svfiprintf_r+0x1ec>
 800687a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800687e:	f04f 0901 	mov.w	r9, #1
 8006882:	4623      	mov	r3, r4
 8006884:	469a      	mov	sl, r3
 8006886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800688a:	b10a      	cbz	r2, 8006890 <_svfiprintf_r+0x5c>
 800688c:	2a25      	cmp	r2, #37	; 0x25
 800688e:	d1f9      	bne.n	8006884 <_svfiprintf_r+0x50>
 8006890:	ebba 0b04 	subs.w	fp, sl, r4
 8006894:	d00b      	beq.n	80068ae <_svfiprintf_r+0x7a>
 8006896:	465b      	mov	r3, fp
 8006898:	4622      	mov	r2, r4
 800689a:	4629      	mov	r1, r5
 800689c:	4638      	mov	r0, r7
 800689e:	f7ff ff6d 	bl	800677c <__ssputs_r>
 80068a2:	3001      	adds	r0, #1
 80068a4:	f000 80aa 	beq.w	80069fc <_svfiprintf_r+0x1c8>
 80068a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068aa:	445a      	add	r2, fp
 80068ac:	9209      	str	r2, [sp, #36]	; 0x24
 80068ae:	f89a 3000 	ldrb.w	r3, [sl]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 80a2 	beq.w	80069fc <_svfiprintf_r+0x1c8>
 80068b8:	2300      	movs	r3, #0
 80068ba:	f04f 32ff 	mov.w	r2, #4294967295
 80068be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068c2:	f10a 0a01 	add.w	sl, sl, #1
 80068c6:	9304      	str	r3, [sp, #16]
 80068c8:	9307      	str	r3, [sp, #28]
 80068ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068ce:	931a      	str	r3, [sp, #104]	; 0x68
 80068d0:	4654      	mov	r4, sl
 80068d2:	2205      	movs	r2, #5
 80068d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068d8:	4851      	ldr	r0, [pc, #324]	; (8006a20 <_svfiprintf_r+0x1ec>)
 80068da:	f7f9 fc81 	bl	80001e0 <memchr>
 80068de:	9a04      	ldr	r2, [sp, #16]
 80068e0:	b9d8      	cbnz	r0, 800691a <_svfiprintf_r+0xe6>
 80068e2:	06d0      	lsls	r0, r2, #27
 80068e4:	bf44      	itt	mi
 80068e6:	2320      	movmi	r3, #32
 80068e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068ec:	0711      	lsls	r1, r2, #28
 80068ee:	bf44      	itt	mi
 80068f0:	232b      	movmi	r3, #43	; 0x2b
 80068f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068f6:	f89a 3000 	ldrb.w	r3, [sl]
 80068fa:	2b2a      	cmp	r3, #42	; 0x2a
 80068fc:	d015      	beq.n	800692a <_svfiprintf_r+0xf6>
 80068fe:	9a07      	ldr	r2, [sp, #28]
 8006900:	4654      	mov	r4, sl
 8006902:	2000      	movs	r0, #0
 8006904:	f04f 0c0a 	mov.w	ip, #10
 8006908:	4621      	mov	r1, r4
 800690a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800690e:	3b30      	subs	r3, #48	; 0x30
 8006910:	2b09      	cmp	r3, #9
 8006912:	d94e      	bls.n	80069b2 <_svfiprintf_r+0x17e>
 8006914:	b1b0      	cbz	r0, 8006944 <_svfiprintf_r+0x110>
 8006916:	9207      	str	r2, [sp, #28]
 8006918:	e014      	b.n	8006944 <_svfiprintf_r+0x110>
 800691a:	eba0 0308 	sub.w	r3, r0, r8
 800691e:	fa09 f303 	lsl.w	r3, r9, r3
 8006922:	4313      	orrs	r3, r2
 8006924:	9304      	str	r3, [sp, #16]
 8006926:	46a2      	mov	sl, r4
 8006928:	e7d2      	b.n	80068d0 <_svfiprintf_r+0x9c>
 800692a:	9b03      	ldr	r3, [sp, #12]
 800692c:	1d19      	adds	r1, r3, #4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	9103      	str	r1, [sp, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	bfbb      	ittet	lt
 8006936:	425b      	neglt	r3, r3
 8006938:	f042 0202 	orrlt.w	r2, r2, #2
 800693c:	9307      	strge	r3, [sp, #28]
 800693e:	9307      	strlt	r3, [sp, #28]
 8006940:	bfb8      	it	lt
 8006942:	9204      	strlt	r2, [sp, #16]
 8006944:	7823      	ldrb	r3, [r4, #0]
 8006946:	2b2e      	cmp	r3, #46	; 0x2e
 8006948:	d10c      	bne.n	8006964 <_svfiprintf_r+0x130>
 800694a:	7863      	ldrb	r3, [r4, #1]
 800694c:	2b2a      	cmp	r3, #42	; 0x2a
 800694e:	d135      	bne.n	80069bc <_svfiprintf_r+0x188>
 8006950:	9b03      	ldr	r3, [sp, #12]
 8006952:	1d1a      	adds	r2, r3, #4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	9203      	str	r2, [sp, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	bfb8      	it	lt
 800695c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006960:	3402      	adds	r4, #2
 8006962:	9305      	str	r3, [sp, #20]
 8006964:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a30 <_svfiprintf_r+0x1fc>
 8006968:	7821      	ldrb	r1, [r4, #0]
 800696a:	2203      	movs	r2, #3
 800696c:	4650      	mov	r0, sl
 800696e:	f7f9 fc37 	bl	80001e0 <memchr>
 8006972:	b140      	cbz	r0, 8006986 <_svfiprintf_r+0x152>
 8006974:	2340      	movs	r3, #64	; 0x40
 8006976:	eba0 000a 	sub.w	r0, r0, sl
 800697a:	fa03 f000 	lsl.w	r0, r3, r0
 800697e:	9b04      	ldr	r3, [sp, #16]
 8006980:	4303      	orrs	r3, r0
 8006982:	3401      	adds	r4, #1
 8006984:	9304      	str	r3, [sp, #16]
 8006986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800698a:	4826      	ldr	r0, [pc, #152]	; (8006a24 <_svfiprintf_r+0x1f0>)
 800698c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006990:	2206      	movs	r2, #6
 8006992:	f7f9 fc25 	bl	80001e0 <memchr>
 8006996:	2800      	cmp	r0, #0
 8006998:	d038      	beq.n	8006a0c <_svfiprintf_r+0x1d8>
 800699a:	4b23      	ldr	r3, [pc, #140]	; (8006a28 <_svfiprintf_r+0x1f4>)
 800699c:	bb1b      	cbnz	r3, 80069e6 <_svfiprintf_r+0x1b2>
 800699e:	9b03      	ldr	r3, [sp, #12]
 80069a0:	3307      	adds	r3, #7
 80069a2:	f023 0307 	bic.w	r3, r3, #7
 80069a6:	3308      	adds	r3, #8
 80069a8:	9303      	str	r3, [sp, #12]
 80069aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ac:	4433      	add	r3, r6
 80069ae:	9309      	str	r3, [sp, #36]	; 0x24
 80069b0:	e767      	b.n	8006882 <_svfiprintf_r+0x4e>
 80069b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80069b6:	460c      	mov	r4, r1
 80069b8:	2001      	movs	r0, #1
 80069ba:	e7a5      	b.n	8006908 <_svfiprintf_r+0xd4>
 80069bc:	2300      	movs	r3, #0
 80069be:	3401      	adds	r4, #1
 80069c0:	9305      	str	r3, [sp, #20]
 80069c2:	4619      	mov	r1, r3
 80069c4:	f04f 0c0a 	mov.w	ip, #10
 80069c8:	4620      	mov	r0, r4
 80069ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ce:	3a30      	subs	r2, #48	; 0x30
 80069d0:	2a09      	cmp	r2, #9
 80069d2:	d903      	bls.n	80069dc <_svfiprintf_r+0x1a8>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0c5      	beq.n	8006964 <_svfiprintf_r+0x130>
 80069d8:	9105      	str	r1, [sp, #20]
 80069da:	e7c3      	b.n	8006964 <_svfiprintf_r+0x130>
 80069dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80069e0:	4604      	mov	r4, r0
 80069e2:	2301      	movs	r3, #1
 80069e4:	e7f0      	b.n	80069c8 <_svfiprintf_r+0x194>
 80069e6:	ab03      	add	r3, sp, #12
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	462a      	mov	r2, r5
 80069ec:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <_svfiprintf_r+0x1f8>)
 80069ee:	a904      	add	r1, sp, #16
 80069f0:	4638      	mov	r0, r7
 80069f2:	f3af 8000 	nop.w
 80069f6:	1c42      	adds	r2, r0, #1
 80069f8:	4606      	mov	r6, r0
 80069fa:	d1d6      	bne.n	80069aa <_svfiprintf_r+0x176>
 80069fc:	89ab      	ldrh	r3, [r5, #12]
 80069fe:	065b      	lsls	r3, r3, #25
 8006a00:	f53f af2c 	bmi.w	800685c <_svfiprintf_r+0x28>
 8006a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a06:	b01d      	add	sp, #116	; 0x74
 8006a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0c:	ab03      	add	r3, sp, #12
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	462a      	mov	r2, r5
 8006a12:	4b06      	ldr	r3, [pc, #24]	; (8006a2c <_svfiprintf_r+0x1f8>)
 8006a14:	a904      	add	r1, sp, #16
 8006a16:	4638      	mov	r0, r7
 8006a18:	f000 f87a 	bl	8006b10 <_printf_i>
 8006a1c:	e7eb      	b.n	80069f6 <_svfiprintf_r+0x1c2>
 8006a1e:	bf00      	nop
 8006a20:	080070dc 	.word	0x080070dc
 8006a24:	080070e6 	.word	0x080070e6
 8006a28:	00000000 	.word	0x00000000
 8006a2c:	0800677d 	.word	0x0800677d
 8006a30:	080070e2 	.word	0x080070e2

08006a34 <_printf_common>:
 8006a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a38:	4616      	mov	r6, r2
 8006a3a:	4699      	mov	r9, r3
 8006a3c:	688a      	ldr	r2, [r1, #8]
 8006a3e:	690b      	ldr	r3, [r1, #16]
 8006a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a44:	4293      	cmp	r3, r2
 8006a46:	bfb8      	it	lt
 8006a48:	4613      	movlt	r3, r2
 8006a4a:	6033      	str	r3, [r6, #0]
 8006a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a50:	4607      	mov	r7, r0
 8006a52:	460c      	mov	r4, r1
 8006a54:	b10a      	cbz	r2, 8006a5a <_printf_common+0x26>
 8006a56:	3301      	adds	r3, #1
 8006a58:	6033      	str	r3, [r6, #0]
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	0699      	lsls	r1, r3, #26
 8006a5e:	bf42      	ittt	mi
 8006a60:	6833      	ldrmi	r3, [r6, #0]
 8006a62:	3302      	addmi	r3, #2
 8006a64:	6033      	strmi	r3, [r6, #0]
 8006a66:	6825      	ldr	r5, [r4, #0]
 8006a68:	f015 0506 	ands.w	r5, r5, #6
 8006a6c:	d106      	bne.n	8006a7c <_printf_common+0x48>
 8006a6e:	f104 0a19 	add.w	sl, r4, #25
 8006a72:	68e3      	ldr	r3, [r4, #12]
 8006a74:	6832      	ldr	r2, [r6, #0]
 8006a76:	1a9b      	subs	r3, r3, r2
 8006a78:	42ab      	cmp	r3, r5
 8006a7a:	dc26      	bgt.n	8006aca <_printf_common+0x96>
 8006a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a80:	1e13      	subs	r3, r2, #0
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	bf18      	it	ne
 8006a86:	2301      	movne	r3, #1
 8006a88:	0692      	lsls	r2, r2, #26
 8006a8a:	d42b      	bmi.n	8006ae4 <_printf_common+0xb0>
 8006a8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a90:	4649      	mov	r1, r9
 8006a92:	4638      	mov	r0, r7
 8006a94:	47c0      	blx	r8
 8006a96:	3001      	adds	r0, #1
 8006a98:	d01e      	beq.n	8006ad8 <_printf_common+0xa4>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	68e5      	ldr	r5, [r4, #12]
 8006a9e:	6832      	ldr	r2, [r6, #0]
 8006aa0:	f003 0306 	and.w	r3, r3, #6
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	bf08      	it	eq
 8006aa8:	1aad      	subeq	r5, r5, r2
 8006aaa:	68a3      	ldr	r3, [r4, #8]
 8006aac:	6922      	ldr	r2, [r4, #16]
 8006aae:	bf0c      	ite	eq
 8006ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ab4:	2500      	movne	r5, #0
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	bfc4      	itt	gt
 8006aba:	1a9b      	subgt	r3, r3, r2
 8006abc:	18ed      	addgt	r5, r5, r3
 8006abe:	2600      	movs	r6, #0
 8006ac0:	341a      	adds	r4, #26
 8006ac2:	42b5      	cmp	r5, r6
 8006ac4:	d11a      	bne.n	8006afc <_printf_common+0xc8>
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	e008      	b.n	8006adc <_printf_common+0xa8>
 8006aca:	2301      	movs	r3, #1
 8006acc:	4652      	mov	r2, sl
 8006ace:	4649      	mov	r1, r9
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	47c0      	blx	r8
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d103      	bne.n	8006ae0 <_printf_common+0xac>
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8006adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae0:	3501      	adds	r5, #1
 8006ae2:	e7c6      	b.n	8006a72 <_printf_common+0x3e>
 8006ae4:	18e1      	adds	r1, r4, r3
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	2030      	movs	r0, #48	; 0x30
 8006aea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006aee:	4422      	add	r2, r4
 8006af0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006af4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006af8:	3302      	adds	r3, #2
 8006afa:	e7c7      	b.n	8006a8c <_printf_common+0x58>
 8006afc:	2301      	movs	r3, #1
 8006afe:	4622      	mov	r2, r4
 8006b00:	4649      	mov	r1, r9
 8006b02:	4638      	mov	r0, r7
 8006b04:	47c0      	blx	r8
 8006b06:	3001      	adds	r0, #1
 8006b08:	d0e6      	beq.n	8006ad8 <_printf_common+0xa4>
 8006b0a:	3601      	adds	r6, #1
 8006b0c:	e7d9      	b.n	8006ac2 <_printf_common+0x8e>
	...

08006b10 <_printf_i>:
 8006b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b14:	460c      	mov	r4, r1
 8006b16:	4691      	mov	r9, r2
 8006b18:	7e27      	ldrb	r7, [r4, #24]
 8006b1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b1c:	2f78      	cmp	r7, #120	; 0x78
 8006b1e:	4680      	mov	r8, r0
 8006b20:	469a      	mov	sl, r3
 8006b22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b26:	d807      	bhi.n	8006b38 <_printf_i+0x28>
 8006b28:	2f62      	cmp	r7, #98	; 0x62
 8006b2a:	d80a      	bhi.n	8006b42 <_printf_i+0x32>
 8006b2c:	2f00      	cmp	r7, #0
 8006b2e:	f000 80d8 	beq.w	8006ce2 <_printf_i+0x1d2>
 8006b32:	2f58      	cmp	r7, #88	; 0x58
 8006b34:	f000 80a3 	beq.w	8006c7e <_printf_i+0x16e>
 8006b38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b40:	e03a      	b.n	8006bb8 <_printf_i+0xa8>
 8006b42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b46:	2b15      	cmp	r3, #21
 8006b48:	d8f6      	bhi.n	8006b38 <_printf_i+0x28>
 8006b4a:	a001      	add	r0, pc, #4	; (adr r0, 8006b50 <_printf_i+0x40>)
 8006b4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b50:	08006ba9 	.word	0x08006ba9
 8006b54:	08006bbd 	.word	0x08006bbd
 8006b58:	08006b39 	.word	0x08006b39
 8006b5c:	08006b39 	.word	0x08006b39
 8006b60:	08006b39 	.word	0x08006b39
 8006b64:	08006b39 	.word	0x08006b39
 8006b68:	08006bbd 	.word	0x08006bbd
 8006b6c:	08006b39 	.word	0x08006b39
 8006b70:	08006b39 	.word	0x08006b39
 8006b74:	08006b39 	.word	0x08006b39
 8006b78:	08006b39 	.word	0x08006b39
 8006b7c:	08006cc9 	.word	0x08006cc9
 8006b80:	08006bed 	.word	0x08006bed
 8006b84:	08006cab 	.word	0x08006cab
 8006b88:	08006b39 	.word	0x08006b39
 8006b8c:	08006b39 	.word	0x08006b39
 8006b90:	08006ceb 	.word	0x08006ceb
 8006b94:	08006b39 	.word	0x08006b39
 8006b98:	08006bed 	.word	0x08006bed
 8006b9c:	08006b39 	.word	0x08006b39
 8006ba0:	08006b39 	.word	0x08006b39
 8006ba4:	08006cb3 	.word	0x08006cb3
 8006ba8:	680b      	ldr	r3, [r1, #0]
 8006baa:	1d1a      	adds	r2, r3, #4
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	600a      	str	r2, [r1, #0]
 8006bb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e0a3      	b.n	8006d04 <_printf_i+0x1f4>
 8006bbc:	6825      	ldr	r5, [r4, #0]
 8006bbe:	6808      	ldr	r0, [r1, #0]
 8006bc0:	062e      	lsls	r6, r5, #24
 8006bc2:	f100 0304 	add.w	r3, r0, #4
 8006bc6:	d50a      	bpl.n	8006bde <_printf_i+0xce>
 8006bc8:	6805      	ldr	r5, [r0, #0]
 8006bca:	600b      	str	r3, [r1, #0]
 8006bcc:	2d00      	cmp	r5, #0
 8006bce:	da03      	bge.n	8006bd8 <_printf_i+0xc8>
 8006bd0:	232d      	movs	r3, #45	; 0x2d
 8006bd2:	426d      	negs	r5, r5
 8006bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd8:	485e      	ldr	r0, [pc, #376]	; (8006d54 <_printf_i+0x244>)
 8006bda:	230a      	movs	r3, #10
 8006bdc:	e019      	b.n	8006c12 <_printf_i+0x102>
 8006bde:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006be2:	6805      	ldr	r5, [r0, #0]
 8006be4:	600b      	str	r3, [r1, #0]
 8006be6:	bf18      	it	ne
 8006be8:	b22d      	sxthne	r5, r5
 8006bea:	e7ef      	b.n	8006bcc <_printf_i+0xbc>
 8006bec:	680b      	ldr	r3, [r1, #0]
 8006bee:	6825      	ldr	r5, [r4, #0]
 8006bf0:	1d18      	adds	r0, r3, #4
 8006bf2:	6008      	str	r0, [r1, #0]
 8006bf4:	0628      	lsls	r0, r5, #24
 8006bf6:	d501      	bpl.n	8006bfc <_printf_i+0xec>
 8006bf8:	681d      	ldr	r5, [r3, #0]
 8006bfa:	e002      	b.n	8006c02 <_printf_i+0xf2>
 8006bfc:	0669      	lsls	r1, r5, #25
 8006bfe:	d5fb      	bpl.n	8006bf8 <_printf_i+0xe8>
 8006c00:	881d      	ldrh	r5, [r3, #0]
 8006c02:	4854      	ldr	r0, [pc, #336]	; (8006d54 <_printf_i+0x244>)
 8006c04:	2f6f      	cmp	r7, #111	; 0x6f
 8006c06:	bf0c      	ite	eq
 8006c08:	2308      	moveq	r3, #8
 8006c0a:	230a      	movne	r3, #10
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c12:	6866      	ldr	r6, [r4, #4]
 8006c14:	60a6      	str	r6, [r4, #8]
 8006c16:	2e00      	cmp	r6, #0
 8006c18:	bfa2      	ittt	ge
 8006c1a:	6821      	ldrge	r1, [r4, #0]
 8006c1c:	f021 0104 	bicge.w	r1, r1, #4
 8006c20:	6021      	strge	r1, [r4, #0]
 8006c22:	b90d      	cbnz	r5, 8006c28 <_printf_i+0x118>
 8006c24:	2e00      	cmp	r6, #0
 8006c26:	d04d      	beq.n	8006cc4 <_printf_i+0x1b4>
 8006c28:	4616      	mov	r6, r2
 8006c2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c2e:	fb03 5711 	mls	r7, r3, r1, r5
 8006c32:	5dc7      	ldrb	r7, [r0, r7]
 8006c34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c38:	462f      	mov	r7, r5
 8006c3a:	42bb      	cmp	r3, r7
 8006c3c:	460d      	mov	r5, r1
 8006c3e:	d9f4      	bls.n	8006c2a <_printf_i+0x11a>
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d10b      	bne.n	8006c5c <_printf_i+0x14c>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	07df      	lsls	r7, r3, #31
 8006c48:	d508      	bpl.n	8006c5c <_printf_i+0x14c>
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	6861      	ldr	r1, [r4, #4]
 8006c4e:	4299      	cmp	r1, r3
 8006c50:	bfde      	ittt	le
 8006c52:	2330      	movle	r3, #48	; 0x30
 8006c54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c5c:	1b92      	subs	r2, r2, r6
 8006c5e:	6122      	str	r2, [r4, #16]
 8006c60:	f8cd a000 	str.w	sl, [sp]
 8006c64:	464b      	mov	r3, r9
 8006c66:	aa03      	add	r2, sp, #12
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	f7ff fee2 	bl	8006a34 <_printf_common>
 8006c70:	3001      	adds	r0, #1
 8006c72:	d14c      	bne.n	8006d0e <_printf_i+0x1fe>
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295
 8006c78:	b004      	add	sp, #16
 8006c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c7e:	4835      	ldr	r0, [pc, #212]	; (8006d54 <_printf_i+0x244>)
 8006c80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	680e      	ldr	r6, [r1, #0]
 8006c88:	061f      	lsls	r7, r3, #24
 8006c8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c8e:	600e      	str	r6, [r1, #0]
 8006c90:	d514      	bpl.n	8006cbc <_printf_i+0x1ac>
 8006c92:	07d9      	lsls	r1, r3, #31
 8006c94:	bf44      	itt	mi
 8006c96:	f043 0320 	orrmi.w	r3, r3, #32
 8006c9a:	6023      	strmi	r3, [r4, #0]
 8006c9c:	b91d      	cbnz	r5, 8006ca6 <_printf_i+0x196>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	f023 0320 	bic.w	r3, r3, #32
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	2310      	movs	r3, #16
 8006ca8:	e7b0      	b.n	8006c0c <_printf_i+0xfc>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	f043 0320 	orr.w	r3, r3, #32
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	2378      	movs	r3, #120	; 0x78
 8006cb4:	4828      	ldr	r0, [pc, #160]	; (8006d58 <_printf_i+0x248>)
 8006cb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cba:	e7e3      	b.n	8006c84 <_printf_i+0x174>
 8006cbc:	065e      	lsls	r6, r3, #25
 8006cbe:	bf48      	it	mi
 8006cc0:	b2ad      	uxthmi	r5, r5
 8006cc2:	e7e6      	b.n	8006c92 <_printf_i+0x182>
 8006cc4:	4616      	mov	r6, r2
 8006cc6:	e7bb      	b.n	8006c40 <_printf_i+0x130>
 8006cc8:	680b      	ldr	r3, [r1, #0]
 8006cca:	6826      	ldr	r6, [r4, #0]
 8006ccc:	6960      	ldr	r0, [r4, #20]
 8006cce:	1d1d      	adds	r5, r3, #4
 8006cd0:	600d      	str	r5, [r1, #0]
 8006cd2:	0635      	lsls	r5, r6, #24
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	d501      	bpl.n	8006cdc <_printf_i+0x1cc>
 8006cd8:	6018      	str	r0, [r3, #0]
 8006cda:	e002      	b.n	8006ce2 <_printf_i+0x1d2>
 8006cdc:	0671      	lsls	r1, r6, #25
 8006cde:	d5fb      	bpl.n	8006cd8 <_printf_i+0x1c8>
 8006ce0:	8018      	strh	r0, [r3, #0]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	6123      	str	r3, [r4, #16]
 8006ce6:	4616      	mov	r6, r2
 8006ce8:	e7ba      	b.n	8006c60 <_printf_i+0x150>
 8006cea:	680b      	ldr	r3, [r1, #0]
 8006cec:	1d1a      	adds	r2, r3, #4
 8006cee:	600a      	str	r2, [r1, #0]
 8006cf0:	681e      	ldr	r6, [r3, #0]
 8006cf2:	6862      	ldr	r2, [r4, #4]
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f7f9 fa72 	bl	80001e0 <memchr>
 8006cfc:	b108      	cbz	r0, 8006d02 <_printf_i+0x1f2>
 8006cfe:	1b80      	subs	r0, r0, r6
 8006d00:	6060      	str	r0, [r4, #4]
 8006d02:	6863      	ldr	r3, [r4, #4]
 8006d04:	6123      	str	r3, [r4, #16]
 8006d06:	2300      	movs	r3, #0
 8006d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d0c:	e7a8      	b.n	8006c60 <_printf_i+0x150>
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	4632      	mov	r2, r6
 8006d12:	4649      	mov	r1, r9
 8006d14:	4640      	mov	r0, r8
 8006d16:	47d0      	blx	sl
 8006d18:	3001      	adds	r0, #1
 8006d1a:	d0ab      	beq.n	8006c74 <_printf_i+0x164>
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	079b      	lsls	r3, r3, #30
 8006d20:	d413      	bmi.n	8006d4a <_printf_i+0x23a>
 8006d22:	68e0      	ldr	r0, [r4, #12]
 8006d24:	9b03      	ldr	r3, [sp, #12]
 8006d26:	4298      	cmp	r0, r3
 8006d28:	bfb8      	it	lt
 8006d2a:	4618      	movlt	r0, r3
 8006d2c:	e7a4      	b.n	8006c78 <_printf_i+0x168>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	4632      	mov	r2, r6
 8006d32:	4649      	mov	r1, r9
 8006d34:	4640      	mov	r0, r8
 8006d36:	47d0      	blx	sl
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d09b      	beq.n	8006c74 <_printf_i+0x164>
 8006d3c:	3501      	adds	r5, #1
 8006d3e:	68e3      	ldr	r3, [r4, #12]
 8006d40:	9903      	ldr	r1, [sp, #12]
 8006d42:	1a5b      	subs	r3, r3, r1
 8006d44:	42ab      	cmp	r3, r5
 8006d46:	dcf2      	bgt.n	8006d2e <_printf_i+0x21e>
 8006d48:	e7eb      	b.n	8006d22 <_printf_i+0x212>
 8006d4a:	2500      	movs	r5, #0
 8006d4c:	f104 0619 	add.w	r6, r4, #25
 8006d50:	e7f5      	b.n	8006d3e <_printf_i+0x22e>
 8006d52:	bf00      	nop
 8006d54:	080070ed 	.word	0x080070ed
 8006d58:	080070fe 	.word	0x080070fe

08006d5c <memmove>:
 8006d5c:	4288      	cmp	r0, r1
 8006d5e:	b510      	push	{r4, lr}
 8006d60:	eb01 0402 	add.w	r4, r1, r2
 8006d64:	d902      	bls.n	8006d6c <memmove+0x10>
 8006d66:	4284      	cmp	r4, r0
 8006d68:	4623      	mov	r3, r4
 8006d6a:	d807      	bhi.n	8006d7c <memmove+0x20>
 8006d6c:	1e43      	subs	r3, r0, #1
 8006d6e:	42a1      	cmp	r1, r4
 8006d70:	d008      	beq.n	8006d84 <memmove+0x28>
 8006d72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d7a:	e7f8      	b.n	8006d6e <memmove+0x12>
 8006d7c:	4402      	add	r2, r0
 8006d7e:	4601      	mov	r1, r0
 8006d80:	428a      	cmp	r2, r1
 8006d82:	d100      	bne.n	8006d86 <memmove+0x2a>
 8006d84:	bd10      	pop	{r4, pc}
 8006d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d8e:	e7f7      	b.n	8006d80 <memmove+0x24>

08006d90 <_free_r>:
 8006d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d92:	2900      	cmp	r1, #0
 8006d94:	d048      	beq.n	8006e28 <_free_r+0x98>
 8006d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d9a:	9001      	str	r0, [sp, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8006da2:	bfb8      	it	lt
 8006da4:	18e4      	addlt	r4, r4, r3
 8006da6:	f000 f8d3 	bl	8006f50 <__malloc_lock>
 8006daa:	4a20      	ldr	r2, [pc, #128]	; (8006e2c <_free_r+0x9c>)
 8006dac:	9801      	ldr	r0, [sp, #4]
 8006dae:	6813      	ldr	r3, [r2, #0]
 8006db0:	4615      	mov	r5, r2
 8006db2:	b933      	cbnz	r3, 8006dc2 <_free_r+0x32>
 8006db4:	6063      	str	r3, [r4, #4]
 8006db6:	6014      	str	r4, [r2, #0]
 8006db8:	b003      	add	sp, #12
 8006dba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dbe:	f000 b8cd 	b.w	8006f5c <__malloc_unlock>
 8006dc2:	42a3      	cmp	r3, r4
 8006dc4:	d90b      	bls.n	8006dde <_free_r+0x4e>
 8006dc6:	6821      	ldr	r1, [r4, #0]
 8006dc8:	1862      	adds	r2, r4, r1
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	bf04      	itt	eq
 8006dce:	681a      	ldreq	r2, [r3, #0]
 8006dd0:	685b      	ldreq	r3, [r3, #4]
 8006dd2:	6063      	str	r3, [r4, #4]
 8006dd4:	bf04      	itt	eq
 8006dd6:	1852      	addeq	r2, r2, r1
 8006dd8:	6022      	streq	r2, [r4, #0]
 8006dda:	602c      	str	r4, [r5, #0]
 8006ddc:	e7ec      	b.n	8006db8 <_free_r+0x28>
 8006dde:	461a      	mov	r2, r3
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	b10b      	cbz	r3, 8006de8 <_free_r+0x58>
 8006de4:	42a3      	cmp	r3, r4
 8006de6:	d9fa      	bls.n	8006dde <_free_r+0x4e>
 8006de8:	6811      	ldr	r1, [r2, #0]
 8006dea:	1855      	adds	r5, r2, r1
 8006dec:	42a5      	cmp	r5, r4
 8006dee:	d10b      	bne.n	8006e08 <_free_r+0x78>
 8006df0:	6824      	ldr	r4, [r4, #0]
 8006df2:	4421      	add	r1, r4
 8006df4:	1854      	adds	r4, r2, r1
 8006df6:	42a3      	cmp	r3, r4
 8006df8:	6011      	str	r1, [r2, #0]
 8006dfa:	d1dd      	bne.n	8006db8 <_free_r+0x28>
 8006dfc:	681c      	ldr	r4, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	6053      	str	r3, [r2, #4]
 8006e02:	4421      	add	r1, r4
 8006e04:	6011      	str	r1, [r2, #0]
 8006e06:	e7d7      	b.n	8006db8 <_free_r+0x28>
 8006e08:	d902      	bls.n	8006e10 <_free_r+0x80>
 8006e0a:	230c      	movs	r3, #12
 8006e0c:	6003      	str	r3, [r0, #0]
 8006e0e:	e7d3      	b.n	8006db8 <_free_r+0x28>
 8006e10:	6825      	ldr	r5, [r4, #0]
 8006e12:	1961      	adds	r1, r4, r5
 8006e14:	428b      	cmp	r3, r1
 8006e16:	bf04      	itt	eq
 8006e18:	6819      	ldreq	r1, [r3, #0]
 8006e1a:	685b      	ldreq	r3, [r3, #4]
 8006e1c:	6063      	str	r3, [r4, #4]
 8006e1e:	bf04      	itt	eq
 8006e20:	1949      	addeq	r1, r1, r5
 8006e22:	6021      	streq	r1, [r4, #0]
 8006e24:	6054      	str	r4, [r2, #4]
 8006e26:	e7c7      	b.n	8006db8 <_free_r+0x28>
 8006e28:	b003      	add	sp, #12
 8006e2a:	bd30      	pop	{r4, r5, pc}
 8006e2c:	200049bc 	.word	0x200049bc

08006e30 <_malloc_r>:
 8006e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e32:	1ccd      	adds	r5, r1, #3
 8006e34:	f025 0503 	bic.w	r5, r5, #3
 8006e38:	3508      	adds	r5, #8
 8006e3a:	2d0c      	cmp	r5, #12
 8006e3c:	bf38      	it	cc
 8006e3e:	250c      	movcc	r5, #12
 8006e40:	2d00      	cmp	r5, #0
 8006e42:	4606      	mov	r6, r0
 8006e44:	db01      	blt.n	8006e4a <_malloc_r+0x1a>
 8006e46:	42a9      	cmp	r1, r5
 8006e48:	d903      	bls.n	8006e52 <_malloc_r+0x22>
 8006e4a:	230c      	movs	r3, #12
 8006e4c:	6033      	str	r3, [r6, #0]
 8006e4e:	2000      	movs	r0, #0
 8006e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e52:	f000 f87d 	bl	8006f50 <__malloc_lock>
 8006e56:	4921      	ldr	r1, [pc, #132]	; (8006edc <_malloc_r+0xac>)
 8006e58:	680a      	ldr	r2, [r1, #0]
 8006e5a:	4614      	mov	r4, r2
 8006e5c:	b99c      	cbnz	r4, 8006e86 <_malloc_r+0x56>
 8006e5e:	4f20      	ldr	r7, [pc, #128]	; (8006ee0 <_malloc_r+0xb0>)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	b923      	cbnz	r3, 8006e6e <_malloc_r+0x3e>
 8006e64:	4621      	mov	r1, r4
 8006e66:	4630      	mov	r0, r6
 8006e68:	f000 f862 	bl	8006f30 <_sbrk_r>
 8006e6c:	6038      	str	r0, [r7, #0]
 8006e6e:	4629      	mov	r1, r5
 8006e70:	4630      	mov	r0, r6
 8006e72:	f000 f85d 	bl	8006f30 <_sbrk_r>
 8006e76:	1c43      	adds	r3, r0, #1
 8006e78:	d123      	bne.n	8006ec2 <_malloc_r+0x92>
 8006e7a:	230c      	movs	r3, #12
 8006e7c:	6033      	str	r3, [r6, #0]
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f000 f86c 	bl	8006f5c <__malloc_unlock>
 8006e84:	e7e3      	b.n	8006e4e <_malloc_r+0x1e>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	1b5b      	subs	r3, r3, r5
 8006e8a:	d417      	bmi.n	8006ebc <_malloc_r+0x8c>
 8006e8c:	2b0b      	cmp	r3, #11
 8006e8e:	d903      	bls.n	8006e98 <_malloc_r+0x68>
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	441c      	add	r4, r3
 8006e94:	6025      	str	r5, [r4, #0]
 8006e96:	e004      	b.n	8006ea2 <_malloc_r+0x72>
 8006e98:	6863      	ldr	r3, [r4, #4]
 8006e9a:	42a2      	cmp	r2, r4
 8006e9c:	bf0c      	ite	eq
 8006e9e:	600b      	streq	r3, [r1, #0]
 8006ea0:	6053      	strne	r3, [r2, #4]
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f000 f85a 	bl	8006f5c <__malloc_unlock>
 8006ea8:	f104 000b 	add.w	r0, r4, #11
 8006eac:	1d23      	adds	r3, r4, #4
 8006eae:	f020 0007 	bic.w	r0, r0, #7
 8006eb2:	1ac2      	subs	r2, r0, r3
 8006eb4:	d0cc      	beq.n	8006e50 <_malloc_r+0x20>
 8006eb6:	1a1b      	subs	r3, r3, r0
 8006eb8:	50a3      	str	r3, [r4, r2]
 8006eba:	e7c9      	b.n	8006e50 <_malloc_r+0x20>
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	6864      	ldr	r4, [r4, #4]
 8006ec0:	e7cc      	b.n	8006e5c <_malloc_r+0x2c>
 8006ec2:	1cc4      	adds	r4, r0, #3
 8006ec4:	f024 0403 	bic.w	r4, r4, #3
 8006ec8:	42a0      	cmp	r0, r4
 8006eca:	d0e3      	beq.n	8006e94 <_malloc_r+0x64>
 8006ecc:	1a21      	subs	r1, r4, r0
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f000 f82e 	bl	8006f30 <_sbrk_r>
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d1dd      	bne.n	8006e94 <_malloc_r+0x64>
 8006ed8:	e7cf      	b.n	8006e7a <_malloc_r+0x4a>
 8006eda:	bf00      	nop
 8006edc:	200049bc 	.word	0x200049bc
 8006ee0:	200049c0 	.word	0x200049c0

08006ee4 <_realloc_r>:
 8006ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee6:	4607      	mov	r7, r0
 8006ee8:	4614      	mov	r4, r2
 8006eea:	460e      	mov	r6, r1
 8006eec:	b921      	cbnz	r1, 8006ef8 <_realloc_r+0x14>
 8006eee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	f7ff bf9c 	b.w	8006e30 <_malloc_r>
 8006ef8:	b922      	cbnz	r2, 8006f04 <_realloc_r+0x20>
 8006efa:	f7ff ff49 	bl	8006d90 <_free_r>
 8006efe:	4625      	mov	r5, r4
 8006f00:	4628      	mov	r0, r5
 8006f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f04:	f000 f830 	bl	8006f68 <_malloc_usable_size_r>
 8006f08:	42a0      	cmp	r0, r4
 8006f0a:	d20f      	bcs.n	8006f2c <_realloc_r+0x48>
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	4638      	mov	r0, r7
 8006f10:	f7ff ff8e 	bl	8006e30 <_malloc_r>
 8006f14:	4605      	mov	r5, r0
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d0f2      	beq.n	8006f00 <_realloc_r+0x1c>
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	f7ff fbf7 	bl	8006710 <memcpy>
 8006f22:	4631      	mov	r1, r6
 8006f24:	4638      	mov	r0, r7
 8006f26:	f7ff ff33 	bl	8006d90 <_free_r>
 8006f2a:	e7e9      	b.n	8006f00 <_realloc_r+0x1c>
 8006f2c:	4635      	mov	r5, r6
 8006f2e:	e7e7      	b.n	8006f00 <_realloc_r+0x1c>

08006f30 <_sbrk_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4d06      	ldr	r5, [pc, #24]	; (8006f4c <_sbrk_r+0x1c>)
 8006f34:	2300      	movs	r3, #0
 8006f36:	4604      	mov	r4, r0
 8006f38:	4608      	mov	r0, r1
 8006f3a:	602b      	str	r3, [r5, #0]
 8006f3c:	f7fa fb1c 	bl	8001578 <_sbrk>
 8006f40:	1c43      	adds	r3, r0, #1
 8006f42:	d102      	bne.n	8006f4a <_sbrk_r+0x1a>
 8006f44:	682b      	ldr	r3, [r5, #0]
 8006f46:	b103      	cbz	r3, 8006f4a <_sbrk_r+0x1a>
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}
 8006f4c:	20004b04 	.word	0x20004b04

08006f50 <__malloc_lock>:
 8006f50:	4801      	ldr	r0, [pc, #4]	; (8006f58 <__malloc_lock+0x8>)
 8006f52:	f000 b811 	b.w	8006f78 <__retarget_lock_acquire_recursive>
 8006f56:	bf00      	nop
 8006f58:	20004b0c 	.word	0x20004b0c

08006f5c <__malloc_unlock>:
 8006f5c:	4801      	ldr	r0, [pc, #4]	; (8006f64 <__malloc_unlock+0x8>)
 8006f5e:	f000 b80c 	b.w	8006f7a <__retarget_lock_release_recursive>
 8006f62:	bf00      	nop
 8006f64:	20004b0c 	.word	0x20004b0c

08006f68 <_malloc_usable_size_r>:
 8006f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f6c:	1f18      	subs	r0, r3, #4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	bfbc      	itt	lt
 8006f72:	580b      	ldrlt	r3, [r1, r0]
 8006f74:	18c0      	addlt	r0, r0, r3
 8006f76:	4770      	bx	lr

08006f78 <__retarget_lock_acquire_recursive>:
 8006f78:	4770      	bx	lr

08006f7a <__retarget_lock_release_recursive>:
 8006f7a:	4770      	bx	lr

08006f7c <_init>:
 8006f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7e:	bf00      	nop
 8006f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f82:	bc08      	pop	{r3}
 8006f84:	469e      	mov	lr, r3
 8006f86:	4770      	bx	lr

08006f88 <_fini>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	bf00      	nop
 8006f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8e:	bc08      	pop	{r3}
 8006f90:	469e      	mov	lr, r3
 8006f92:	4770      	bx	lr
